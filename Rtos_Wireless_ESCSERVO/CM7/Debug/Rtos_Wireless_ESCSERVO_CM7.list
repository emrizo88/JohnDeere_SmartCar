
Rtos_Wireless_ESCSERVO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f768  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd0  0800fa08  0800fa08  0001fa08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105d8  080105d8  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  080105d8  080105d8  000205d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105e0  080105e0  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105e0  080105e0  000205e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080105e4  080105e4  000205e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  24000000  080105e8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ed0  24000200  080107e4  00030200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240050d0  080107e4  000350d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b86a  00000000  00000000  0003022a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000483c  00000000  00000000  0005ba94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020b0  00000000  00000000  000602d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f08  00000000  00000000  00062380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ed7b  00000000  00000000  00064288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000255b1  00000000  00000000  000a3003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019fd2e  00000000  00000000  000c85b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002682e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d98  00000000  00000000  00268334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000200 	.word	0x24000200
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f9f0 	.word	0x0800f9f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000204 	.word	0x24000204
 80002dc:	0800f9f0 	.word	0x0800f9f0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f003 fa13 	bl	8003c48 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fa0a 	bl	8003c48 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2400022c 	.word	0x2400022c
 8000840:	24000230 	.word	0x24000230

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f003 f9f3 	bl	8003c48 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f003 f9ea 	bl	8003c48 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2400022c 	.word	0x2400022c
 8000880:	24000232 	.word	0x24000232

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f005 feda 	bl	8006660 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f006 f8c4 	bl	8006a44 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	24000234 	.word	0x24000234

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f005 feaf 	bl	8006660 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f006 f89a 	bl	8006a44 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	24000234 	.word	0x24000234

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f005 fe85 	bl	8006660 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	24000234 	.word	0x24000234

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f005 fe65 	bl	8006660 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f005 fe5e 	bl	8006660 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	24000234 	.word	0x24000234

080009b8 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009c4:	f000 fa0a 	bl	8000ddc <NRF24_getPayloadSize>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d303      	bcc.n	80009da <NRF24_read_payload+0x22>
 80009d2:	f000 fa03 	bl	8000ddc <NRF24_getPayloadSize>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <NRF24_read_payload+0x24>
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff10 	bl	8000804 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009e4:	2361      	movs	r3, #97	; 0x61
 80009e6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80009e8:	f107 010e 	add.w	r1, r7, #14
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <NRF24_read_payload+0x5c>)
 80009f2:	f005 fe35 	bl	8006660 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <NRF24_read_payload+0x5c>)
 8000a00:	f006 f820 	bl	8006a44 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fefd 	bl	8000804 <NRF24_csn>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	24000234 	.word	0x24000234

08000a18 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a1c:	21ff      	movs	r1, #255	; 0xff
 8000a1e:	20e1      	movs	r0, #225	; 0xe1
 8000a20:	f7ff ff80 	bl	8000924 <NRF24_write_register>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a2c:	21ff      	movs	r1, #255	; 0xff
 8000a2e:	20e2      	movs	r0, #226	; 0xe2
 8000a30:	f7ff ff78 	bl	8000924 <NRF24_write_register>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff ff20 	bl	8000884 <NRF24_read_register>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a54:	b082      	sub	sp, #8
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
 8000a64:	4613      	mov	r3, r2
 8000a66:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a68:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <NRF24_begin+0x1b0>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	4619      	mov	r1, r3
 8000a74:	f00b feed 	bl	800c852 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a78:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <NRF24_begin+0x1b4>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a7e:	4a63      	ldr	r2, [pc, #396]	; (8000c0c <NRF24_begin+0x1b8>)
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <NRF24_begin+0x1bc>)
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff feba 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fed7 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f002 fab2 	bl	8003000 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff40 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000aa4:	213f      	movs	r1, #63	; 0x3f
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff3c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff ff38 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000abc:	2103      	movs	r1, #3
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000acc:	210f      	movs	r1, #15
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff ff24 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff ff20 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f7ff ff1c 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000aec:	23e7      	movs	r3, #231	; 0xe7
 8000aee:	733b      	strb	r3, [r7, #12]
 8000af0:	23e7      	movs	r3, #231	; 0xe7
 8000af2:	72fb      	strb	r3, [r7, #11]
 8000af4:	23e7      	movs	r3, #231	; 0xe7
 8000af6:	72bb      	strb	r3, [r7, #10]
 8000af8:	23e7      	movs	r3, #231	; 0xe7
 8000afa:	727b      	strb	r3, [r7, #9]
 8000afc:	23e7      	movs	r3, #231	; 0xe7
 8000afe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2205      	movs	r2, #5
 8000b06:	4619      	mov	r1, r3
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f7ff ff2d 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000b0e:	23c2      	movs	r3, #194	; 0xc2
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	23c2      	movs	r3, #194	; 0xc2
 8000b14:	72fb      	strb	r3, [r7, #11]
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	72bb      	strb	r3, [r7, #10]
 8000b1a:	23c2      	movs	r3, #194	; 0xc2
 8000b1c:	727b      	strb	r3, [r7, #9]
 8000b1e:	23c2      	movs	r3, #194	; 0xc2
 8000b20:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2205      	movs	r2, #5
 8000b28:	4619      	mov	r1, r3
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f7ff ff1c 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b30:	21c3      	movs	r1, #195	; 0xc3
 8000b32:	200c      	movs	r0, #12
 8000b34:	f7ff fef6 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b38:	21c4      	movs	r1, #196	; 0xc4
 8000b3a:	200d      	movs	r0, #13
 8000b3c:	f7ff fef2 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b40:	21c5      	movs	r1, #197	; 0xc5
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff feee 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b48:	21c6      	movs	r1, #198	; 0xc6
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff feea 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	733b      	strb	r3, [r7, #12]
 8000b54:	23e7      	movs	r3, #231	; 0xe7
 8000b56:	72fb      	strb	r3, [r7, #11]
 8000b58:	23e7      	movs	r3, #231	; 0xe7
 8000b5a:	72bb      	strb	r3, [r7, #10]
 8000b5c:	23e7      	movs	r3, #231	; 0xe7
 8000b5e:	727b      	strb	r3, [r7, #9]
 8000b60:	23e7      	movs	r3, #231	; 0xe7
 8000b62:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2205      	movs	r2, #5
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f7ff fefb 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2011      	movs	r0, #17
 8000b76:	f7ff fed5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f7ff fed1 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2013      	movs	r0, #19
 8000b86:	f7ff fecd 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2014      	movs	r0, #20
 8000b8e:	f7ff fec9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2015      	movs	r0, #21
 8000b96:	f7ff fec5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2016      	movs	r0, #22
 8000b9e:	f7ff fec1 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000ba2:	f000 fa7d 	bl	80010a0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f7ff febb 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f7ff feb7 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000bb6:	f000 fa8d 	bl	80010d4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bba:	210f      	movs	r1, #15
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f000 f8c5 	bl	8000d4c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f97d 	bl	8000ec2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f9b3 	bl	8000f34 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 f9f6 	bl	8000fc0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000bd4:	f000 f948 	bl	8000e68 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f000 f8e7 	bl	8000dac <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000bde:	f000 fa56 	bl	800108e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000be2:	204c      	movs	r0, #76	; 0x4c
 8000be4:	f000 f8cd 	bl	8000d82 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000be8:	f7ff ff16 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bec:	f7ff ff1c 	bl	8000a28 <NRF24_flush_rx>

	NRF24_powerDown();
 8000bf0:	f000 fa0e 	bl	8001010 <NRF24_powerDown>

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfe:	b002      	add	sp, #8
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	24000234 	.word	0x24000234
 8000c08:	2400022c 	.word	0x2400022c
 8000c0c:	24000230 	.word	0x24000230
 8000c10:	24000232 	.word	0x24000232

08000c14 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe33 	bl	8000884 <NRF24_read_register>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f043 0303 	orr.w	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fe7b 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <NRF24_startListening+0x48>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	d004      	beq.n	8000c42 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c38:	2205      	movs	r2, #5
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <NRF24_startListening+0x48>)
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f7ff fe93 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000c42:	f7ff fee9 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c46:	f7ff feef 	bl	8000a28 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdfa 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c50:	2096      	movs	r0, #150	; 0x96
 8000c52:	f7ff fdb5 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24000220 	.word	0x24000220

08000c60 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f9e2 	bl	800102e <NRF24_availablePipe>
 8000c6a:	4603      	mov	r3, r0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe99 	bl	80009b8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c86:	2017      	movs	r0, #23
 8000c88:	f7ff fdfc 	bl	8000884 <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c94:	f7ff fec8 	bl	8000a28 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c98:	f000 f8ac 	bl	8000df4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e9c7 2300 	strd	r2, r3, [r7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cca:	491c      	ldr	r1, [pc, #112]	; (8000d3c <NRF24_openReadingPipe+0x8c>)
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d82d      	bhi.n	8000d32 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d808      	bhi.n	8000cee <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe3e 	bl	8000968 <NRF24_write_registerN>
 8000cec:	e007      	b.n	8000cfe <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe35 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <NRF24_openReadingPipe+0x94>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <NRF24_openReadingPipe+0x98>)
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe0a 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fdb7 	bl	8000884 <NRF24_read_register>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	}

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000220 	.word	0x24000220
 8000d40:	080100b0 	.word	0x080100b0
 8000d44:	080100b8 	.word	0x080100b8
 8000d48:	24000228 	.word	0x24000228

08000d4c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fdd5 	bl	8000924 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d8c:	237f      	movs	r3, #127	; 0x7f
 8000d8e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf28      	it	cs
 8000d98:	4613      	movcs	r3, r2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f7ff fdc0 	bl	8000924 <NRF24_write_register>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000db6:	2320      	movs	r3, #32
 8000db8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bf28      	it	cs
 8000dc2:	4613      	movcs	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <NRF24_setPayloadSize+0x2c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	24000228 	.word	0x24000228

08000ddc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return payload_size;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <NRF24_getPayloadSize+0x14>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	24000228 	.word	0x24000228

08000df4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000df8:	2060      	movs	r0, #96	; 0x60
 8000dfa:	f7ff fd43 	bl	8000884 <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <NRF24_enableDynamicPayloads>:
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
}
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f7ff fd3b 	bl	8000884 <NRF24_read_register>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f7ff fd83 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f7ff fd30 	bl	8000884 <NRF24_read_register>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10c      	bne.n	8000e44 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e2a:	f000 f939 	bl	80010a0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e2e:	201d      	movs	r0, #29
 8000e30:	f7ff fd28 	bl	8000884 <NRF24_read_register>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	201d      	movs	r0, #29
 8000e40:	f7ff fd70 	bl	8000924 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000e44:	201c      	movs	r0, #28
 8000e46:	f7ff fd1d 	bl	8000884 <NRF24_read_register>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	201c      	movs	r0, #28
 8000e56:	f7ff fd65 	bl	8000924 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000e5a:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <NRF24_enableDynamicPayloads+0x60>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	24000229 	.word	0x24000229

08000e68 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000e6c:	201d      	movs	r0, #29
 8000e6e:	f7ff fd09 	bl	8000884 <NRF24_read_register>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f023 0304 	bic.w	r3, r3, #4
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	201d      	movs	r0, #29
 8000e7e:	f7ff fd51 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000e82:	2100      	movs	r1, #0
 8000e84:	201c      	movs	r0, #28
 8000e86:	f7ff fd4d 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000e8a:	4b02      	ldr	r3, [pc, #8]	; (8000e94 <NRF24_disableDynamicPayloads+0x2c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	24000229 	.word	0x24000229

08000e98 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d004      	beq.n	8000eb2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000ea8:	213f      	movs	r1, #63	; 0x3f
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff fd3a 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000eb0:	e003      	b.n	8000eba <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f7ff fd35 	bl	8000924 <NRF24_write_register>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000ecc:	2006      	movs	r0, #6
 8000ece:	f7ff fcd9 	bl	8000884 <NRF24_read_register>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	f023 0306 	bic.w	r3, r3, #6
 8000edc:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d104      	bne.n	8000eee <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	f043 0306 	orr.w	r3, r3, #6
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e019      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d104      	bne.n	8000efe <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e011      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d104      	bne.n	8000f0e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e009      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d103      	bne.n	8000f22 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	f043 0306 	orr.w	r3, r3, #6
 8000f20:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4619      	mov	r1, r3
 8000f26:	2006      	movs	r0, #6
 8000f28:	f7ff fcfc 	bl	8000924 <NRF24_write_register>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f42:	2006      	movs	r0, #6
 8000f44:	f7ff fc9e 	bl	8000884 <NRF24_read_register>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000f58:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d107      	bne.n	8000f70 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	73bb      	strb	r3, [r7, #14]
 8000f6e:	e00d      	b.n	8000f8c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d107      	bne.n	8000f86 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	73bb      	strb	r3, [r7, #14]
 8000f84:	e002      	b.n	8000f8c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	2006      	movs	r0, #6
 8000f92:	f7ff fcc7 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000f96:	2006      	movs	r0, #6
 8000f98:	f7ff fc74 	bl	8000884 <NRF24_read_register>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d102      	bne.n	8000fac <NRF24_setDataRate+0x78>
  {
    result = true;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e002      	b.n	8000fb2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2400022a 	.word	0x2400022a

08000fc0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff fc5a 	bl	8000884 <NRF24_read_register>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f023 030c 	bic.w	r3, r3, #12
 8000fd6:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00f      	beq.n	8000ffe <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d104      	bne.n	8000fee <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e007      	b.n	8000ffe <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	4619      	mov	r1, r3
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff fc8e 	bl	8000924 <NRF24_write_register>
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff fc35 	bl	8000884 <NRF24_read_register>
 800101a:	4603      	mov	r3, r0
 800101c:	f023 0302 	bic.w	r3, r3, #2
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4619      	mov	r1, r3
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fc7d 	bl	8000924 <NRF24_write_register>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}

0800102e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001036:	f7ff fcff 	bl	8000a38 <NRF24_get_status>
 800103a:	4603      	mov	r3, r0
 800103c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001044:	2b00      	cmp	r3, #0
 8001046:	bf14      	ite	ne
 8001048:	2301      	movne	r3, #1
 800104a:	2300      	moveq	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

  if (result)
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d017      	beq.n	8001084 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	b2da      	uxtb	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	2007      	movs	r0, #7
 800106e:	f7ff fc59 	bl	8000924 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	f003 0320 	and.w	r3, r3, #32
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800107c:	2120      	movs	r1, #32
 800107e:	2007      	movs	r0, #7
 8001080:	f7ff fc50 	bl	8000924 <NRF24_write_register>
    }
  }
  return result;
 8001084:	7bbb      	ldrb	r3, [r7, #14]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001092:	2170      	movs	r1, #112	; 0x70
 8001094:	2007      	movs	r0, #7
 8001096:	f7ff fc45 	bl	8000924 <NRF24_write_register>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fbac 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80010ac:	2350      	movs	r3, #80	; 0x50
 80010ae:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80010b0:	2373      	movs	r3, #115	; 0x73
 80010b2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80010b4:	1d39      	adds	r1, r7, #4
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	2202      	movs	r2, #2
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <NRF24_ACTIVATE_cmd+0x30>)
 80010bc:	f005 fad0 	bl	8006660 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f7ff fb9f 	bl	8000804 <NRF24_csn>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	24000234 	.word	0x24000234

080010d4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d6:	b0a1      	sub	sp, #132	; 0x84
 80010d8:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	49c3      	ldr	r1, [pc, #780]	; (80013ec <printRadioSettings+0x318>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f00c f935 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f8f8 	bl	80002e0 <strlen>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	f107 0108 	add.w	r1, r7, #8
 80010f8:	230a      	movs	r3, #10
 80010fa:	48bd      	ldr	r0, [pc, #756]	; (80013f0 <printRadioSettings+0x31c>)
 80010fc:	f007 fc12 	bl	8008924 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff fbbf 	bl	8000884 <NRF24_read_register>
 8001106:	4603      	mov	r3, r0
 8001108:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800110c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001118:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <printRadioSettings+0x5e>
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	49b2      	ldr	r1, [pc, #712]	; (80013f4 <printRadioSettings+0x320>)
 800112a:	4618      	mov	r0, r3
 800112c:	f00c f910 	bl	800d350 <siprintf>
 8001130:	e00c      	b.n	800114c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	49b0      	ldr	r1, [pc, #704]	; (80013f8 <printRadioSettings+0x324>)
 8001138:	4618      	mov	r0, r3
 800113a:	f00c f909 	bl	800d350 <siprintf>
 800113e:	e005      	b.n	800114c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	49ad      	ldr	r1, [pc, #692]	; (80013fc <printRadioSettings+0x328>)
 8001146:	4618      	mov	r0, r3
 8001148:	f00c f902 	bl	800d350 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f8c5 	bl	80002e0 <strlen>
 8001156:	4603      	mov	r3, r0
 8001158:	b29a      	uxth	r2, r3
 800115a:	f107 0108 	add.w	r1, r7, #8
 800115e:	230a      	movs	r3, #10
 8001160:	48a3      	ldr	r0, [pc, #652]	; (80013f0 <printRadioSettings+0x31c>)
 8001162:	f007 fbdf 	bl	8008924 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001166:	2001      	movs	r0, #1
 8001168:	f7ff fb8c 	bl	8000884 <NRF24_read_register>
 800116c:	4603      	mov	r3, r0
 800116e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001172:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001176:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800117a:	2b00      	cmp	r3, #0
 800117c:	bfcc      	ite	gt
 800117e:	2301      	movgt	r3, #1
 8001180:	2300      	movle	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001186:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800118a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800118e:	2b00      	cmp	r3, #0
 8001190:	bfcc      	ite	gt
 8001192:	2301      	movgt	r3, #1
 8001194:	2300      	movle	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800119a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800119e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bfcc      	ite	gt
 80011a6:	2301      	movgt	r3, #1
 80011a8:	2300      	movle	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011b2:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bfcc      	ite	gt
 80011ba:	2301      	movgt	r3, #1
 80011bc:	2300      	movle	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c6:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bfcc      	ite	gt
 80011ce:	2301      	movgt	r3, #1
 80011d0:	2300      	movle	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011da:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bfcc      	ite	gt
 80011e2:	2301      	movgt	r3, #1
 80011e4:	2300      	movle	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f107 0008 	add.w	r0, r7, #8
 80011ec:	9303      	str	r3, [sp, #12]
 80011ee:	9402      	str	r4, [sp, #8]
 80011f0:	9101      	str	r1, [sp, #4]
 80011f2:	9200      	str	r2, [sp, #0]
 80011f4:	4633      	mov	r3, r6
 80011f6:	462a      	mov	r2, r5
 80011f8:	4981      	ldr	r1, [pc, #516]	; (8001400 <printRadioSettings+0x32c>)
 80011fa:	f00c f8a9 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f86c 	bl	80002e0 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	f107 0108 	add.w	r1, r7, #8
 8001210:	230a      	movs	r3, #10
 8001212:	4877      	ldr	r0, [pc, #476]	; (80013f0 <printRadioSettings+0x31c>)
 8001214:	f007 fb86 	bl	8008924 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001218:	2002      	movs	r0, #2
 800121a:	f7ff fb33 	bl	8000884 <NRF24_read_register>
 800121e:	4603      	mov	r3, r0
 8001220:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001224:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001228:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800122c:	2b00      	cmp	r3, #0
 800122e:	bfcc      	ite	gt
 8001230:	2301      	movgt	r3, #1
 8001232:	2300      	movle	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001238:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001240:	2b00      	cmp	r3, #0
 8001242:	bfcc      	ite	gt
 8001244:	2301      	movgt	r3, #1
 8001246:	2300      	movle	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800124c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001250:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001254:	2b00      	cmp	r3, #0
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001260:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001264:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001268:	2b00      	cmp	r3, #0
 800126a:	bfcc      	ite	gt
 800126c:	2301      	movgt	r3, #1
 800126e:	2300      	movle	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001274:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001278:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800127c:	2b00      	cmp	r3, #0
 800127e:	bfcc      	ite	gt
 8001280:	2301      	movgt	r3, #1
 8001282:	2300      	movle	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001288:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800128c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001290:	2b00      	cmp	r3, #0
 8001292:	bfcc      	ite	gt
 8001294:	2301      	movgt	r3, #1
 8001296:	2300      	movle	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f107 0008 	add.w	r0, r7, #8
 800129e:	9303      	str	r3, [sp, #12]
 80012a0:	9402      	str	r4, [sp, #8]
 80012a2:	9101      	str	r1, [sp, #4]
 80012a4:	9200      	str	r2, [sp, #0]
 80012a6:	4633      	mov	r3, r6
 80012a8:	462a      	mov	r2, r5
 80012aa:	4956      	ldr	r1, [pc, #344]	; (8001404 <printRadioSettings+0x330>)
 80012ac:	f00c f850 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f813 	bl	80002e0 <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f107 0108 	add.w	r1, r7, #8
 80012c2:	230a      	movs	r3, #10
 80012c4:	484a      	ldr	r0, [pc, #296]	; (80013f0 <printRadioSettings+0x31c>)
 80012c6:	f007 fb2d 	bl	8008924 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff fada 	bl	8000884 <NRF24_read_register>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80012da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012de:	3302      	adds	r3, #2
 80012e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80012e4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4946      	ldr	r1, [pc, #280]	; (8001408 <printRadioSettings+0x334>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f00c f82e 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7fe fff1 	bl	80002e0 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f107 0108 	add.w	r1, r7, #8
 8001306:	230a      	movs	r3, #10
 8001308:	4839      	ldr	r0, [pc, #228]	; (80013f0 <printRadioSettings+0x31c>)
 800130a:	f007 fb0b 	bl	8008924 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800130e:	2005      	movs	r0, #5
 8001310:	f7ff fab8 	bl	8000884 <NRF24_read_register>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800131a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800131e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	4939      	ldr	r1, [pc, #228]	; (800140c <printRadioSettings+0x338>)
 8001328:	4618      	mov	r0, r3
 800132a:	f00c f811 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ffd4 	bl	80002e0 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	f107 0108 	add.w	r1, r7, #8
 8001340:	230a      	movs	r3, #10
 8001342:	482b      	ldr	r0, [pc, #172]	; (80013f0 <printRadioSettings+0x31c>)
 8001344:	f007 faee 	bl	8008924 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001348:	2006      	movs	r0, #6
 800134a:	f7ff fa9b 	bl	8000884 <NRF24_read_register>
 800134e:	4603      	mov	r3, r0
 8001350:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001354:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <printRadioSettings+0x29a>
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	492a      	ldr	r1, [pc, #168]	; (8001410 <printRadioSettings+0x33c>)
 8001366:	4618      	mov	r0, r3
 8001368:	f00b fff2 	bl	800d350 <siprintf>
 800136c:	e005      	b.n	800137a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	4928      	ldr	r1, [pc, #160]	; (8001414 <printRadioSettings+0x340>)
 8001374:	4618      	mov	r0, r3
 8001376:	f00b ffeb 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	4618      	mov	r0, r3
 8001380:	f7fe ffae 	bl	80002e0 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	b29a      	uxth	r2, r3
 8001388:	f107 0108 	add.w	r1, r7, #8
 800138c:	230a      	movs	r3, #10
 800138e:	4818      	ldr	r0, [pc, #96]	; (80013f0 <printRadioSettings+0x31c>)
 8001390:	f007 fac8 	bl	8008924 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001394:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001398:	f003 0306 	and.w	r3, r3, #6
 800139c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80013a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80013aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <printRadioSettings+0x2ec>
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4918      	ldr	r1, [pc, #96]	; (8001418 <printRadioSettings+0x344>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00b ffc9 	bl	800d350 <siprintf>
 80013be:	e03b      	b.n	8001438 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80013c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d106      	bne.n	80013d6 <printRadioSettings+0x302>
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4913      	ldr	r1, [pc, #76]	; (800141c <printRadioSettings+0x348>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00b ffbe 	bl	800d350 <siprintf>
 80013d4:	e030      	b.n	8001438 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80013d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d122      	bne.n	8001424 <printRadioSettings+0x350>
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	490f      	ldr	r1, [pc, #60]	; (8001420 <printRadioSettings+0x34c>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f00b ffb3 	bl	800d350 <siprintf>
 80013ea:	e025      	b.n	8001438 <printRadioSettings+0x364>
 80013ec:	0800fa08 	.word	0x0800fa08
 80013f0:	240002bc 	.word	0x240002bc
 80013f4:	0800fa3c 	.word	0x0800fa3c
 80013f8:	0800fa58 	.word	0x0800fa58
 80013fc:	0800fa74 	.word	0x0800fa74
 8001400:	0800fa88 	.word	0x0800fa88
 8001404:	0800facc 	.word	0x0800facc
 8001408:	0800fb18 	.word	0x0800fb18
 800140c:	0800fb34 	.word	0x0800fb34
 8001410:	0800fb48 	.word	0x0800fb48
 8001414:	0800fb60 	.word	0x0800fb60
 8001418:	0800fb78 	.word	0x0800fb78
 800141c:	0800fb8c 	.word	0x0800fb8c
 8001420:	0800fba0 	.word	0x0800fba0
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001424:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001428:	2b03      	cmp	r3, #3
 800142a:	d105      	bne.n	8001438 <printRadioSettings+0x364>
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	49d7      	ldr	r1, [pc, #860]	; (8001790 <printRadioSettings+0x6bc>)
 8001432:	4618      	mov	r0, r3
 8001434:	f00b ff8c 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe ff4f 	bl	80002e0 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	f107 0108 	add.w	r1, r7, #8
 800144a:	230a      	movs	r3, #10
 800144c:	48d1      	ldr	r0, [pc, #836]	; (8001794 <printRadioSettings+0x6c0>)
 800144e:	f007 fa69 	bl	8008924 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001452:	463b      	mov	r3, r7
 8001454:	2205      	movs	r2, #5
 8001456:	4619      	mov	r1, r3
 8001458:	200a      	movs	r0, #10
 800145a:	f7ff fa3b 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800145e:	793b      	ldrb	r3, [r7, #4]
 8001460:	461c      	mov	r4, r3
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	461d      	mov	r5, r3
 8001466:	78bb      	ldrb	r3, [r7, #2]
 8001468:	787a      	ldrb	r2, [r7, #1]
 800146a:	7839      	ldrb	r1, [r7, #0]
 800146c:	f107 0008 	add.w	r0, r7, #8
 8001470:	9102      	str	r1, [sp, #8]
 8001472:	9201      	str	r2, [sp, #4]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	462b      	mov	r3, r5
 8001478:	4622      	mov	r2, r4
 800147a:	49c7      	ldr	r1, [pc, #796]	; (8001798 <printRadioSettings+0x6c4>)
 800147c:	f00b ff68 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ff2b 	bl	80002e0 <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	f107 0108 	add.w	r1, r7, #8
 8001492:	230a      	movs	r3, #10
 8001494:	48bf      	ldr	r0, [pc, #764]	; (8001794 <printRadioSettings+0x6c0>)
 8001496:	f007 fa45 	bl	8008924 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800149a:	463b      	mov	r3, r7
 800149c:	2205      	movs	r2, #5
 800149e:	4619      	mov	r1, r3
 80014a0:	200b      	movs	r0, #11
 80014a2:	f7ff fa17 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80014a6:	793b      	ldrb	r3, [r7, #4]
 80014a8:	461c      	mov	r4, r3
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	461d      	mov	r5, r3
 80014ae:	78bb      	ldrb	r3, [r7, #2]
 80014b0:	787a      	ldrb	r2, [r7, #1]
 80014b2:	7839      	ldrb	r1, [r7, #0]
 80014b4:	f107 0008 	add.w	r0, r7, #8
 80014b8:	9102      	str	r1, [sp, #8]
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	462b      	mov	r3, r5
 80014c0:	4622      	mov	r2, r4
 80014c2:	49b6      	ldr	r1, [pc, #728]	; (800179c <printRadioSettings+0x6c8>)
 80014c4:	f00b ff44 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c8:	f107 0308 	add.w	r3, r7, #8
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe ff07 	bl	80002e0 <strlen>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	f107 0108 	add.w	r1, r7, #8
 80014da:	230a      	movs	r3, #10
 80014dc:	48ad      	ldr	r0, [pc, #692]	; (8001794 <printRadioSettings+0x6c0>)
 80014de:	f007 fa21 	bl	8008924 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80014e2:	463b      	mov	r3, r7
 80014e4:	2201      	movs	r2, #1
 80014e6:	4619      	mov	r1, r3
 80014e8:	200c      	movs	r0, #12
 80014ea:	f7ff f9f3 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014ee:	783b      	ldrb	r3, [r7, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	49aa      	ldr	r1, [pc, #680]	; (80017a0 <printRadioSettings+0x6cc>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f00b ff29 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe feec 	bl	80002e0 <strlen>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	f107 0108 	add.w	r1, r7, #8
 8001510:	230a      	movs	r3, #10
 8001512:	48a0      	ldr	r0, [pc, #640]	; (8001794 <printRadioSettings+0x6c0>)
 8001514:	f007 fa06 	bl	8008924 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001518:	463b      	mov	r3, r7
 800151a:	2201      	movs	r2, #1
 800151c:	4619      	mov	r1, r3
 800151e:	200d      	movs	r0, #13
 8001520:	f7ff f9d8 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001524:	783b      	ldrb	r3, [r7, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	499d      	ldr	r1, [pc, #628]	; (80017a4 <printRadioSettings+0x6d0>)
 800152e:	4618      	mov	r0, r3
 8001530:	f00b ff0e 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fed1 	bl	80002e0 <strlen>
 800153e:	4603      	mov	r3, r0
 8001540:	b29a      	uxth	r2, r3
 8001542:	f107 0108 	add.w	r1, r7, #8
 8001546:	230a      	movs	r3, #10
 8001548:	4892      	ldr	r0, [pc, #584]	; (8001794 <printRadioSettings+0x6c0>)
 800154a:	f007 f9eb 	bl	8008924 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800154e:	463b      	mov	r3, r7
 8001550:	2201      	movs	r2, #1
 8001552:	4619      	mov	r1, r3
 8001554:	200e      	movs	r0, #14
 8001556:	f7ff f9bd 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800155a:	783b      	ldrb	r3, [r7, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	4991      	ldr	r1, [pc, #580]	; (80017a8 <printRadioSettings+0x6d4>)
 8001564:	4618      	mov	r0, r3
 8001566:	f00b fef3 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe feb6 	bl	80002e0 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	b29a      	uxth	r2, r3
 8001578:	f107 0108 	add.w	r1, r7, #8
 800157c:	230a      	movs	r3, #10
 800157e:	4885      	ldr	r0, [pc, #532]	; (8001794 <printRadioSettings+0x6c0>)
 8001580:	f007 f9d0 	bl	8008924 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001584:	463b      	mov	r3, r7
 8001586:	2201      	movs	r2, #1
 8001588:	4619      	mov	r1, r3
 800158a:	200f      	movs	r0, #15
 800158c:	f7ff f9a2 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001590:	783b      	ldrb	r3, [r7, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	4984      	ldr	r1, [pc, #528]	; (80017ac <printRadioSettings+0x6d8>)
 800159a:	4618      	mov	r0, r3
 800159c:	f00b fed8 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe fe9b 	bl	80002e0 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	f107 0108 	add.w	r1, r7, #8
 80015b2:	230a      	movs	r3, #10
 80015b4:	4877      	ldr	r0, [pc, #476]	; (8001794 <printRadioSettings+0x6c0>)
 80015b6:	f007 f9b5 	bl	8008924 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80015ba:	463b      	mov	r3, r7
 80015bc:	2205      	movs	r2, #5
 80015be:	4619      	mov	r1, r3
 80015c0:	2010      	movs	r0, #16
 80015c2:	f7ff f987 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015c6:	793b      	ldrb	r3, [r7, #4]
 80015c8:	461c      	mov	r4, r3
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	461d      	mov	r5, r3
 80015ce:	78bb      	ldrb	r3, [r7, #2]
 80015d0:	787a      	ldrb	r2, [r7, #1]
 80015d2:	7839      	ldrb	r1, [r7, #0]
 80015d4:	f107 0008 	add.w	r0, r7, #8
 80015d8:	9102      	str	r1, [sp, #8]
 80015da:	9201      	str	r2, [sp, #4]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	462b      	mov	r3, r5
 80015e0:	4622      	mov	r2, r4
 80015e2:	4973      	ldr	r1, [pc, #460]	; (80017b0 <printRadioSettings+0x6dc>)
 80015e4:	f00b feb4 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe fe77 	bl	80002e0 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	f107 0108 	add.w	r1, r7, #8
 80015fa:	230a      	movs	r3, #10
 80015fc:	4865      	ldr	r0, [pc, #404]	; (8001794 <printRadioSettings+0x6c0>)
 80015fe:	f007 f991 	bl	8008924 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001602:	2011      	movs	r0, #17
 8001604:	f7ff f93e 	bl	8000884 <NRF24_read_register>
 8001608:	4603      	mov	r3, r0
 800160a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800160e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001612:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	4966      	ldr	r1, [pc, #408]	; (80017b4 <printRadioSettings+0x6e0>)
 800161c:	4618      	mov	r0, r3
 800161e:	f00b fe97 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fe5a 	bl	80002e0 <strlen>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	f107 0108 	add.w	r1, r7, #8
 8001634:	230a      	movs	r3, #10
 8001636:	4857      	ldr	r0, [pc, #348]	; (8001794 <printRadioSettings+0x6c0>)
 8001638:	f007 f974 	bl	8008924 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 800163c:	2012      	movs	r0, #18
 800163e:	f7ff f921 	bl	8000884 <NRF24_read_register>
 8001642:	4603      	mov	r3, r0
 8001644:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001648:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800164c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4958      	ldr	r1, [pc, #352]	; (80017b8 <printRadioSettings+0x6e4>)
 8001656:	4618      	mov	r0, r3
 8001658:	f00b fe7a 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fe3d 	bl	80002e0 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	f107 0108 	add.w	r1, r7, #8
 800166e:	230a      	movs	r3, #10
 8001670:	4848      	ldr	r0, [pc, #288]	; (8001794 <printRadioSettings+0x6c0>)
 8001672:	f007 f957 	bl	8008924 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001676:	2013      	movs	r0, #19
 8001678:	f7ff f904 	bl	8000884 <NRF24_read_register>
 800167c:	4603      	mov	r3, r0
 800167e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001682:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	494b      	ldr	r1, [pc, #300]	; (80017bc <printRadioSettings+0x6e8>)
 8001690:	4618      	mov	r0, r3
 8001692:	f00b fe5d 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fe20 	bl	80002e0 <strlen>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	f107 0108 	add.w	r1, r7, #8
 80016a8:	230a      	movs	r3, #10
 80016aa:	483a      	ldr	r0, [pc, #232]	; (8001794 <printRadioSettings+0x6c0>)
 80016ac:	f007 f93a 	bl	8008924 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80016b0:	2014      	movs	r0, #20
 80016b2:	f7ff f8e7 	bl	8000884 <NRF24_read_register>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	493d      	ldr	r1, [pc, #244]	; (80017c0 <printRadioSettings+0x6ec>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00b fe40 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fe03 	bl	80002e0 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f107 0108 	add.w	r1, r7, #8
 80016e2:	230a      	movs	r3, #10
 80016e4:	482b      	ldr	r0, [pc, #172]	; (8001794 <printRadioSettings+0x6c0>)
 80016e6:	f007 f91d 	bl	8008924 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80016ea:	2015      	movs	r0, #21
 80016ec:	f7ff f8ca 	bl	8000884 <NRF24_read_register>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4930      	ldr	r1, [pc, #192]	; (80017c4 <printRadioSettings+0x6f0>)
 8001704:	4618      	mov	r0, r3
 8001706:	f00b fe23 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fde6 	bl	80002e0 <strlen>
 8001714:	4603      	mov	r3, r0
 8001716:	b29a      	uxth	r2, r3
 8001718:	f107 0108 	add.w	r1, r7, #8
 800171c:	230a      	movs	r3, #10
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <printRadioSettings+0x6c0>)
 8001720:	f007 f900 	bl	8008924 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001724:	2016      	movs	r0, #22
 8001726:	f7ff f8ad 	bl	8000884 <NRF24_read_register>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001730:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001734:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	4922      	ldr	r1, [pc, #136]	; (80017c8 <printRadioSettings+0x6f4>)
 800173e:	4618      	mov	r0, r3
 8001740:	f00b fe06 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fdc9 	bl	80002e0 <strlen>
 800174e:	4603      	mov	r3, r0
 8001750:	b29a      	uxth	r2, r3
 8001752:	f107 0108 	add.w	r1, r7, #8
 8001756:	230a      	movs	r3, #10
 8001758:	480e      	ldr	r0, [pc, #56]	; (8001794 <printRadioSettings+0x6c0>)
 800175a:	f007 f8e3 	bl	8008924 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800175e:	201c      	movs	r0, #28
 8001760:	f7ff f890 	bl	8000884 <NRF24_read_register>
 8001764:	4603      	mov	r3, r0
 8001766:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800176a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800176e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001772:	2b00      	cmp	r3, #0
 8001774:	bfcc      	ite	gt
 8001776:	2301      	movgt	r3, #1
 8001778:	2300      	movle	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800177e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001782:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001786:	2b00      	cmp	r3, #0
 8001788:	bfcc      	ite	gt
 800178a:	2301      	movgt	r3, #1
 800178c:	2300      	movle	r3, #0
 800178e:	e01d      	b.n	80017cc <printRadioSettings+0x6f8>
 8001790:	0800fbb4 	.word	0x0800fbb4
 8001794:	240002bc 	.word	0x240002bc
 8001798:	0800fbc8 	.word	0x0800fbc8
 800179c:	0800fbf8 	.word	0x0800fbf8
 80017a0:	0800fc28 	.word	0x0800fc28
 80017a4:	0800fc50 	.word	0x0800fc50
 80017a8:	0800fc78 	.word	0x0800fc78
 80017ac:	0800fca0 	.word	0x0800fca0
 80017b0:	0800fcc8 	.word	0x0800fcc8
 80017b4:	0800fcf4 	.word	0x0800fcf4
 80017b8:	0800fd10 	.word	0x0800fd10
 80017bc:	0800fd2c 	.word	0x0800fd2c
 80017c0:	0800fd48 	.word	0x0800fd48
 80017c4:	0800fd64 	.word	0x0800fd64
 80017c8:	0800fd80 	.word	0x0800fd80
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bfcc      	ite	gt
 80017dc:	2301      	movgt	r3, #1
 80017de:	2300      	movle	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bfcc      	ite	gt
 80017f0:	2301      	movgt	r3, #1
 80017f2:	2300      	movle	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017fc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001800:	2b00      	cmp	r3, #0
 8001802:	bfcc      	ite	gt
 8001804:	2301      	movgt	r3, #1
 8001806:	2300      	movle	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800180c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001810:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001814:	2b00      	cmp	r3, #0
 8001816:	bfcc      	ite	gt
 8001818:	2301      	movgt	r3, #1
 800181a:	2300      	movle	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f107 0008 	add.w	r0, r7, #8
 8001822:	9303      	str	r3, [sp, #12]
 8001824:	9402      	str	r4, [sp, #8]
 8001826:	9101      	str	r1, [sp, #4]
 8001828:	9200      	str	r2, [sp, #0]
 800182a:	4633      	mov	r3, r6
 800182c:	462a      	mov	r2, r5
 800182e:	4936      	ldr	r1, [pc, #216]	; (8001908 <printRadioSettings+0x834>)
 8001830:	f00b fd8e 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fd51 	bl	80002e0 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	b29a      	uxth	r2, r3
 8001842:	f107 0108 	add.w	r1, r7, #8
 8001846:	230a      	movs	r3, #10
 8001848:	4830      	ldr	r0, [pc, #192]	; (800190c <printRadioSettings+0x838>)
 800184a:	f007 f86b 	bl	8008924 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800184e:	201d      	movs	r0, #29
 8001850:	f7ff f818 	bl	8000884 <NRF24_read_register>
 8001854:	4603      	mov	r3, r0
 8001856:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800185a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <printRadioSettings+0x7a0>
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	4929      	ldr	r1, [pc, #164]	; (8001910 <printRadioSettings+0x83c>)
 800186c:	4618      	mov	r0, r3
 800186e:	f00b fd6f 	bl	800d350 <siprintf>
 8001872:	e005      	b.n	8001880 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	4926      	ldr	r1, [pc, #152]	; (8001914 <printRadioSettings+0x840>)
 800187a:	4618      	mov	r0, r3
 800187c:	f00b fd68 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fd2b 	bl	80002e0 <strlen>
 800188a:	4603      	mov	r3, r0
 800188c:	b29a      	uxth	r2, r3
 800188e:	f107 0108 	add.w	r1, r7, #8
 8001892:	230a      	movs	r3, #10
 8001894:	481d      	ldr	r0, [pc, #116]	; (800190c <printRadioSettings+0x838>)
 8001896:	f007 f845 	bl	8008924 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800189a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <printRadioSettings+0x7e0>
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	491b      	ldr	r1, [pc, #108]	; (8001918 <printRadioSettings+0x844>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00b fd4f 	bl	800d350 <siprintf>
 80018b2:	e005      	b.n	80018c0 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	4918      	ldr	r1, [pc, #96]	; (800191c <printRadioSettings+0x848>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	f00b fd48 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fd0b 	bl	80002e0 <strlen>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	f107 0108 	add.w	r1, r7, #8
 80018d2:	230a      	movs	r3, #10
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <printRadioSettings+0x838>)
 80018d6:	f007 f825 	bl	8008924 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	4910      	ldr	r1, [pc, #64]	; (8001920 <printRadioSettings+0x84c>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f00b fd35 	bl	800d350 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fcf8 	bl	80002e0 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	f107 0108 	add.w	r1, r7, #8
 80018f8:	230a      	movs	r3, #10
 80018fa:	4804      	ldr	r0, [pc, #16]	; (800190c <printRadioSettings+0x838>)
 80018fc:	f007 f812 	bl	8008924 <HAL_UART_Transmit>
}
 8001900:	bf00      	nop
 8001902:	3774      	adds	r7, #116	; 0x74
 8001904:	46bd      	mov	sp, r7
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	0800fd9c 	.word	0x0800fd9c
 800190c:	240002bc 	.word	0x240002bc
 8001910:	0800fde8 	.word	0x0800fde8
 8001914:	0800fe00 	.word	0x0800fe00
 8001918:	0800fe18 	.word	0x0800fe18
 800191c:	0800fe34 	.word	0x0800fe34
 8001920:	0800fa08 	.word	0x0800fa08

08001924 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001924:	b084      	sub	sp, #16
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
 800192a:	f107 0c08 	add.w	ip, r7, #8
 800192e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <nrf24_DebugUART_Init+0x2c>)
 8001934:	4618      	mov	r0, r3
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	2290      	movs	r2, #144	; 0x90
 800193c:	4619      	mov	r1, r3
 800193e:	f00a ff88 	bl	800c852 <memcpy>
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800194a:	b004      	add	sp, #16
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	240002bc 	.word	0x240002bc

08001954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b0a5      	sub	sp, #148	; 0x94
 8001958:	af22      	add	r7, sp, #136	; 0x88
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800195a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800195e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001960:	bf00      	nop
 8001962:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <main+0x15c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d004      	beq.n	8001978 <main+0x24>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1e5a      	subs	r2, r3, #1
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	dcf4      	bgt.n	8001962 <main+0xe>
  if ( timeout < 0 )
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	da01      	bge.n	8001982 <main+0x2e>
  {
  Error_Handler();
 800197e:	f000 ff27 	bl	80027d0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001982:	f001 fae1 	bl	8002f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001986:	f000 f8b9 	bl	8001afc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800198a:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <main+0x15c>)
 800198c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001990:	4a47      	ldr	r2, [pc, #284]	; (8001ab0 <main+0x15c>)
 8001992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800199a:	4b45      	ldr	r3, [pc, #276]	; (8001ab0 <main+0x15c>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80019a8:	2000      	movs	r0, #0
 80019aa:	f002 f967 	bl	8003c7c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80019ae:	2100      	movs	r1, #0
 80019b0:	2000      	movs	r0, #0
 80019b2:	f002 f97d 	bl	8003cb0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80019b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ba:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80019bc:	bf00      	nop
 80019be:	4b3c      	ldr	r3, [pc, #240]	; (8001ab0 <main+0x15c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d104      	bne.n	80019d4 <main+0x80>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	1e5a      	subs	r2, r3, #1
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dcf4      	bgt.n	80019be <main+0x6a>
if ( timeout < 0 )
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da01      	bge.n	80019de <main+0x8a>
{
Error_Handler();
 80019da:	f000 fef9 	bl	80027d0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019de:	f000 fb27 	bl	8002030 <MX_GPIO_Init>
  MX_TIM17_Init();
 80019e2:	f000 fab1 	bl	8001f48 <MX_TIM17_Init>
  MX_USART3_UART_Init();
 80019e6:	f000 fad7 	bl	8001f98 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80019ea:	f000 f967 	bl	8001cbc <MX_SPI1_Init>
  MX_FDCAN1_Init();
 80019ee:	f000 f901 	bl	8001bf4 <MX_FDCAN1_Init>
  MX_TIM4_Init();
 80019f2:	f000 f9b9 	bl	8001d68 <MX_TIM4_Init>
  MX_TIM5_Init();
 80019f6:	f000 fa2f 	bl	8001e58 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80019fa:	2104      	movs	r1, #4
 80019fc:	482d      	ldr	r0, [pc, #180]	; (8001ab4 <main+0x160>)
 80019fe:	f005 fdff 	bl	8007600 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8001a02:	210c      	movs	r1, #12
 8001a04:	482c      	ldr	r0, [pc, #176]	; (8001ab8 <main+0x164>)
 8001a06:	f005 fdfb 	bl	8007600 <HAL_TIM_PWM_Start>

  /* Configuración del Wireless */
  NRF24_begin(GPIOB, GPIO_PIN_2, GPIO_PIN_1, hspi1); // utilizar pines declarados para CE y CSN
 8001a0a:	4c2c      	ldr	r4, [pc, #176]	; (8001abc <main+0x168>)
 8001a0c:	4668      	mov	r0, sp
 8001a0e:	1d23      	adds	r3, r4, #4
 8001a10:	2284      	movs	r2, #132	; 0x84
 8001a12:	4619      	mov	r1, r3
 8001a14:	f00a ff1d 	bl	800c852 <memcpy>
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	2104      	movs	r1, #4
 8001a1e:	4828      	ldr	r0, [pc, #160]	; (8001ac0 <main+0x16c>)
 8001a20:	f7ff f818 	bl	8000a54 <NRF24_begin>
  nrf24_DebugUART_Init(huart3);
 8001a24:	4c27      	ldr	r4, [pc, #156]	; (8001ac4 <main+0x170>)
 8001a26:	4668      	mov	r0, sp
 8001a28:	f104 0310 	add.w	r3, r4, #16
 8001a2c:	2280      	movs	r2, #128	; 0x80
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f00a ff0f 	bl	800c852 <memcpy>
 8001a34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a38:	f7ff ff74 	bl	8001924 <nrf24_DebugUART_Init>
  NRF24_setAutoAck(false);
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff fa2b 	bl	8000e98 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 8001a42:	2034      	movs	r0, #52	; 0x34
 8001a44:	f7ff f99d 	bl	8000d82 <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 8001a48:	2020      	movs	r0, #32
 8001a4a:	f7ff f9af 	bl	8000dac <NRF24_setPayloadSize>
  NRF24_openReadingPipe(0, RxpipeAddrs);
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <main+0x174>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff f92b 	bl	8000cb0 <NRF24_openReadingPipe>
  NRF24_enableDynamicPayloads();
 8001a5a:	f7ff f9d3 	bl	8000e04 <NRF24_enableDynamicPayloads>
  printRadioSettings();
 8001a5e:	f7ff fb39 	bl	80010d4 <printRadioSettings>
  NRF24_startListening();
 8001a62:	f7ff f8d7 	bl	8000c14 <NRF24_startListening>
//
//  mpu9250_write_reg(28, 0x08);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a66:	f008 f857 	bl	8009b18 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001a6a:	4a18      	ldr	r2, [pc, #96]	; (8001acc <main+0x178>)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4818      	ldr	r0, [pc, #96]	; (8001ad0 <main+0x17c>)
 8001a70:	f008 f89c 	bl	8009bac <osThreadNew>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4a17      	ldr	r2, [pc, #92]	; (8001ad4 <main+0x180>)
 8001a78:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  wirelessTaskHandle = osThreadNew(wirelessTask, NULL, &wirelessTask_attributes);
 8001a7a:	4a17      	ldr	r2, [pc, #92]	; (8001ad8 <main+0x184>)
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4817      	ldr	r0, [pc, #92]	; (8001adc <main+0x188>)
 8001a80:	f008 f894 	bl	8009bac <osThreadNew>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a16      	ldr	r2, [pc, #88]	; (8001ae0 <main+0x18c>)
 8001a88:	6013      	str	r3, [r2, #0]
  //servoTaskHandle = osThreadNew(servoTask,NULL, &servoTask_attributes);
  escTaskHandle = osThreadNew(escTask,NULL, &escTask_attributes);
 8001a8a:	4a16      	ldr	r2, [pc, #88]	; (8001ae4 <main+0x190>)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4816      	ldr	r0, [pc, #88]	; (8001ae8 <main+0x194>)
 8001a90:	f008 f88c 	bl	8009bac <osThreadNew>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4a15      	ldr	r2, [pc, #84]	; (8001aec <main+0x198>)
 8001a98:	6013      	str	r3, [r2, #0]
  //canTaskHandle = osThreadNew(canTask,NULL, &canTask_attributes);
  movimientoCamaraTaskHandle = osThreadNew(movimientoCamaraTask,NULL, &movimientoCamaraTask_attributes);
 8001a9a:	4a15      	ldr	r2, [pc, #84]	; (8001af0 <main+0x19c>)
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4815      	ldr	r0, [pc, #84]	; (8001af4 <main+0x1a0>)
 8001aa0:	f008 f884 	bl	8009bac <osThreadNew>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <main+0x1a4>)
 8001aa8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001aaa:	f008 f859 	bl	8009b60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001aae:	e7fe      	b.n	8001aae <main+0x15a>
 8001ab0:	58024400 	.word	0x58024400
 8001ab4:	24000474 	.word	0x24000474
 8001ab8:	240004c0 	.word	0x240004c0
 8001abc:	240003ec 	.word	0x240003ec
 8001ac0:	58020400 	.word	0x58020400
 8001ac4:	24000558 	.word	0x24000558
 8001ac8:	24000018 	.word	0x24000018
 8001acc:	080100c0 	.word	0x080100c0
 8001ad0:	08002115 	.word	0x08002115
 8001ad4:	240005e8 	.word	0x240005e8
 8001ad8:	080100e4 	.word	0x080100e4
 8001adc:	08002125 	.word	0x08002125
 8001ae0:	240005ec 	.word	0x240005ec
 8001ae4:	08010108 	.word	0x08010108
 8001ae8:	080021a9 	.word	0x080021a9
 8001aec:	240005f0 	.word	0x240005f0
 8001af0:	0801012c 	.word	0x0801012c
 8001af4:	08002309 	.word	0x08002309
 8001af8:	240005f4 	.word	0x240005f4

08001afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b09c      	sub	sp, #112	; 0x70
 8001b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b06:	224c      	movs	r2, #76	; 0x4c
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f00a feaf 	bl	800c86e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2220      	movs	r2, #32
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f00a fea9 	bl	800c86e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001b1c:	2004      	movs	r0, #4
 8001b1e:	f002 f8db 	bl	8003cd8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001b22:	2300      	movs	r3, #0
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	4b31      	ldr	r3, [pc, #196]	; (8001bec <SystemClock_Config+0xf0>)
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	4a30      	ldr	r2, [pc, #192]	; (8001bec <SystemClock_Config+0xf0>)
 8001b2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b30:	6193      	str	r3, [r2, #24]
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <SystemClock_Config+0xf0>)
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <SystemClock_Config+0xf4>)
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	4a2b      	ldr	r2, [pc, #172]	; (8001bf0 <SystemClock_Config+0xf4>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001b48:	4b29      	ldr	r3, [pc, #164]	; (8001bf0 <SystemClock_Config+0xf4>)
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b54:	bf00      	nop
 8001b56:	4b25      	ldr	r3, [pc, #148]	; (8001bec <SystemClock_Config+0xf0>)
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b62:	d1f8      	bne.n	8001b56 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b64:	2302      	movs	r3, #2
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b6c:	2340      	movs	r3, #64	; 0x40
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b70:	2302      	movs	r3, #2
 8001b72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b74:	2300      	movs	r3, #0
 8001b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b78:	2304      	movs	r3, #4
 8001b7a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001b7c:	2309      	movs	r3, #9
 8001b7e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b80:	2302      	movs	r3, #2
 8001b82:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b84:	2303      	movs	r3, #3
 8001b86:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b8c:	230c      	movs	r3, #12
 8001b8e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001b90:	2302      	movs	r3, #2
 8001b92:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8001b94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b98:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f002 f8f4 	bl	8003d8c <HAL_RCC_OscConfig>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001baa:	f000 fe11 	bl	80027d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bae:	233f      	movs	r3, #63	; 0x3f
 8001bb0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001bc2:	2340      	movs	r3, #64	; 0x40
 8001bc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001bca:	2340      	movs	r3, #64	; 0x40
 8001bcc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 fd08 	bl	80045e8 <HAL_RCC_ClockConfig>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001bde:	f000 fdf7 	bl	80027d0 <Error_Handler>
  }
}
 8001be2:	bf00      	nop
 8001be4:	3770      	adds	r7, #112	; 0x70
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	58024800 	.word	0x58024800
 8001bf0:	58000400 	.word	0x58000400

08001bf4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001bf8:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001bfa:	4a2f      	ldr	r2, [pc, #188]	; (8001cb8 <MX_FDCAN1_Init+0xc4>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001c04:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001c10:	4b28      	ldr	r3, [pc, #160]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8001c16:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8001c1c:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c1e:	2202      	movs	r2, #2
 8001c20:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c24:	2208      	movs	r2, #8
 8001c26:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 8001c28:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c2a:	221f      	movs	r2, #31
 8001c2c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c30:	2208      	movs	r2, #8
 8001c32:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001c34:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001c40:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001c4c:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001c58:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c66:	2204      	movs	r2, #4
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001c6a:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c72:	2204      	movs	r2, #4
 8001c74:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001c76:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001c7c:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c7e:	2204      	movs	r2, #4
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c94:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001ca0:	4804      	ldr	r0, [pc, #16]	; (8001cb4 <MX_FDCAN1_Init+0xc0>)
 8001ca2:	f001 fabd 	bl	8003220 <HAL_FDCAN_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001cac:	f000 fd90 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	2400034c 	.word	0x2400034c
 8001cb8:	4000a000 	.word	0x4000a000

08001cbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001cc2:	4a28      	ldr	r2, [pc, #160]	; (8001d64 <MX_SPI1_Init+0xa8>)
 8001cc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cc6:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001cc8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ccc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cd4:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001cd6:	2207      	movs	r2, #7
 8001cd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cda:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ce0:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001ce8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001cee:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001cf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cf4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cfc:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d02:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d14:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d1c:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d28:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d40:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d4c:	4804      	ldr	r0, [pc, #16]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d4e:	f004 fb81 	bl	8006454 <HAL_SPI_Init>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001d58:	f000 fd3a 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	240003ec 	.word	0x240003ec
 8001d64:	40013000 	.word	0x40013000

08001d68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08e      	sub	sp, #56	; 0x38
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d88:	463b      	mov	r3, r7
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
 8001d94:	611a      	str	r2, [r3, #16]
 8001d96:	615a      	str	r2, [r3, #20]
 8001d98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d9a:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <MX_TIM4_Init+0xe8>)
 8001d9c:	4a2d      	ldr	r2, [pc, #180]	; (8001e54 <MX_TIM4_Init+0xec>)
 8001d9e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 19;
 8001da0:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <MX_TIM4_Init+0xe8>)
 8001da2:	2213      	movs	r2, #19
 8001da4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da6:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <MX_TIM4_Init+0xe8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001dac:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <MX_TIM4_Init+0xe8>)
 8001dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db4:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <MX_TIM4_Init+0xe8>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dba:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <MX_TIM4_Init+0xe8>)
 8001dbc:	2280      	movs	r2, #128	; 0x80
 8001dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001dc0:	4823      	ldr	r0, [pc, #140]	; (8001e50 <MX_TIM4_Init+0xe8>)
 8001dc2:	f005 faec 	bl	800739e <HAL_TIM_Base_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001dcc:	f000 fd00 	bl	80027d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dda:	4619      	mov	r1, r3
 8001ddc:	481c      	ldr	r0, [pc, #112]	; (8001e50 <MX_TIM4_Init+0xe8>)
 8001dde:	f005 ff51 	bl	8007c84 <HAL_TIM_ConfigClockSource>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001de8:	f000 fcf2 	bl	80027d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001dec:	4818      	ldr	r0, [pc, #96]	; (8001e50 <MX_TIM4_Init+0xe8>)
 8001dee:	f005 fba5 	bl	800753c <HAL_TIM_PWM_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001df8:	f000 fcea 	bl	80027d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e04:	f107 031c 	add.w	r3, r7, #28
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4811      	ldr	r0, [pc, #68]	; (8001e50 <MX_TIM4_Init+0xe8>)
 8001e0c:	f006 fc8e 	bl	800872c <HAL_TIMEx_MasterConfigSynchronization>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001e16:	f000 fcdb 	bl	80027d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e1a:	2360      	movs	r3, #96	; 0x60
 8001e1c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e2a:	463b      	mov	r3, r7
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4807      	ldr	r0, [pc, #28]	; (8001e50 <MX_TIM4_Init+0xe8>)
 8001e32:	f005 fe13 	bl	8007a5c <HAL_TIM_PWM_ConfigChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001e3c:	f000 fcc8 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e40:	4803      	ldr	r0, [pc, #12]	; (8001e50 <MX_TIM4_Init+0xe8>)
 8001e42:	f000 fe3b 	bl	8002abc <HAL_TIM_MspPostInit>

}
 8001e46:	bf00      	nop
 8001e48:	3738      	adds	r7, #56	; 0x38
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	24000474 	.word	0x24000474
 8001e54:	40000800 	.word	0x40000800

08001e58 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08e      	sub	sp, #56	; 0x38
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6c:	f107 031c 	add.w	r3, r7, #28
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e78:	463b      	mov	r3, r7
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
 8001e84:	611a      	str	r2, [r3, #16]
 8001e86:	615a      	str	r2, [r3, #20]
 8001e88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e8a:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <MX_TIM5_Init+0xe8>)
 8001e8c:	4a2d      	ldr	r2, [pc, #180]	; (8001f44 <MX_TIM5_Init+0xec>)
 8001e8e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 19;
 8001e90:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <MX_TIM5_Init+0xe8>)
 8001e92:	2213      	movs	r2, #19
 8001e94:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e96:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <MX_TIM5_Init+0xe8>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001e9c:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <MX_TIM5_Init+0xe8>)
 8001e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea4:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <MX_TIM5_Init+0xe8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eaa:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <MX_TIM5_Init+0xe8>)
 8001eac:	2280      	movs	r2, #128	; 0x80
 8001eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001eb0:	4823      	ldr	r0, [pc, #140]	; (8001f40 <MX_TIM5_Init+0xe8>)
 8001eb2:	f005 fa74 	bl	800739e <HAL_TIM_Base_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001ebc:	f000 fc88 	bl	80027d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ec6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eca:	4619      	mov	r1, r3
 8001ecc:	481c      	ldr	r0, [pc, #112]	; (8001f40 <MX_TIM5_Init+0xe8>)
 8001ece:	f005 fed9 	bl	8007c84 <HAL_TIM_ConfigClockSource>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001ed8:	f000 fc7a 	bl	80027d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001edc:	4818      	ldr	r0, [pc, #96]	; (8001f40 <MX_TIM5_Init+0xe8>)
 8001ede:	f005 fb2d 	bl	800753c <HAL_TIM_PWM_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001ee8:	f000 fc72 	bl	80027d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4811      	ldr	r0, [pc, #68]	; (8001f40 <MX_TIM5_Init+0xe8>)
 8001efc:	f006 fc16 	bl	800872c <HAL_TIMEx_MasterConfigSynchronization>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001f06:	f000 fc63 	bl	80027d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f0a:	2360      	movs	r3, #96	; 0x60
 8001f0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f1a:	463b      	mov	r3, r7
 8001f1c:	220c      	movs	r2, #12
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4807      	ldr	r0, [pc, #28]	; (8001f40 <MX_TIM5_Init+0xe8>)
 8001f22:	f005 fd9b 	bl	8007a5c <HAL_TIM_PWM_ConfigChannel>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001f2c:	f000 fc50 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001f30:	4803      	ldr	r0, [pc, #12]	; (8001f40 <MX_TIM5_Init+0xe8>)
 8001f32:	f000 fdc3 	bl	8002abc <HAL_TIM_MspPostInit>

}
 8001f36:	bf00      	nop
 8001f38:	3738      	adds	r7, #56	; 0x38
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	240004c0 	.word	0x240004c0
 8001f44:	40000c00 	.word	0x40000c00

08001f48 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001f4c:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <MX_TIM17_Init+0x48>)
 8001f4e:	4a11      	ldr	r2, [pc, #68]	; (8001f94 <MX_TIM17_Init+0x4c>)
 8001f50:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 65535;
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <MX_TIM17_Init+0x48>)
 8001f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f58:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <MX_TIM17_Init+0x48>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <MX_TIM17_Init+0x48>)
 8001f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f66:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <MX_TIM17_Init+0x48>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <MX_TIM17_Init+0x48>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <MX_TIM17_Init+0x48>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001f7a:	4805      	ldr	r0, [pc, #20]	; (8001f90 <MX_TIM17_Init+0x48>)
 8001f7c:	f005 fa0f 	bl	800739e <HAL_TIM_Base_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001f86:	f000 fc23 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	2400050c 	.word	0x2400050c
 8001f94:	40014800 	.word	0x40014800

08001f98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f9c:	4b22      	ldr	r3, [pc, #136]	; (8002028 <MX_USART3_UART_Init+0x90>)
 8001f9e:	4a23      	ldr	r2, [pc, #140]	; (800202c <MX_USART3_UART_Init+0x94>)
 8001fa0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fa2:	4b21      	ldr	r3, [pc, #132]	; (8002028 <MX_USART3_UART_Init+0x90>)
 8001fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fa8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001faa:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <MX_USART3_UART_Init+0x90>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <MX_USART3_UART_Init+0x90>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <MX_USART3_UART_Init+0x90>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fbc:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <MX_USART3_UART_Init+0x90>)
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc2:	4b19      	ldr	r3, [pc, #100]	; (8002028 <MX_USART3_UART_Init+0x90>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc8:	4b17      	ldr	r3, [pc, #92]	; (8002028 <MX_USART3_UART_Init+0x90>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <MX_USART3_UART_Init+0x90>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fd4:	4b14      	ldr	r3, [pc, #80]	; (8002028 <MX_USART3_UART_Init+0x90>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <MX_USART3_UART_Init+0x90>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fe0:	4811      	ldr	r0, [pc, #68]	; (8002028 <MX_USART3_UART_Init+0x90>)
 8001fe2:	f006 fc4f 	bl	8008884 <HAL_UART_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001fec:	f000 fbf0 	bl	80027d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	480d      	ldr	r0, [pc, #52]	; (8002028 <MX_USART3_UART_Init+0x90>)
 8001ff4:	f007 fc82 	bl	80098fc <HAL_UARTEx_SetTxFifoThreshold>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001ffe:	f000 fbe7 	bl	80027d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002002:	2100      	movs	r1, #0
 8002004:	4808      	ldr	r0, [pc, #32]	; (8002028 <MX_USART3_UART_Init+0x90>)
 8002006:	f007 fcb7 	bl	8009978 <HAL_UARTEx_SetRxFifoThreshold>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002010:	f000 fbde 	bl	80027d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002014:	4804      	ldr	r0, [pc, #16]	; (8002028 <MX_USART3_UART_Init+0x90>)
 8002016:	f007 fc38 	bl	800988a <HAL_UARTEx_DisableFifoMode>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002020:	f000 fbd6 	bl	80027d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	24000558 	.word	0x24000558
 800202c:	40004800 	.word	0x40004800

08002030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
 8002044:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002046:	4b31      	ldr	r3, [pc, #196]	; (800210c <MX_GPIO_Init+0xdc>)
 8002048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204c:	4a2f      	ldr	r2, [pc, #188]	; (800210c <MX_GPIO_Init+0xdc>)
 800204e:	f043 0304 	orr.w	r3, r3, #4
 8002052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002056:	4b2d      	ldr	r3, [pc, #180]	; (800210c <MX_GPIO_Init+0xdc>)
 8002058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002064:	4b29      	ldr	r3, [pc, #164]	; (800210c <MX_GPIO_Init+0xdc>)
 8002066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206a:	4a28      	ldr	r2, [pc, #160]	; (800210c <MX_GPIO_Init+0xdc>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002074:	4b25      	ldr	r3, [pc, #148]	; (800210c <MX_GPIO_Init+0xdc>)
 8002076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002082:	4b22      	ldr	r3, [pc, #136]	; (800210c <MX_GPIO_Init+0xdc>)
 8002084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002088:	4a20      	ldr	r2, [pc, #128]	; (800210c <MX_GPIO_Init+0xdc>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002092:	4b1e      	ldr	r3, [pc, #120]	; (800210c <MX_GPIO_Init+0xdc>)
 8002094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a0:	4b1a      	ldr	r3, [pc, #104]	; (800210c <MX_GPIO_Init+0xdc>)
 80020a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a6:	4a19      	ldr	r2, [pc, #100]	; (800210c <MX_GPIO_Init+0xdc>)
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <MX_GPIO_Init+0xdc>)
 80020b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020be:	4b13      	ldr	r3, [pc, #76]	; (800210c <MX_GPIO_Init+0xdc>)
 80020c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c4:	4a11      	ldr	r2, [pc, #68]	; (800210c <MX_GPIO_Init+0xdc>)
 80020c6:	f043 0308 	orr.w	r3, r3, #8
 80020ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <MX_GPIO_Init+0xdc>)
 80020d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	603b      	str	r3, [r7, #0]
 80020da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_CE_Pin|SPI_CSN_Pin, GPIO_PIN_RESET);
 80020dc:	2200      	movs	r2, #0
 80020de:	2106      	movs	r1, #6
 80020e0:	480b      	ldr	r0, [pc, #44]	; (8002110 <MX_GPIO_Init+0xe0>)
 80020e2:	f001 fdb1 	bl	8003c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CE_Pin SPI_CSN_Pin */
  GPIO_InitStruct.Pin = SPI_CE_Pin|SPI_CSN_Pin;
 80020e6:	2306      	movs	r3, #6
 80020e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ea:	2301      	movs	r3, #1
 80020ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4619      	mov	r1, r3
 80020fc:	4804      	ldr	r0, [pc, #16]	; (8002110 <MX_GPIO_Init+0xe0>)
 80020fe:	f001 fbf3 	bl	80038e8 <HAL_GPIO_Init>

}
 8002102:	bf00      	nop
 8002104:	3728      	adds	r7, #40	; 0x28
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	58024400 	.word	0x58024400
 8002110:	58020400 	.word	0x58020400

08002114 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800211c:	2001      	movs	r0, #1
 800211e:	f007 fdd7 	bl	8009cd0 <osDelay>
 8002122:	e7fb      	b.n	800211c <StartDefaultTask+0x8>

08002124 <wirelessTask>:
  }
  /* USER CODE END 5 */
}

void wirelessTask(void *argument){
 8002124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002126:	b087      	sub	sp, #28
 8002128:	af04      	add	r7, sp, #16
 800212a:	6078      	str	r0, [r7, #4]
	uint16_t x_position, y_position, degrees;
	printf("Empezando a Imprimir:\n\r");
 800212c:	481a      	ldr	r0, [pc, #104]	; (8002198 <wirelessTask+0x74>)
 800212e:	f00b f87d 	bl	800d22c <iprintf>
	for(;;){
		if(NRF24_available()){
 8002132:	f7fe fd95 	bl	8000c60 <NRF24_available>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0fa      	beq.n	8002132 <wirelessTask+0xe>
			NRF24_read(myRxData,32);
 800213c:	2120      	movs	r1, #32
 800213e:	4817      	ldr	r0, [pc, #92]	; (800219c <wirelessTask+0x78>)
 8002140:	f7fe fd96 	bl	8000c70 <NRF24_read>
			myRxData[32] = '\r'; myRxData[32+1] = '\n';
 8002144:	4b15      	ldr	r3, [pc, #84]	; (800219c <wirelessTask+0x78>)
 8002146:	220d      	movs	r2, #13
 8002148:	f883 2020 	strb.w	r2, [r3, #32]
 800214c:	4b13      	ldr	r3, [pc, #76]	; (800219c <wirelessTask+0x78>)
 800214e:	220a      	movs	r2, #10
 8002150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			printf("Coordenadas: %d %d %d %d %d %d\r\n",myRxData[0],myRxData[1],myRxData[2],myRxData[3],myRxData[4],myRxData[5],myRxData[6]);
 8002154:	4b11      	ldr	r3, [pc, #68]	; (800219c <wirelessTask+0x78>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	461c      	mov	r4, r3
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <wirelessTask+0x78>)
 800215c:	785b      	ldrb	r3, [r3, #1]
 800215e:	461d      	mov	r5, r3
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <wirelessTask+0x78>)
 8002162:	789b      	ldrb	r3, [r3, #2]
 8002164:	461e      	mov	r6, r3
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <wirelessTask+0x78>)
 8002168:	78db      	ldrb	r3, [r3, #3]
 800216a:	461a      	mov	r2, r3
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <wirelessTask+0x78>)
 800216e:	791b      	ldrb	r3, [r3, #4]
 8002170:	4619      	mov	r1, r3
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <wirelessTask+0x78>)
 8002174:	795b      	ldrb	r3, [r3, #5]
 8002176:	4618      	mov	r0, r3
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <wirelessTask+0x78>)
 800217a:	799b      	ldrb	r3, [r3, #6]
 800217c:	9303      	str	r3, [sp, #12]
 800217e:	9002      	str	r0, [sp, #8]
 8002180:	9101      	str	r1, [sp, #4]
 8002182:	9200      	str	r2, [sp, #0]
 8002184:	4633      	mov	r3, r6
 8002186:	462a      	mov	r2, r5
 8002188:	4621      	mov	r1, r4
 800218a:	4805      	ldr	r0, [pc, #20]	; (80021a0 <wirelessTask+0x7c>)
 800218c:	f00b f84e 	bl	800d22c <iprintf>

			flag = 1;
			printf("X: %d Y: %d Angle: %d\r\n", x_position, y_position, degrees);
		}
		*/
	osDelay(150);
 8002190:	2096      	movs	r0, #150	; 0x96
 8002192:	f007 fd9d 	bl	8009cd0 <osDelay>
		if(NRF24_available()){
 8002196:	e7cc      	b.n	8002132 <wirelessTask+0xe>
 8002198:	0800ff9c 	.word	0x0800ff9c
 800219c:	240005f8 	.word	0x240005f8
 80021a0:	0800ffb4 	.word	0x0800ffb4
 80021a4:	00000000 	.word	0x00000000

080021a8 <escTask>:
	osDelay(2000);


}

void escTask(void *argument){
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08c      	sub	sp, #48	; 0x30
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	for(;;){

		  double dutyCycle3=tONB/period;
 80021b0:	4b51      	ldr	r3, [pc, #324]	; (80022f8 <escTask+0x150>)
 80021b2:	ed93 5b00 	vldr	d5, [r3]
 80021b6:	4b51      	ldr	r3, [pc, #324]	; (80022fc <escTask+0x154>)
 80021b8:	ed93 6b00 	vldr	d6, [r3]
 80021bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80021c0:	ed87 7b08 	vstr	d7, [r7, #32]
		  int32_t CH1_DC_IZQ = TIM5->ARR * dutyCycle3;
 80021c4:	4b4e      	ldr	r3, [pc, #312]	; (8002300 <escTask+0x158>)
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	ee07 3a90 	vmov	s15, r3
 80021cc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80021d0:	ed97 7b08 	vldr	d7, [r7, #32]
 80021d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021d8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80021dc:	ee17 3a90 	vmov	r3, s15
 80021e0:	61fb      	str	r3, [r7, #28]
		  //Seccion donde se controla el motor
		  double pulseWidth= 0.0015;
 80021e2:	a33d      	add	r3, pc, #244	; (adr r3, 80022d8 <escTask+0x130>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		  double ccr = 0;
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		  ccr = (pulseWidth * htim5.Init.Period )/0.02;
 80021f8:	4b42      	ldr	r3, [pc, #264]	; (8002304 <escTask+0x15c>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	ee07 3a90 	vmov	s15, r3
 8002200:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002204:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002208:	ee26 6b07 	vmul.f64	d6, d6, d7
 800220c:	ed9f 5b34 	vldr	d5, [pc, #208]	; 80022e0 <escTask+0x138>
 8002210:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002214:	ed87 7b04 	vstr	d7, [r7, #16]
		  htim5.Instance -> CCR4 = ccr;
 8002218:	4b3a      	ldr	r3, [pc, #232]	; (8002304 <escTask+0x15c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002220:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002224:	ee17 2a90 	vmov	r2, s15
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
		  osDelay(400) ;
 800222a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800222e:	f007 fd4f 	bl	8009cd0 <osDelay>
		  double i=0.00001;
 8002232:	a32d      	add	r3, pc, #180	; (adr r3, 80022e8 <escTask+0x140>)
 8002234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002238:	e9c7 2302 	strd	r2, r3, [r7, #8]
		  while(pulseWidth<0.00183){
 800223c:	e023      	b.n	8002286 <escTask+0xde>
			  ccr=(pulseWidth*htim5.Init.Period)/0.02;
 800223e:	4b31      	ldr	r3, [pc, #196]	; (8002304 <escTask+0x15c>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800224a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800224e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002252:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80022e0 <escTask+0x138>
 8002256:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800225a:	ed87 7b04 	vstr	d7, [r7, #16]
			  htim5.Instance -> CCR4=ccr;
 800225e:	4b29      	ldr	r3, [pc, #164]	; (8002304 <escTask+0x15c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	ed97 7b04 	vldr	d7, [r7, #16]
 8002266:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800226a:	ee17 2a90 	vmov	r2, s15
 800226e:	641a      	str	r2, [r3, #64]	; 0x40
			  osDelay(30);
 8002270:	201e      	movs	r0, #30
 8002272:	f007 fd2d 	bl	8009cd0 <osDelay>
			  pulseWidth += i;
 8002276:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 800227a:	ed97 7b02 	vldr	d7, [r7, #8]
 800227e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002282:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		  while(pulseWidth<0.00183){
 8002286:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800228a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80022f0 <escTask+0x148>
 800228e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002296:	d4d2      	bmi.n	800223e <escTask+0x96>
		  }
		  ccr = (pulseWidth * htim5.Init.Period)/0.02;
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <escTask+0x15c>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	ee07 3a90 	vmov	s15, r3
 80022a0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80022a4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80022a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80022ac:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 80022e0 <escTask+0x138>
 80022b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80022b4:	ed87 7b04 	vstr	d7, [r7, #16]
		  htim5.Instance-> CCR4 = ccr;
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <escTask+0x15c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	ed97 7b04 	vldr	d7, [r7, #16]
 80022c0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80022c4:	ee17 2a90 	vmov	r2, s15
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
		  osDelay(100);
 80022ca:	2064      	movs	r0, #100	; 0x64
 80022cc:	f007 fd00 	bl	8009cd0 <osDelay>
	for(;;){
 80022d0:	e76e      	b.n	80021b0 <escTask+0x8>
 80022d2:	bf00      	nop
 80022d4:	f3af 8000 	nop.w
 80022d8:	bc6a7efa 	.word	0xbc6a7efa
 80022dc:	3f589374 	.word	0x3f589374
 80022e0:	47ae147b 	.word	0x47ae147b
 80022e4:	3f947ae1 	.word	0x3f947ae1
 80022e8:	88e368f1 	.word	0x88e368f1
 80022ec:	3ee4f8b5 	.word	0x3ee4f8b5
 80022f0:	89b52008 	.word	0x89b52008
 80022f4:	3f5dfb93 	.word	0x3f5dfb93
 80022f8:	24000008 	.word	0x24000008
 80022fc:	24000010 	.word	0x24000010
 8002300:	40000c00 	.word	0x40000c00
 8002304:	240004c0 	.word	0x240004c0

08002308 <movimientoCamaraTask>:
		  	printf(" %02X %02X %02X %02X %02X %02X %02X %02X",RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6],RxData[7]);
		    osDelay(1000);
	}
}

void movimientoCamaraTask(void *argument){
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b097      	sub	sp, #92	; 0x5c
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	int actual_target = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t valor_ccr = 3900;
 8002314:	f640 733c 	movw	r3, #3900	; 0xf3c
 8002318:	64fb      	str	r3, [r7, #76]	; 0x4c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, valor_ccr);
 800231a:	4bc1      	ldr	r3, [pc, #772]	; (8002620 <movimientoCamaraTask+0x318>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002320:	639a      	str	r2, [r3, #56]	; 0x38

		uint32_t valor_pwm;


		// aqui se escriben las coordenadas de los targets
		float x_targets[] = {95, 198, 233, 135};
 8002322:	4bc0      	ldr	r3, [pc, #768]	; (8002624 <movimientoCamaraTask+0x31c>)
 8002324:	f107 0418 	add.w	r4, r7, #24
 8002328:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800232a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		float y_targets[] = {24, 56, 135, 165};
 800232e:	4bbe      	ldr	r3, [pc, #760]	; (8002628 <movimientoCamaraTask+0x320>)
 8002330:	f107 0408 	add.w	r4, r7, #8
 8002334:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002336:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		// calcula y guarda el tamano de el array de los targets
		float len_x_target = sizeof(x_targets)/sizeof(x_targets[0]);
 800233a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800233e:	64bb      	str	r3, [r7, #72]	; 0x48

	    float x_actual = myRxData[1];
 8002340:	4bba      	ldr	r3, [pc, #744]	; (800262c <movimientoCamaraTask+0x324>)
 8002342:	785b      	ldrb	r3, [r3, #1]
 8002344:	ee07 3a90 	vmov	s15, r3
 8002348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800234c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	    float y_actual = myRxData[3];
 8002350:	4bb6      	ldr	r3, [pc, #728]	; (800262c <movimientoCamaraTask+0x324>)
 8002352:	78db      	ldrb	r3, [r3, #3]
 8002354:	ee07 3a90 	vmov	s15, r3
 8002358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800235c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

		// algoritmo para dirigir el carro con la camara
	    float adyacente = x_targets[actual_target] - x_actual; // calcula el cateto adyacente
 8002360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	3358      	adds	r3, #88	; 0x58
 8002366:	443b      	add	r3, r7
 8002368:	3b40      	subs	r3, #64	; 0x40
 800236a:	ed93 7a00 	vldr	s14, [r3]
 800236e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002372:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002376:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		float opuesto = y_targets[actual_target] - y_actual; // calcula el cateto opuesto
 800237a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	3358      	adds	r3, #88	; 0x58
 8002380:	443b      	add	r3, r7
 8002382:	3b50      	subs	r3, #80	; 0x50
 8002384:	ed93 7a00 	vldr	s14, [r3]
 8002388:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800238c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002390:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		float angulo_actual = myRxData[5]; // convierte el angulo recibido a radianes
 8002394:	4ba5      	ldr	r3, [pc, #660]	; (800262c <movimientoCamaraTask+0x324>)
 8002396:	795b      	ldrb	r3, [r3, #5]
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023a0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		float angulo_target0 = atan2(opuesto, adyacente) * 180 / 3.1416; // calculates the desired angle
 80023a4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80023a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023ac:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80023b0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80023b4:	eeb0 1b46 	vmov.f64	d1, d6
 80023b8:	eeb0 0b47 	vmov.f64	d0, d7
 80023bc:	f00d f818 	bl	800f3f0 <atan2>
 80023c0:	eeb0 7b40 	vmov.f64	d7, d0
 80023c4:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 80025f0 <movimientoCamaraTask+0x2e8>
 80023c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80023cc:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 80025f8 <movimientoCamaraTask+0x2f0>
 80023d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023d8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		if (angulo_target0 < 0) angulo_target0 += 360; // shifts the range from -180-180 to 0-360
 80023dc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80023e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e8:	d507      	bpl.n	80023fa <movimientoCamaraTask+0xf2>
 80023ea:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80023ee:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002630 <movimientoCamaraTask+0x328>
 80023f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023f6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		float angulo_target = fmod(angulo_target0, 360); // ensures the angle is within 0-360 range
 80023fa:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80023fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002402:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8002600 <movimientoCamaraTask+0x2f8>
 8002406:	eeb0 0b47 	vmov.f64	d0, d7
 800240a:	f00c fff5 	bl	800f3f8 <fmod>
 800240e:	eeb0 7b40 	vmov.f64	d7, d0
 8002412:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002416:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Assuming angulo_actual and angulo_target are float values representing angles in degrees
		if (angulo_target > 0 && angulo_target < 270 && angulo_actual > 0 && angulo_actual < 270){
 800241a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800241e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002426:	f340 80a0 	ble.w	800256a <movimientoCamaraTask+0x262>
 800242a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800242e:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002634 <movimientoCamaraTask+0x32c>
 8002432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243a:	f140 8096 	bpl.w	800256a <movimientoCamaraTask+0x262>
 800243e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002442:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244a:	f340 808e 	ble.w	800256a <movimientoCamaraTask+0x262>
 800244e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002452:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8002634 <movimientoCamaraTask+0x32c>
 8002456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800245a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245e:	f140 8084 	bpl.w	800256a <movimientoCamaraTask+0x262>
			if (angulo_actual > angulo_target){
 8002462:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002466:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800246a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800246e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002472:	dd37      	ble.n	80024e4 <movimientoCamaraTask+0x1dc>
				angulo_final = angulo_actual - angulo_target;
 8002474:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002478:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800247c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002480:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				if (angulo_final <= 23){
 8002484:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002488:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 800248c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002494:	d81d      	bhi.n	80024d2 <movimientoCamaraTask+0x1ca>
					valor_pwm = 3900 - ((fabs(angulo_final)*1950)/23);
 8002496:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800249a:	eef0 7ae7 	vabs.f32	s15, s15
 800249e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024a2:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8002608 <movimientoCamaraTask+0x300>
 80024a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80024aa:	eeb3 5b07 	vmov.f64	d5, #55	; 0x41b80000  23.0
 80024ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024b2:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8002610 <movimientoCamaraTask+0x308>
 80024b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80024ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80024be:	ee17 3a90 	vmov	r3, s15
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
					valor_ccr = valor_pwm;
 80024c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c6:	64fb      	str	r3, [r7, #76]	; 0x4c
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, valor_ccr);}
 80024c8:	4b55      	ldr	r3, [pc, #340]	; (8002620 <movimientoCamaraTask+0x318>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024ce:	639a      	str	r2, [r3, #56]	; 0x38
 80024d0:	e008      	b.n	80024e4 <movimientoCamaraTask+0x1dc>
				else {
						valor_pwm = 1950;
 80024d2:	f240 739e 	movw	r3, #1950	; 0x79e
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
						valor_ccr = valor_pwm;
 80024d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024da:	64fb      	str	r3, [r7, #76]	; 0x4c
						__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, valor_ccr);
 80024dc:	4b50      	ldr	r3, [pc, #320]	; (8002620 <movimientoCamaraTask+0x318>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38
					}
				}
			if (angulo_actual < angulo_target){
 80024e4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80024e8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f4:	f140 80f4 	bpl.w	80026e0 <movimientoCamaraTask+0x3d8>
				angulo_final = angulo_target - angulo_actual;
 80024f8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80024fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002500:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002504:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				if (angulo_final <= 23){
 8002508:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800250c:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002518:	d81d      	bhi.n	8002556 <movimientoCamaraTask+0x24e>
					valor_pwm = ((fabs(angulo_final) * 1350)/23)+3900;
 800251a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800251e:	eef0 7ae7 	vabs.f32	s15, s15
 8002522:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002526:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002618 <movimientoCamaraTask+0x310>
 800252a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800252e:	eeb3 5b07 	vmov.f64	d5, #55	; 0x41b80000  23.0
 8002532:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002536:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8002610 <movimientoCamaraTask+0x308>
 800253a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800253e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002542:	ee17 3a90 	vmov	r3, s15
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
					valor_ccr = valor_pwm;
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	64fb      	str	r3, [r7, #76]	; 0x4c
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, valor_ccr);}
 800254c:	4b34      	ldr	r3, [pc, #208]	; (8002620 <movimientoCamaraTask+0x318>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002552:	639a      	str	r2, [r3, #56]	; 0x38
			if (angulo_actual < angulo_target){
 8002554:	e0c4      	b.n	80026e0 <movimientoCamaraTask+0x3d8>
				else {
						valor_pwm = 5250;
 8002556:	f241 4382 	movw	r3, #5250	; 0x1482
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
						valor_ccr = valor_pwm;
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	64fb      	str	r3, [r7, #76]	; 0x4c
						__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, valor_ccr);
 8002560:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <movimientoCamaraTask+0x318>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002566:	639a      	str	r2, [r3, #56]	; 0x38
			if (angulo_actual < angulo_target){
 8002568:	e0ba      	b.n	80026e0 <movimientoCamaraTask+0x3d8>
					}
				}
			}
		else {
			if (angulo_actual > angulo_target){
 800256a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800256e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257a:	dd68      	ble.n	800264e <movimientoCamaraTask+0x346>
				angulo_final = (360 - angulo_actual) + (90 - angulo_target);
 800257c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002630 <movimientoCamaraTask+0x328>
 8002580:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002584:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002588:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002638 <movimientoCamaraTask+0x330>
 800258c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002590:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002598:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				if (angulo_final <= 23){
 800259c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80025a0:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 80025a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ac:	d846      	bhi.n	800263c <movimientoCamaraTask+0x334>
					valor_pwm = 3900 - ((fabs(angulo_final)*1950)/23);
 80025ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80025b2:	eef0 7ae7 	vabs.f32	s15, s15
 80025b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025ba:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8002608 <movimientoCamaraTask+0x300>
 80025be:	ee27 6b06 	vmul.f64	d6, d7, d6
 80025c2:	eeb3 5b07 	vmov.f64	d5, #55	; 0x41b80000  23.0
 80025c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80025ca:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8002610 <movimientoCamaraTask+0x308>
 80025ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80025d2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80025d6:	ee17 3a90 	vmov	r3, s15
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
					valor_ccr = valor_pwm;
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	64fb      	str	r3, [r7, #76]	; 0x4c
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, valor_ccr);}
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <movimientoCamaraTask+0x318>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
 80025e8:	e031      	b.n	800264e <movimientoCamaraTask+0x346>
 80025ea:	bf00      	nop
 80025ec:	f3af 8000 	nop.w
 80025f0:	00000000 	.word	0x00000000
 80025f4:	40668000 	.word	0x40668000
 80025f8:	2e48e8a7 	.word	0x2e48e8a7
 80025fc:	400921ff 	.word	0x400921ff
 8002600:	00000000 	.word	0x00000000
 8002604:	40768000 	.word	0x40768000
 8002608:	00000000 	.word	0x00000000
 800260c:	409e7800 	.word	0x409e7800
 8002610:	00000000 	.word	0x00000000
 8002614:	40ae7800 	.word	0x40ae7800
 8002618:	00000000 	.word	0x00000000
 800261c:	40951800 	.word	0x40951800
 8002620:	24000474 	.word	0x24000474
 8002624:	0801001c 	.word	0x0801001c
 8002628:	0801002c 	.word	0x0801002c
 800262c:	240005f8 	.word	0x240005f8
 8002630:	43b40000 	.word	0x43b40000
 8002634:	43870000 	.word	0x43870000
 8002638:	42b40000 	.word	0x42b40000
				else {
						valor_pwm = 1950;
 800263c:	f240 739e 	movw	r3, #1950	; 0x79e
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
						valor_ccr = valor_pwm;
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002644:	64fb      	str	r3, [r7, #76]	; 0x4c
						__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, valor_ccr);
 8002646:	4b56      	ldr	r3, [pc, #344]	; (80027a0 <movimientoCamaraTask+0x498>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800264c:	639a      	str	r2, [r3, #56]	; 0x38
					}
				}
			if (angulo_actual < angulo_target){
 800264e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002652:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002656:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800265a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265e:	d53f      	bpl.n	80026e0 <movimientoCamaraTask+0x3d8>
				angulo_final = (360 - angulo_actual) + (90 - angulo_actual);
 8002660:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80027a4 <movimientoCamaraTask+0x49c>
 8002664:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002668:	ee37 7a67 	vsub.f32	s14, s14, s15
 800266c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80027a8 <movimientoCamaraTask+0x4a0>
 8002670:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002674:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				if (angulo_final <= 23){
 8002680:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002684:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002690:	d81d      	bhi.n	80026ce <movimientoCamaraTask+0x3c6>
					valor_pwm = ((fabs(angulo_final) * 1350)/23)+3900;
 8002692:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002696:	eef0 7ae7 	vabs.f32	s15, s15
 800269a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800269e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002790 <movimientoCamaraTask+0x488>
 80026a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80026a6:	eeb3 5b07 	vmov.f64	d5, #55	; 0x41b80000  23.0
 80026aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80026ae:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8002798 <movimientoCamaraTask+0x490>
 80026b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80026b6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80026ba:	ee17 3a90 	vmov	r3, s15
 80026be:	62bb      	str	r3, [r7, #40]	; 0x28
					valor_ccr = valor_pwm;
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c2:	64fb      	str	r3, [r7, #76]	; 0x4c
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, valor_ccr);}
 80026c4:	4b36      	ldr	r3, [pc, #216]	; (80027a0 <movimientoCamaraTask+0x498>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38
 80026cc:	e008      	b.n	80026e0 <movimientoCamaraTask+0x3d8>
				else {
						valor_pwm = 5250;
 80026ce:	f241 4382 	movw	r3, #5250	; 0x1482
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28
						valor_ccr = valor_pwm;
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	64fb      	str	r3, [r7, #76]	; 0x4c
						__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, valor_ccr);
 80026d8:	4b31      	ldr	r3, [pc, #196]	; (80027a0 <movimientoCamaraTask+0x498>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026de:	639a      	str	r2, [r3, #56]	; 0x38
					}
				}
			}
		if (x_actual < (x_targets[actual_target] + 15) && x_actual > (x_targets[actual_target] - 15) && y_actual < (y_targets[actual_target] + 15) && y_actual > (y_targets[actual_target] - 15) && actual_target < len_x_target){
 80026e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	3358      	adds	r3, #88	; 0x58
 80026e6:	443b      	add	r3, r7
 80026e8:	3b40      	subs	r3, #64	; 0x40
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80026f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026f6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80026fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002702:	d544      	bpl.n	800278e <movimientoCamaraTask+0x486>
 8002704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	3358      	adds	r3, #88	; 0x58
 800270a:	443b      	add	r3, r7
 800270c:	3b40      	subs	r3, #64	; 0x40
 800270e:	edd3 7a00 	vldr	s15, [r3]
 8002712:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002716:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800271a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800271e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002726:	dd32      	ble.n	800278e <movimientoCamaraTask+0x486>
 8002728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	3358      	adds	r3, #88	; 0x58
 800272e:	443b      	add	r3, r7
 8002730:	3b50      	subs	r3, #80	; 0x50
 8002732:	edd3 7a00 	vldr	s15, [r3]
 8002736:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800273a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800273e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002742:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274a:	d520      	bpl.n	800278e <movimientoCamaraTask+0x486>
 800274c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	3358      	adds	r3, #88	; 0x58
 8002752:	443b      	add	r3, r7
 8002754:	3b50      	subs	r3, #80	; 0x50
 8002756:	edd3 7a00 	vldr	s15, [r3]
 800275a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800275e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002762:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002766:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800276a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276e:	dd0e      	ble.n	800278e <movimientoCamaraTask+0x486>
 8002770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800277a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800277e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002786:	dd02      	ble.n	800278e <movimientoCamaraTask+0x486>
					actual_target++;
 8002788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800278a:	3301      	adds	r3, #1
 800278c:	657b      	str	r3, [r7, #84]	; 0x54
	for(;;){
 800278e:	e5c8      	b.n	8002322 <movimientoCamaraTask+0x1a>
 8002790:	00000000 	.word	0x00000000
 8002794:	40951800 	.word	0x40951800
 8002798:	00000000 	.word	0x00000000
 800279c:	40ae7800 	.word	0x40ae7800
 80027a0:	24000474 	.word	0x24000474
 80027a4:	43b40000 	.word	0x43b40000
 80027a8:	42b40000 	.word	0x42b40000

080027ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d101      	bne.n	80027c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027be:	f000 fbff 	bl	8002fc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40001400 	.word	0x40001400

080027d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d4:	b672      	cpsid	i
}
 80027d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027d8:	e7fe      	b.n	80027d8 <Error_Handler+0x8>
	...

080027dc <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80027e4:	1d39      	adds	r1, r7, #4
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ea:	2201      	movs	r2, #1
 80027ec:	4803      	ldr	r0, [pc, #12]	; (80027fc <__io_putchar+0x20>)
 80027ee:	f006 f899 	bl	8008924 <HAL_UART_Transmit>
  return ch;
 80027f2:	687b      	ldr	r3, [r7, #4]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	24000558 	.word	0x24000558

08002800 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002806:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <HAL_MspInit+0x38>)
 8002808:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800280c:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <HAL_MspInit+0x38>)
 800280e:	f043 0302 	orr.w	r3, r3, #2
 8002812:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002816:	4b08      	ldr	r3, [pc, #32]	; (8002838 <HAL_MspInit+0x38>)
 8002818:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002824:	2200      	movs	r2, #0
 8002826:	210f      	movs	r1, #15
 8002828:	f06f 0001 	mvn.w	r0, #1
 800282c:	f000 fcd0 	bl	80031d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	58024400 	.word	0x58024400

0800283c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b0b8      	sub	sp, #224	; 0xe0
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002844:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002854:	f107 0310 	add.w	r3, r7, #16
 8002858:	22bc      	movs	r2, #188	; 0xbc
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f00a f806 	bl	800c86e <memset>
  if(hfdcan->Instance==FDCAN1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a25      	ldr	r2, [pc, #148]	; (80028fc <HAL_FDCAN_MspInit+0xc0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d142      	bne.n	80028f2 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800286c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002870:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002872:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002876:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002878:	f107 0310 	add.w	r3, r7, #16
 800287c:	4618      	mov	r0, r3
 800287e:	f002 fa81 	bl	8004d84 <HAL_RCCEx_PeriphCLKConfig>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002888:	f7ff ffa2 	bl	80027d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800288c:	4b1c      	ldr	r3, [pc, #112]	; (8002900 <HAL_FDCAN_MspInit+0xc4>)
 800288e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002892:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <HAL_FDCAN_MspInit+0xc4>)
 8002894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002898:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800289c:	4b18      	ldr	r3, [pc, #96]	; (8002900 <HAL_FDCAN_MspInit+0xc4>)
 800289e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_FDCAN_MspInit+0xc4>)
 80028ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b0:	4a13      	ldr	r2, [pc, #76]	; (8002900 <HAL_FDCAN_MspInit+0xc4>)
 80028b2:	f043 0308 	orr.w	r3, r3, #8
 80028b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_FDCAN_MspInit+0xc4>)
 80028bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028c8:	2303      	movs	r3, #3
 80028ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028da:	2300      	movs	r3, #0
 80028dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80028e0:	2309      	movs	r3, #9
 80028e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028ea:	4619      	mov	r1, r3
 80028ec:	4805      	ldr	r0, [pc, #20]	; (8002904 <HAL_FDCAN_MspInit+0xc8>)
 80028ee:	f000 fffb 	bl	80038e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80028f2:	bf00      	nop
 80028f4:	37e0      	adds	r7, #224	; 0xe0
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	4000a000 	.word	0x4000a000
 8002900:	58024400 	.word	0x58024400
 8002904:	58020c00 	.word	0x58020c00

08002908 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b0ba      	sub	sp, #232	; 0xe8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002920:	f107 0318 	add.w	r3, r7, #24
 8002924:	22bc      	movs	r2, #188	; 0xbc
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f009 ffa0 	bl	800c86e <memset>
  if(hspi->Instance==SPI1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a36      	ldr	r2, [pc, #216]	; (8002a0c <HAL_SPI_MspInit+0x104>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d165      	bne.n	8002a04 <HAL_SPI_MspInit+0xfc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800293c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800293e:	2300      	movs	r3, #0
 8002940:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002942:	f107 0318 	add.w	r3, r7, #24
 8002946:	4618      	mov	r0, r3
 8002948:	f002 fa1c 	bl	8004d84 <HAL_RCCEx_PeriphCLKConfig>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002952:	f7ff ff3d 	bl	80027d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002956:	4b2e      	ldr	r3, [pc, #184]	; (8002a10 <HAL_SPI_MspInit+0x108>)
 8002958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800295c:	4a2c      	ldr	r2, [pc, #176]	; (8002a10 <HAL_SPI_MspInit+0x108>)
 800295e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002962:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002966:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <HAL_SPI_MspInit+0x108>)
 8002968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800296c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002974:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <HAL_SPI_MspInit+0x108>)
 8002976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800297a:	4a25      	ldr	r2, [pc, #148]	; (8002a10 <HAL_SPI_MspInit+0x108>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002984:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <HAL_SPI_MspInit+0x108>)
 8002986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002992:	4b1f      	ldr	r3, [pc, #124]	; (8002a10 <HAL_SPI_MspInit+0x108>)
 8002994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002998:	4a1d      	ldr	r2, [pc, #116]	; (8002a10 <HAL_SPI_MspInit+0x108>)
 800299a:	f043 0302 	orr.w	r3, r3, #2
 800299e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029a2:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <HAL_SPI_MspInit+0x108>)
 80029a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80029b0:	2360      	movs	r3, #96	; 0x60
 80029b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029c8:	2305      	movs	r3, #5
 80029ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029d2:	4619      	mov	r1, r3
 80029d4:	480f      	ldr	r0, [pc, #60]	; (8002a14 <HAL_SPI_MspInit+0x10c>)
 80029d6:	f000 ff87 	bl	80038e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80029da:	2320      	movs	r3, #32
 80029dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e0:	2302      	movs	r3, #2
 80029e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029f2:	2305      	movs	r3, #5
 80029f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029fc:	4619      	mov	r1, r3
 80029fe:	4806      	ldr	r0, [pc, #24]	; (8002a18 <HAL_SPI_MspInit+0x110>)
 8002a00:	f000 ff72 	bl	80038e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a04:	bf00      	nop
 8002a06:	37e8      	adds	r7, #232	; 0xe8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40013000 	.word	0x40013000
 8002a10:	58024400 	.word	0x58024400
 8002a14:	58020000 	.word	0x58020000
 8002a18:	58020400 	.word	0x58020400

08002a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a20      	ldr	r2, [pc, #128]	; (8002aac <HAL_TIM_Base_MspInit+0x90>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d10f      	bne.n	8002a4e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_TIM_Base_MspInit+0x94>)
 8002a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a34:	4a1e      	ldr	r2, [pc, #120]	; (8002ab0 <HAL_TIM_Base_MspInit+0x94>)
 8002a36:	f043 0304 	orr.w	r3, r3, #4
 8002a3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a3e:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <HAL_TIM_Base_MspInit+0x94>)
 8002a40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002a4c:	e028      	b.n	8002aa0 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM5)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <HAL_TIM_Base_MspInit+0x98>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d10f      	bne.n	8002a78 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a58:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_TIM_Base_MspInit+0x94>)
 8002a5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a5e:	4a14      	ldr	r2, [pc, #80]	; (8002ab0 <HAL_TIM_Base_MspInit+0x94>)
 8002a60:	f043 0308 	orr.w	r3, r3, #8
 8002a64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <HAL_TIM_Base_MspInit+0x94>)
 8002a6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]
}
 8002a76:	e013      	b.n	8002aa0 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM17)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <HAL_TIM_Base_MspInit+0x9c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d10e      	bne.n	8002aa0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_TIM_Base_MspInit+0x94>)
 8002a84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a88:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <HAL_TIM_Base_MspInit+0x94>)
 8002a8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a92:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <HAL_TIM_Base_MspInit+0x94>)
 8002a94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
}
 8002aa0:	bf00      	nop
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	40000800 	.word	0x40000800
 8002ab0:	58024400 	.word	0x58024400
 8002ab4:	40000c00 	.word	0x40000c00
 8002ab8:	40014800 	.word	0x40014800

08002abc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a25      	ldr	r2, [pc, #148]	; (8002b70 <HAL_TIM_MspPostInit+0xb4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d120      	bne.n	8002b20 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ade:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <HAL_TIM_MspPostInit+0xb8>)
 8002ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae4:	4a23      	ldr	r2, [pc, #140]	; (8002b74 <HAL_TIM_MspPostInit+0xb8>)
 8002ae6:	f043 0308 	orr.w	r3, r3, #8
 8002aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aee:	4b21      	ldr	r3, [pc, #132]	; (8002b74 <HAL_TIM_MspPostInit+0xb8>)
 8002af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b02:	2302      	movs	r3, #2
 8002b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b12:	f107 0314 	add.w	r3, r7, #20
 8002b16:	4619      	mov	r1, r3
 8002b18:	4817      	ldr	r0, [pc, #92]	; (8002b78 <HAL_TIM_MspPostInit+0xbc>)
 8002b1a:	f000 fee5 	bl	80038e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002b1e:	e023      	b.n	8002b68 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM5)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a15      	ldr	r2, [pc, #84]	; (8002b7c <HAL_TIM_MspPostInit+0xc0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d11e      	bne.n	8002b68 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_TIM_MspPostInit+0xb8>)
 8002b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b30:	4a10      	ldr	r2, [pc, #64]	; (8002b74 <HAL_TIM_MspPostInit+0xb8>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <HAL_TIM_MspPostInit+0xb8>)
 8002b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b48:	2308      	movs	r3, #8
 8002b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b54:	2300      	movs	r3, #0
 8002b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	4619      	mov	r1, r3
 8002b62:	4807      	ldr	r0, [pc, #28]	; (8002b80 <HAL_TIM_MspPostInit+0xc4>)
 8002b64:	f000 fec0 	bl	80038e8 <HAL_GPIO_Init>
}
 8002b68:	bf00      	nop
 8002b6a:	3728      	adds	r7, #40	; 0x28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40000800 	.word	0x40000800
 8002b74:	58024400 	.word	0x58024400
 8002b78:	58020c00 	.word	0x58020c00
 8002b7c:	40000c00 	.word	0x40000c00
 8002b80:	58020000 	.word	0x58020000

08002b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b0b8      	sub	sp, #224	; 0xe0
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b9c:	f107 0310 	add.w	r3, r7, #16
 8002ba0:	22bc      	movs	r2, #188	; 0xbc
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f009 fe62 	bl	800c86e <memset>
  if(huart->Instance==USART3)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a25      	ldr	r2, [pc, #148]	; (8002c44 <HAL_UART_MspInit+0xc0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d142      	bne.n	8002c3a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bbe:	f107 0310 	add.w	r3, r7, #16
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f002 f8de 	bl	8004d84 <HAL_RCCEx_PeriphCLKConfig>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002bce:	f7ff fdff 	bl	80027d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <HAL_UART_MspInit+0xc4>)
 8002bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bd8:	4a1b      	ldr	r2, [pc, #108]	; (8002c48 <HAL_UART_MspInit+0xc4>)
 8002bda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002be2:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_UART_MspInit+0xc4>)
 8002be4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bf0:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <HAL_UART_MspInit+0xc4>)
 8002bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf6:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <HAL_UART_MspInit+0xc4>)
 8002bf8:	f043 0308 	orr.w	r3, r3, #8
 8002bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <HAL_UART_MspInit+0xc4>)
 8002c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c16:	2302      	movs	r3, #2
 8002c18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c22:	2300      	movs	r3, #0
 8002c24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c28:	2307      	movs	r3, #7
 8002c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c2e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c32:	4619      	mov	r1, r3
 8002c34:	4805      	ldr	r0, [pc, #20]	; (8002c4c <HAL_UART_MspInit+0xc8>)
 8002c36:	f000 fe57 	bl	80038e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c3a:	bf00      	nop
 8002c3c:	37e0      	adds	r7, #224	; 0xe0
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40004800 	.word	0x40004800
 8002c48:	58024400 	.word	0x58024400
 8002c4c:	58020c00 	.word	0x58020c00

08002c50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b090      	sub	sp, #64	; 0x40
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b0f      	cmp	r3, #15
 8002c5c:	d827      	bhi.n	8002cae <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	2037      	movs	r0, #55	; 0x37
 8002c64:	f000 fab4 	bl	80031d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002c68:	2037      	movs	r0, #55	; 0x37
 8002c6a:	f000 facb 	bl	8003204 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002c6e:	4a29      	ldr	r2, [pc, #164]	; (8002d14 <HAL_InitTick+0xc4>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002c74:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <HAL_InitTick+0xc8>)
 8002c76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c7a:	4a27      	ldr	r2, [pc, #156]	; (8002d18 <HAL_InitTick+0xc8>)
 8002c7c:	f043 0320 	orr.w	r3, r3, #32
 8002c80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c84:	4b24      	ldr	r3, [pc, #144]	; (8002d18 <HAL_InitTick+0xc8>)
 8002c86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c92:	f107 0210 	add.w	r2, r7, #16
 8002c96:	f107 0314 	add.w	r3, r7, #20
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f002 f82f 	bl	8004d00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <HAL_InitTick+0x6a>
 8002cac:	e001      	b.n	8002cb2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e02b      	b.n	8002d0a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002cb2:	f001 fff9 	bl	8004ca8 <HAL_RCC_GetPCLK1Freq>
 8002cb6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002cb8:	e004      	b.n	8002cc4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002cba:	f001 fff5 	bl	8004ca8 <HAL_RCC_GetPCLK1Freq>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc6:	4a15      	ldr	r2, [pc, #84]	; (8002d1c <HAL_InitTick+0xcc>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	0c9b      	lsrs	r3, r3, #18
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002cd2:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <HAL_InitTick+0xd0>)
 8002cd4:	4a13      	ldr	r2, [pc, #76]	; (8002d24 <HAL_InitTick+0xd4>)
 8002cd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002cd8:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_InitTick+0xd0>)
 8002cda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cde:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002ce0:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <HAL_InitTick+0xd0>)
 8002ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <HAL_InitTick+0xd0>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <HAL_InitTick+0xd0>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002cf2:	480b      	ldr	r0, [pc, #44]	; (8002d20 <HAL_InitTick+0xd0>)
 8002cf4:	f004 fb53 	bl	800739e <HAL_TIM_Base_Init>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d104      	bne.n	8002d08 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002cfe:	4808      	ldr	r0, [pc, #32]	; (8002d20 <HAL_InitTick+0xd0>)
 8002d00:	f004 fba4 	bl	800744c <HAL_TIM_Base_Start_IT>
 8002d04:	4603      	mov	r3, r0
 8002d06:	e000      	b.n	8002d0a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3740      	adds	r7, #64	; 0x40
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	24000020 	.word	0x24000020
 8002d18:	58024400 	.word	0x58024400
 8002d1c:	431bde83 	.word	0x431bde83
 8002d20:	2400065c 	.word	0x2400065c
 8002d24:	40001400 	.word	0x40001400

08002d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d2c:	e7fe      	b.n	8002d2c <NMI_Handler+0x4>

08002d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d32:	e7fe      	b.n	8002d32 <HardFault_Handler+0x4>

08002d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d38:	e7fe      	b.n	8002d38 <MemManage_Handler+0x4>

08002d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3e:	e7fe      	b.n	8002d3e <BusFault_Handler+0x4>

08002d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d44:	e7fe      	b.n	8002d44 <UsageFault_Handler+0x4>

08002d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002d58:	4802      	ldr	r0, [pc, #8]	; (8002d64 <TIM7_IRQHandler+0x10>)
 8002d5a:	f004 fd5f 	bl	800781c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	2400065c 	.word	0x2400065c

08002d68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
	return 1;
 8002d6c:	2301      	movs	r3, #1
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <_kill>:

int _kill(int pid, int sig)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d82:	f009 fc43 	bl	800c60c <__errno>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2216      	movs	r2, #22
 8002d8a:	601a      	str	r2, [r3, #0]
	return -1;
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <_exit>:

void _exit (int status)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002da0:	f04f 31ff 	mov.w	r1, #4294967295
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ffe7 	bl	8002d78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002daa:	e7fe      	b.n	8002daa <_exit+0x12>

08002dac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	e00a      	b.n	8002dd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002dbe:	f3af 8000 	nop.w
 8002dc2:	4601      	mov	r1, r0
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	60ba      	str	r2, [r7, #8]
 8002dca:	b2ca      	uxtb	r2, r1
 8002dcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	dbf0      	blt.n	8002dbe <_read+0x12>
	}

return len;
 8002ddc:	687b      	ldr	r3, [r7, #4]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b086      	sub	sp, #24
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	e009      	b.n	8002e0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	60ba      	str	r2, [r7, #8]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fceb 	bl	80027dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	dbf1      	blt.n	8002df8 <_write+0x12>
	}
	return len;
 8002e14:	687b      	ldr	r3, [r7, #4]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <_close>:

int _close(int file)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
	return -1;
 8002e26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e46:	605a      	str	r2, [r3, #4]
	return 0;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <_isatty>:

int _isatty(int file)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
	return 1;
 8002e5e:	2301      	movs	r3, #1
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
	return 0;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e90:	4a14      	ldr	r2, [pc, #80]	; (8002ee4 <_sbrk+0x5c>)
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <_sbrk+0x60>)
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e9c:	4b13      	ldr	r3, [pc, #76]	; (8002eec <_sbrk+0x64>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ea4:	4b11      	ldr	r3, [pc, #68]	; (8002eec <_sbrk+0x64>)
 8002ea6:	4a12      	ldr	r2, [pc, #72]	; (8002ef0 <_sbrk+0x68>)
 8002ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eaa:	4b10      	ldr	r3, [pc, #64]	; (8002eec <_sbrk+0x64>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d207      	bcs.n	8002ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eb8:	f009 fba8 	bl	800c60c <__errno>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	220c      	movs	r2, #12
 8002ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec6:	e009      	b.n	8002edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ec8:	4b08      	ldr	r3, [pc, #32]	; (8002eec <_sbrk+0x64>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ece:	4b07      	ldr	r3, [pc, #28]	; (8002eec <_sbrk+0x64>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	4a05      	ldr	r2, [pc, #20]	; (8002eec <_sbrk+0x64>)
 8002ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eda:	68fb      	ldr	r3, [r7, #12]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	24080000 	.word	0x24080000
 8002ee8:	00000400 	.word	0x00000400
 8002eec:	240006a8 	.word	0x240006a8
 8002ef0:	240050d0 	.word	0x240050d0

08002ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ef8:	f7fd fbcc 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002efc:	480c      	ldr	r0, [pc, #48]	; (8002f30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002efe:	490d      	ldr	r1, [pc, #52]	; (8002f34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f00:	4a0d      	ldr	r2, [pc, #52]	; (8002f38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f04:	e002      	b.n	8002f0c <LoopCopyDataInit>

08002f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f0a:	3304      	adds	r3, #4

08002f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f10:	d3f9      	bcc.n	8002f06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f12:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f14:	4c0a      	ldr	r4, [pc, #40]	; (8002f40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f18:	e001      	b.n	8002f1e <LoopFillZerobss>

08002f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f1c:	3204      	adds	r2, #4

08002f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f20:	d3fb      	bcc.n	8002f1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f22:	f009 fc6f 	bl	800c804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f26:	f7fe fd15 	bl	8001954 <main>
  bx  lr
 8002f2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f2c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002f30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f34:	240001fc 	.word	0x240001fc
  ldr r2, =_sidata
 8002f38:	080105e8 	.word	0x080105e8
  ldr r2, =_sbss
 8002f3c:	24000200 	.word	0x24000200
  ldr r4, =_ebss
 8002f40:	240050d0 	.word	0x240050d0

08002f44 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f44:	e7fe      	b.n	8002f44 <ADC3_IRQHandler>
	...

08002f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f4e:	2003      	movs	r0, #3
 8002f50:	f000 f933 	bl	80031ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f54:	f001 fcfe 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <HAL_Init+0x68>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	4913      	ldr	r1, [pc, #76]	; (8002fb4 <HAL_Init+0x6c>)
 8002f66:	5ccb      	ldrb	r3, [r1, r3]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f72:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <HAL_Init+0x68>)
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	4a0e      	ldr	r2, [pc, #56]	; (8002fb4 <HAL_Init+0x6c>)
 8002f7c:	5cd3      	ldrb	r3, [r2, r3]
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
 8002f88:	4a0b      	ldr	r2, [pc, #44]	; (8002fb8 <HAL_Init+0x70>)
 8002f8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f8c:	4a0b      	ldr	r2, [pc, #44]	; (8002fbc <HAL_Init+0x74>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f92:	200f      	movs	r0, #15
 8002f94:	f7ff fe5c 	bl	8002c50 <HAL_InitTick>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e002      	b.n	8002fa8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002fa2:	f7ff fc2d 	bl	8002800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	58024400 	.word	0x58024400
 8002fb4:	080100a0 	.word	0x080100a0
 8002fb8:	24000004 	.word	0x24000004
 8002fbc:	24000000 	.word	0x24000000

08002fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fc4:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <HAL_IncTick+0x20>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_IncTick+0x24>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4413      	add	r3, r2
 8002fd0:	4a04      	ldr	r2, [pc, #16]	; (8002fe4 <HAL_IncTick+0x24>)
 8002fd2:	6013      	str	r3, [r2, #0]
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	24000024 	.word	0x24000024
 8002fe4:	240006ac 	.word	0x240006ac

08002fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return uwTick;
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <HAL_GetTick+0x14>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	240006ac 	.word	0x240006ac

08003000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003008:	f7ff ffee 	bl	8002fe8 <HAL_GetTick>
 800300c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d005      	beq.n	8003026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <HAL_Delay+0x44>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4413      	add	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003026:	bf00      	nop
 8003028:	f7ff ffde 	bl	8002fe8 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	429a      	cmp	r2, r3
 8003036:	d8f7      	bhi.n	8003028 <HAL_Delay+0x28>
  {
  }
}
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	24000024 	.word	0x24000024

08003048 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_GetREVID+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	0c1b      	lsrs	r3, r3, #16
}
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	5c001000 	.word	0x5c001000

08003060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800307c:	4013      	ands	r3, r2
 800307e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003088:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <__NVIC_SetPriorityGrouping+0x44>)
 800308a:	4313      	orrs	r3, r2
 800308c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800308e:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	60d3      	str	r3, [r2, #12]
}
 8003094:	bf00      	nop
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	e000ed00 	.word	0xe000ed00
 80030a4:	05fa0000 	.word	0x05fa0000

080030a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <__NVIC_GetPriorityGrouping+0x18>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	0a1b      	lsrs	r3, r3, #8
 80030b2:	f003 0307 	and.w	r3, r3, #7
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	db0b      	blt.n	80030ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	f003 021f 	and.w	r2, r3, #31
 80030dc:	4907      	ldr	r1, [pc, #28]	; (80030fc <__NVIC_EnableIRQ+0x38>)
 80030de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	2001      	movs	r0, #1
 80030e6:	fa00 f202 	lsl.w	r2, r0, r2
 80030ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	e000e100 	.word	0xe000e100

08003100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	6039      	str	r1, [r7, #0]
 800310a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800310c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003110:	2b00      	cmp	r3, #0
 8003112:	db0a      	blt.n	800312a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	b2da      	uxtb	r2, r3
 8003118:	490c      	ldr	r1, [pc, #48]	; (800314c <__NVIC_SetPriority+0x4c>)
 800311a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800311e:	0112      	lsls	r2, r2, #4
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	440b      	add	r3, r1
 8003124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003128:	e00a      	b.n	8003140 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	4908      	ldr	r1, [pc, #32]	; (8003150 <__NVIC_SetPriority+0x50>)
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	3b04      	subs	r3, #4
 8003138:	0112      	lsls	r2, r2, #4
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	440b      	add	r3, r1
 800313e:	761a      	strb	r2, [r3, #24]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000e100 	.word	0xe000e100
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003154:	b480      	push	{r7}
 8003156:	b089      	sub	sp, #36	; 0x24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f1c3 0307 	rsb	r3, r3, #7
 800316e:	2b04      	cmp	r3, #4
 8003170:	bf28      	it	cs
 8003172:	2304      	movcs	r3, #4
 8003174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3304      	adds	r3, #4
 800317a:	2b06      	cmp	r3, #6
 800317c:	d902      	bls.n	8003184 <NVIC_EncodePriority+0x30>
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3b03      	subs	r3, #3
 8003182:	e000      	b.n	8003186 <NVIC_EncodePriority+0x32>
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003188:	f04f 32ff 	mov.w	r2, #4294967295
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43da      	mvns	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	401a      	ands	r2, r3
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800319c:	f04f 31ff 	mov.w	r1, #4294967295
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	fa01 f303 	lsl.w	r3, r1, r3
 80031a6:	43d9      	mvns	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ac:	4313      	orrs	r3, r2
         );
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3724      	adds	r7, #36	; 0x24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff ff4c 	bl	8003060 <__NVIC_SetPriorityGrouping>
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031de:	f7ff ff63 	bl	80030a8 <__NVIC_GetPriorityGrouping>
 80031e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	6978      	ldr	r0, [r7, #20]
 80031ea:	f7ff ffb3 	bl	8003154 <NVIC_EncodePriority>
 80031ee:	4602      	mov	r2, r0
 80031f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff ff82 	bl	8003100 <__NVIC_SetPriority>
}
 80031fc:	bf00      	nop
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800320e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff ff56 	bl	80030c4 <__NVIC_EnableIRQ>
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b098      	sub	sp, #96	; 0x60
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003228:	4a84      	ldr	r2, [pc, #528]	; (800343c <HAL_FDCAN_Init+0x21c>)
 800322a:	f107 030c 	add.w	r3, r7, #12
 800322e:	4611      	mov	r1, r2
 8003230:	224c      	movs	r2, #76	; 0x4c
 8003232:	4618      	mov	r0, r3
 8003234:	f009 fb0d 	bl	800c852 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e1c6      	b.n	80035d0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a7e      	ldr	r2, [pc, #504]	; (8003440 <HAL_FDCAN_Init+0x220>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d106      	bne.n	800325a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003254:	461a      	mov	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff fae4 	bl	800283c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0210 	bic.w	r2, r2, #16
 8003282:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003284:	f7ff feb0 	bl	8002fe8 <HAL_GetTick>
 8003288:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800328a:	e014      	b.n	80032b6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800328c:	f7ff feac 	bl	8002fe8 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b0a      	cmp	r3, #10
 8003298:	d90d      	bls.n	80032b6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032a0:	f043 0201 	orr.w	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2203      	movs	r2, #3
 80032ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e18c      	b.n	80035d0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d0e3      	beq.n	800328c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032d4:	f7ff fe88 	bl	8002fe8 <HAL_GetTick>
 80032d8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80032da:	e014      	b.n	8003306 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80032dc:	f7ff fe84 	bl	8002fe8 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b0a      	cmp	r3, #10
 80032e8:	d90d      	bls.n	8003306 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032f0:	f043 0201 	orr.w	r2, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2203      	movs	r2, #3
 80032fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e164      	b.n	80035d0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0e3      	beq.n	80032dc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0202 	orr.w	r2, r2, #2
 8003322:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	7c1b      	ldrb	r3, [r3, #16]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d108      	bne.n	800333e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800333a:	619a      	str	r2, [r3, #24]
 800333c:	e007      	b.n	800334e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699a      	ldr	r2, [r3, #24]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800334c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7c5b      	ldrb	r3, [r3, #17]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d108      	bne.n	8003368 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699a      	ldr	r2, [r3, #24]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003364:	619a      	str	r2, [r3, #24]
 8003366:	e007      	b.n	8003378 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003376:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	7c9b      	ldrb	r3, [r3, #18]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d108      	bne.n	8003392 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800338e:	619a      	str	r2, [r3, #24]
 8003390:	e007      	b.n	80033a2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699a      	ldr	r2, [r3, #24]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033a0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80033c6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0210 	bic.w	r2, r2, #16
 80033d6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d108      	bne.n	80033f2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0204 	orr.w	r2, r2, #4
 80033ee:	619a      	str	r2, [r3, #24]
 80033f0:	e030      	b.n	8003454 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d02c      	beq.n	8003454 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d020      	beq.n	8003444 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699a      	ldr	r2, [r3, #24]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003410:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0210 	orr.w	r2, r2, #16
 8003420:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b03      	cmp	r3, #3
 8003428:	d114      	bne.n	8003454 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699a      	ldr	r2, [r3, #24]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f042 0220 	orr.w	r2, r2, #32
 8003438:	619a      	str	r2, [r3, #24]
 800343a:	e00b      	b.n	8003454 <HAL_FDCAN_Init+0x234>
 800343c:	0801003c 	.word	0x0801003c
 8003440:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0220 	orr.w	r2, r2, #32
 8003452:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	3b01      	subs	r3, #1
 800345a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	3b01      	subs	r3, #1
 8003462:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003464:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800346c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	3b01      	subs	r3, #1
 8003476:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800347c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800347e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003488:	d115      	bne.n	80034b6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	3b01      	subs	r3, #1
 8003496:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003498:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	3b01      	subs	r3, #1
 80034a0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80034a2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	3b01      	subs	r3, #1
 80034ac:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80034b2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80034b4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034dc:	4413      	add	r3, r2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d011      	beq.n	8003506 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80034ea:	f023 0107 	bic.w	r1, r3, #7
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	3360      	adds	r3, #96	; 0x60
 80034f6:	443b      	add	r3, r7
 80034f8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d011      	beq.n	8003532 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003516:	f023 0107 	bic.w	r1, r3, #7
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	3360      	adds	r3, #96	; 0x60
 8003522:	443b      	add	r3, r7
 8003524:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003536:	2b00      	cmp	r3, #0
 8003538:	d012      	beq.n	8003560 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003542:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	3360      	adds	r3, #96	; 0x60
 800354e:	443b      	add	r3, r7
 8003550:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003554:	011a      	lsls	r2, r3, #4
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003564:	2b00      	cmp	r3, #0
 8003566:	d012      	beq.n	800358e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003570:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	3360      	adds	r3, #96	; 0x60
 800357c:	443b      	add	r3, r7
 800357e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003582:	021a      	lsls	r2, r3, #8
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a11      	ldr	r2, [pc, #68]	; (80035d8 <HAL_FDCAN_Init+0x3b8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d107      	bne.n	80035a8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f022 0203 	bic.w	r2, r2, #3
 80035a6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f80b 	bl	80035dc <FDCAN_CalcultateRamBlockAddresses>
 80035c6:	4603      	mov	r3, r0
 80035c8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80035cc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3760      	adds	r7, #96	; 0x60
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	4000a000 	.word	0x4000a000

080035dc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80035f2:	4ba7      	ldr	r3, [pc, #668]	; (8003890 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	0091      	lsls	r1, r2, #2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	430b      	orrs	r3, r1
 8003600:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800360c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	041a      	lsls	r2, r3, #16
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	4413      	add	r3, r2
 8003628:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003632:	4b97      	ldr	r3, [pc, #604]	; (8003890 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003634:	4013      	ands	r3, r2
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	0091      	lsls	r1, r2, #2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	430b      	orrs	r3, r1
 8003640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003654:	041a      	lsls	r2, r3, #16
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	4413      	add	r3, r2
 800366a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003674:	4b86      	ldr	r3, [pc, #536]	; (8003890 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003676:	4013      	ands	r3, r2
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	0091      	lsls	r1, r2, #2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	430b      	orrs	r3, r1
 8003682:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800368e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	041a      	lsls	r2, r3, #16
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	4413      	add	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80036bc:	4b74      	ldr	r3, [pc, #464]	; (8003890 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80036be:	4013      	ands	r3, r2
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	0091      	lsls	r1, r2, #2
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	430b      	orrs	r3, r1
 80036ca:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036d6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036de:	041a      	lsls	r2, r3, #16
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	4413      	add	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003704:	4b62      	ldr	r3, [pc, #392]	; (8003890 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003706:	4013      	ands	r3, r2
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	0091      	lsls	r1, r2, #2
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	430b      	orrs	r3, r1
 8003712:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	4413      	add	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003730:	4b57      	ldr	r3, [pc, #348]	; (8003890 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003732:	4013      	ands	r3, r2
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	0091      	lsls	r1, r2, #2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	430b      	orrs	r3, r1
 800373e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800374a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003752:	041a      	lsls	r2, r3, #16
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	4413      	add	r3, r2
 8003768:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003772:	4b47      	ldr	r3, [pc, #284]	; (8003890 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003774:	4013      	ands	r3, r2
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	0091      	lsls	r1, r2, #2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6812      	ldr	r2, [r2, #0]
 800377e:	430b      	orrs	r3, r1
 8003780:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800378c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003794:	041a      	lsls	r2, r3, #16
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80037a8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b0:	061a      	lsls	r2, r3, #24
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c0:	4b34      	ldr	r3, [pc, #208]	; (8003894 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80037c2:	4413      	add	r3, r2
 80037c4:	009a      	lsls	r2, r3, #2
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	441a      	add	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	441a      	add	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80037f6:	fb01 f303 	mul.w	r3, r1, r3
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	441a      	add	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	441a      	add	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003826:	fb01 f303 	mul.w	r3, r1, r3
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	441a      	add	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	441a      	add	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003856:	fb01 f303 	mul.w	r3, r1, r3
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	441a      	add	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003872:	fb01 f303 	mul.w	r3, r1, r3
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	441a      	add	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003886:	4a04      	ldr	r2, [pc, #16]	; (8003898 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d915      	bls.n	80038b8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800388c:	e006      	b.n	800389c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800388e:	bf00      	nop
 8003890:	ffff0003 	.word	0xffff0003
 8003894:	10002b00 	.word	0x10002b00
 8003898:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038a2:	f043 0220 	orr.w	r2, r3, #32
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2203      	movs	r2, #3
 80038b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e010      	b.n	80038da <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e005      	b.n	80038cc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3304      	adds	r3, #4
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d3f3      	bcc.n	80038c0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop

080038e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80038f6:	4b89      	ldr	r3, [pc, #548]	; (8003b1c <HAL_GPIO_Init+0x234>)
 80038f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038fa:	e194      	b.n	8003c26 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	2101      	movs	r1, #1
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	fa01 f303 	lsl.w	r3, r1, r3
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 8186 	beq.w	8003c20 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d005      	beq.n	800392c <HAL_GPIO_Init+0x44>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d130      	bne.n	800398e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	2203      	movs	r2, #3
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4013      	ands	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003962:	2201      	movs	r2, #1
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	f003 0201 	and.w	r2, r3, #1
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b03      	cmp	r3, #3
 8003998:	d017      	beq.n	80039ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	2203      	movs	r2, #3
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4013      	ands	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d123      	bne.n	8003a1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	08da      	lsrs	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3208      	adds	r2, #8
 80039de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	220f      	movs	r2, #15
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4013      	ands	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	08da      	lsrs	r2, r3, #3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3208      	adds	r2, #8
 8003a18:	69b9      	ldr	r1, [r7, #24]
 8003a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	2203      	movs	r2, #3
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f003 0203 	and.w	r2, r3, #3
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 80e0 	beq.w	8003c20 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a60:	4b2f      	ldr	r3, [pc, #188]	; (8003b20 <HAL_GPIO_Init+0x238>)
 8003a62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a66:	4a2e      	ldr	r2, [pc, #184]	; (8003b20 <HAL_GPIO_Init+0x238>)
 8003a68:	f043 0302 	orr.w	r3, r3, #2
 8003a6c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a70:	4b2b      	ldr	r3, [pc, #172]	; (8003b20 <HAL_GPIO_Init+0x238>)
 8003a72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a7e:	4a29      	ldr	r2, [pc, #164]	; (8003b24 <HAL_GPIO_Init+0x23c>)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	089b      	lsrs	r3, r3, #2
 8003a84:	3302      	adds	r3, #2
 8003a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	220f      	movs	r2, #15
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a20      	ldr	r2, [pc, #128]	; (8003b28 <HAL_GPIO_Init+0x240>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d052      	beq.n	8003b50 <HAL_GPIO_Init+0x268>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a1f      	ldr	r2, [pc, #124]	; (8003b2c <HAL_GPIO_Init+0x244>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d031      	beq.n	8003b16 <HAL_GPIO_Init+0x22e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a1e      	ldr	r2, [pc, #120]	; (8003b30 <HAL_GPIO_Init+0x248>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d02b      	beq.n	8003b12 <HAL_GPIO_Init+0x22a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <HAL_GPIO_Init+0x24c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d025      	beq.n	8003b0e <HAL_GPIO_Init+0x226>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a1c      	ldr	r2, [pc, #112]	; (8003b38 <HAL_GPIO_Init+0x250>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d01f      	beq.n	8003b0a <HAL_GPIO_Init+0x222>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a1b      	ldr	r2, [pc, #108]	; (8003b3c <HAL_GPIO_Init+0x254>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d019      	beq.n	8003b06 <HAL_GPIO_Init+0x21e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a1a      	ldr	r2, [pc, #104]	; (8003b40 <HAL_GPIO_Init+0x258>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d013      	beq.n	8003b02 <HAL_GPIO_Init+0x21a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <HAL_GPIO_Init+0x25c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00d      	beq.n	8003afe <HAL_GPIO_Init+0x216>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a18      	ldr	r2, [pc, #96]	; (8003b48 <HAL_GPIO_Init+0x260>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d007      	beq.n	8003afa <HAL_GPIO_Init+0x212>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a17      	ldr	r2, [pc, #92]	; (8003b4c <HAL_GPIO_Init+0x264>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d101      	bne.n	8003af6 <HAL_GPIO_Init+0x20e>
 8003af2:	2309      	movs	r3, #9
 8003af4:	e02d      	b.n	8003b52 <HAL_GPIO_Init+0x26a>
 8003af6:	230a      	movs	r3, #10
 8003af8:	e02b      	b.n	8003b52 <HAL_GPIO_Init+0x26a>
 8003afa:	2308      	movs	r3, #8
 8003afc:	e029      	b.n	8003b52 <HAL_GPIO_Init+0x26a>
 8003afe:	2307      	movs	r3, #7
 8003b00:	e027      	b.n	8003b52 <HAL_GPIO_Init+0x26a>
 8003b02:	2306      	movs	r3, #6
 8003b04:	e025      	b.n	8003b52 <HAL_GPIO_Init+0x26a>
 8003b06:	2305      	movs	r3, #5
 8003b08:	e023      	b.n	8003b52 <HAL_GPIO_Init+0x26a>
 8003b0a:	2304      	movs	r3, #4
 8003b0c:	e021      	b.n	8003b52 <HAL_GPIO_Init+0x26a>
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e01f      	b.n	8003b52 <HAL_GPIO_Init+0x26a>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e01d      	b.n	8003b52 <HAL_GPIO_Init+0x26a>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e01b      	b.n	8003b52 <HAL_GPIO_Init+0x26a>
 8003b1a:	bf00      	nop
 8003b1c:	58000080 	.word	0x58000080
 8003b20:	58024400 	.word	0x58024400
 8003b24:	58000400 	.word	0x58000400
 8003b28:	58020000 	.word	0x58020000
 8003b2c:	58020400 	.word	0x58020400
 8003b30:	58020800 	.word	0x58020800
 8003b34:	58020c00 	.word	0x58020c00
 8003b38:	58021000 	.word	0x58021000
 8003b3c:	58021400 	.word	0x58021400
 8003b40:	58021800 	.word	0x58021800
 8003b44:	58021c00 	.word	0x58021c00
 8003b48:	58022000 	.word	0x58022000
 8003b4c:	58022400 	.word	0x58022400
 8003b50:	2300      	movs	r3, #0
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	f002 0203 	and.w	r2, r2, #3
 8003b58:	0092      	lsls	r2, r2, #2
 8003b5a:	4093      	lsls	r3, r2
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b62:	4938      	ldr	r1, [pc, #224]	; (8003c44 <HAL_GPIO_Init+0x35c>)
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	089b      	lsrs	r3, r3, #2
 8003b68:	3302      	adds	r3, #2
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4013      	ands	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4013      	ands	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	3301      	adds	r3, #1
 8003c24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f47f ae63 	bne.w	80038fc <HAL_GPIO_Init+0x14>
  }
}
 8003c36:	bf00      	nop
 8003c38:	bf00      	nop
 8003c3a:	3724      	adds	r7, #36	; 0x24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	58000400 	.word	0x58000400

08003c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	807b      	strh	r3, [r7, #2]
 8003c54:	4613      	mov	r3, r2
 8003c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c58:	787b      	ldrb	r3, [r7, #1]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c5e:	887a      	ldrh	r2, [r7, #2]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c64:	e003      	b.n	8003c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c66:	887b      	ldrh	r3, [r7, #2]
 8003c68:	041a      	lsls	r2, r3, #16
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	619a      	str	r2, [r3, #24]
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003c84:	4a08      	ldr	r2, [pc, #32]	; (8003ca8 <HAL_HSEM_FastTake+0x2c>)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3320      	adds	r3, #32
 8003c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8e:	4a07      	ldr	r2, [pc, #28]	; (8003cac <HAL_HSEM_FastTake+0x30>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d101      	bne.n	8003c98 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	e000      	b.n	8003c9a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	58026400 	.word	0x58026400
 8003cac:	80000300 	.word	0x80000300

08003cb0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003cba:	4906      	ldr	r1, [pc, #24]	; (8003cd4 <HAL_HSEM_Release+0x24>)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	58026400 	.word	0x58026400

08003cd8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003ce0:	4b29      	ldr	r3, [pc, #164]	; (8003d88 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	2b06      	cmp	r3, #6
 8003cea:	d00a      	beq.n	8003d02 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003cec:	4b26      	ldr	r3, [pc, #152]	; (8003d88 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d001      	beq.n	8003cfe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e040      	b.n	8003d80 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e03e      	b.n	8003d80 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d02:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003d0a:	491f      	ldr	r1, [pc, #124]	; (8003d88 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d12:	f7ff f969 	bl	8002fe8 <HAL_GetTick>
 8003d16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d18:	e009      	b.n	8003d2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d1a:	f7ff f965 	bl	8002fe8 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d28:	d901      	bls.n	8003d2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e028      	b.n	8003d80 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d2e:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d3a:	d1ee      	bne.n	8003d1a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b1e      	cmp	r3, #30
 8003d40:	d008      	beq.n	8003d54 <HAL_PWREx_ConfigSupply+0x7c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b2e      	cmp	r3, #46	; 0x2e
 8003d46:	d005      	beq.n	8003d54 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b1d      	cmp	r3, #29
 8003d4c:	d002      	beq.n	8003d54 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b2d      	cmp	r3, #45	; 0x2d
 8003d52:	d114      	bne.n	8003d7e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003d54:	f7ff f948 	bl	8002fe8 <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d5a:	e009      	b.n	8003d70 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d5c:	f7ff f944 	bl	8002fe8 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d6a:	d901      	bls.n	8003d70 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e007      	b.n	8003d80 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7c:	d1ee      	bne.n	8003d5c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	58024800 	.word	0x58024800

08003d8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08c      	sub	sp, #48	; 0x30
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d102      	bne.n	8003da0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f000 bc1d 	b.w	80045da <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 8087 	beq.w	8003ebc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dae:	4b99      	ldr	r3, [pc, #612]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003db8:	4b96      	ldr	r3, [pc, #600]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc0:	2b10      	cmp	r3, #16
 8003dc2:	d007      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x48>
 8003dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc6:	2b18      	cmp	r3, #24
 8003dc8:	d110      	bne.n	8003dec <HAL_RCC_OscConfig+0x60>
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d10b      	bne.n	8003dec <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd4:	4b8f      	ldr	r3, [pc, #572]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d06c      	beq.n	8003eba <HAL_RCC_OscConfig+0x12e>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d168      	bne.n	8003eba <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e3f6      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df4:	d106      	bne.n	8003e04 <HAL_RCC_OscConfig+0x78>
 8003df6:	4b87      	ldr	r3, [pc, #540]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a86      	ldr	r2, [pc, #536]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	e02e      	b.n	8003e62 <HAL_RCC_OscConfig+0xd6>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10c      	bne.n	8003e26 <HAL_RCC_OscConfig+0x9a>
 8003e0c:	4b81      	ldr	r3, [pc, #516]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a80      	ldr	r2, [pc, #512]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	4b7e      	ldr	r3, [pc, #504]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a7d      	ldr	r2, [pc, #500]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	e01d      	b.n	8003e62 <HAL_RCC_OscConfig+0xd6>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e2e:	d10c      	bne.n	8003e4a <HAL_RCC_OscConfig+0xbe>
 8003e30:	4b78      	ldr	r3, [pc, #480]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a77      	ldr	r2, [pc, #476]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003e36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	4b75      	ldr	r3, [pc, #468]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a74      	ldr	r2, [pc, #464]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	e00b      	b.n	8003e62 <HAL_RCC_OscConfig+0xd6>
 8003e4a:	4b72      	ldr	r3, [pc, #456]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a71      	ldr	r2, [pc, #452]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	4b6f      	ldr	r3, [pc, #444]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a6e      	ldr	r2, [pc, #440]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e60:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d013      	beq.n	8003e92 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6a:	f7ff f8bd 	bl	8002fe8 <HAL_GetTick>
 8003e6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e72:	f7ff f8b9 	bl	8002fe8 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b64      	cmp	r3, #100	; 0x64
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e3aa      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e84:	4b63      	ldr	r3, [pc, #396]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_OscConfig+0xe6>
 8003e90:	e014      	b.n	8003ebc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7ff f8a9 	bl	8002fe8 <HAL_GetTick>
 8003e96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e9a:	f7ff f8a5 	bl	8002fe8 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b64      	cmp	r3, #100	; 0x64
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e396      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003eac:	4b59      	ldr	r3, [pc, #356]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f0      	bne.n	8003e9a <HAL_RCC_OscConfig+0x10e>
 8003eb8:	e000      	b.n	8003ebc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80cb 	beq.w	8004060 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eca:	4b52      	ldr	r3, [pc, #328]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ed2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ed4:	4b4f      	ldr	r3, [pc, #316]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x164>
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	2b18      	cmp	r3, #24
 8003ee4:	d156      	bne.n	8003f94 <HAL_RCC_OscConfig+0x208>
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d151      	bne.n	8003f94 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ef0:	4b48      	ldr	r3, [pc, #288]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_OscConfig+0x17c>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e368      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f08:	4b42      	ldr	r3, [pc, #264]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f023 0219 	bic.w	r2, r3, #25
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	493f      	ldr	r1, [pc, #252]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f1a:	f7ff f865 	bl	8002fe8 <HAL_GetTick>
 8003f1e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f22:	f7ff f861 	bl	8002fe8 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e352      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f34:	4b37      	ldr	r3, [pc, #220]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f0      	beq.n	8003f22 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f40:	f7ff f882 	bl	8003048 <HAL_GetREVID>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d817      	bhi.n	8003f7e <HAL_RCC_OscConfig+0x1f2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b40      	cmp	r3, #64	; 0x40
 8003f54:	d108      	bne.n	8003f68 <HAL_RCC_OscConfig+0x1dc>
 8003f56:	4b2f      	ldr	r3, [pc, #188]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003f5e:	4a2d      	ldr	r2, [pc, #180]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f64:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f66:	e07b      	b.n	8004060 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f68:	4b2a      	ldr	r3, [pc, #168]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	031b      	lsls	r3, r3, #12
 8003f76:	4927      	ldr	r1, [pc, #156]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f7c:	e070      	b.n	8004060 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7e:	4b25      	ldr	r3, [pc, #148]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	061b      	lsls	r3, r3, #24
 8003f8c:	4921      	ldr	r1, [pc, #132]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f92:	e065      	b.n	8004060 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d048      	beq.n	800402e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f9c:	4b1d      	ldr	r3, [pc, #116]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f023 0219 	bic.w	r2, r3, #25
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	491a      	ldr	r1, [pc, #104]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fae:	f7ff f81b 	bl	8002fe8 <HAL_GetTick>
 8003fb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fb6:	f7ff f817 	bl	8002fe8 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e308      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fc8:	4b12      	ldr	r3, [pc, #72]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f0      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd4:	f7ff f838 	bl	8003048 <HAL_GetREVID>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f241 0203 	movw	r2, #4099	; 0x1003
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d81a      	bhi.n	8004018 <HAL_RCC_OscConfig+0x28c>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b40      	cmp	r3, #64	; 0x40
 8003fe8:	d108      	bne.n	8003ffc <HAL_RCC_OscConfig+0x270>
 8003fea:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003ff2:	4a08      	ldr	r2, [pc, #32]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff8:	6053      	str	r3, [r2, #4]
 8003ffa:	e031      	b.n	8004060 <HAL_RCC_OscConfig+0x2d4>
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	031b      	lsls	r3, r3, #12
 800400a:	4902      	ldr	r1, [pc, #8]	; (8004014 <HAL_RCC_OscConfig+0x288>)
 800400c:	4313      	orrs	r3, r2
 800400e:	604b      	str	r3, [r1, #4]
 8004010:	e026      	b.n	8004060 <HAL_RCC_OscConfig+0x2d4>
 8004012:	bf00      	nop
 8004014:	58024400 	.word	0x58024400
 8004018:	4b9a      	ldr	r3, [pc, #616]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	061b      	lsls	r3, r3, #24
 8004026:	4997      	ldr	r1, [pc, #604]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 8004028:	4313      	orrs	r3, r2
 800402a:	604b      	str	r3, [r1, #4]
 800402c:	e018      	b.n	8004060 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800402e:	4b95      	ldr	r3, [pc, #596]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a94      	ldr	r2, [pc, #592]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403a:	f7fe ffd5 	bl	8002fe8 <HAL_GetTick>
 800403e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004042:	f7fe ffd1 	bl	8002fe8 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e2c2      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004054:	4b8b      	ldr	r3, [pc, #556]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1f0      	bne.n	8004042 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0310 	and.w	r3, r3, #16
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80a9 	beq.w	80041c0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800406e:	4b85      	ldr	r3, [pc, #532]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004076:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004078:	4b82      	ldr	r3, [pc, #520]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d007      	beq.n	8004094 <HAL_RCC_OscConfig+0x308>
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2b18      	cmp	r3, #24
 8004088:	d13a      	bne.n	8004100 <HAL_RCC_OscConfig+0x374>
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	2b01      	cmp	r3, #1
 8004092:	d135      	bne.n	8004100 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004094:	4b7b      	ldr	r3, [pc, #492]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_RCC_OscConfig+0x320>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	2b80      	cmp	r3, #128	; 0x80
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e296      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040ac:	f7fe ffcc 	bl	8003048 <HAL_GetREVID>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d817      	bhi.n	80040ea <HAL_RCC_OscConfig+0x35e>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d108      	bne.n	80040d4 <HAL_RCC_OscConfig+0x348>
 80040c2:	4b70      	ldr	r3, [pc, #448]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80040ca:	4a6e      	ldr	r2, [pc, #440]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 80040cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040d0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040d2:	e075      	b.n	80041c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040d4:	4b6b      	ldr	r3, [pc, #428]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	069b      	lsls	r3, r3, #26
 80040e2:	4968      	ldr	r1, [pc, #416]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040e8:	e06a      	b.n	80041c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040ea:	4b66      	ldr	r3, [pc, #408]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	061b      	lsls	r3, r3, #24
 80040f8:	4962      	ldr	r1, [pc, #392]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040fe:	e05f      	b.n	80041c0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d042      	beq.n	800418e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004108:	4b5e      	ldr	r3, [pc, #376]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a5d      	ldr	r2, [pc, #372]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 800410e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7fe ff68 	bl	8002fe8 <HAL_GetTick>
 8004118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800411c:	f7fe ff64 	bl	8002fe8 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e255      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800412e:	4b55      	ldr	r3, [pc, #340]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800413a:	f7fe ff85 	bl	8003048 <HAL_GetREVID>
 800413e:	4603      	mov	r3, r0
 8004140:	f241 0203 	movw	r2, #4099	; 0x1003
 8004144:	4293      	cmp	r3, r2
 8004146:	d817      	bhi.n	8004178 <HAL_RCC_OscConfig+0x3ec>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	2b20      	cmp	r3, #32
 800414e:	d108      	bne.n	8004162 <HAL_RCC_OscConfig+0x3d6>
 8004150:	4b4c      	ldr	r3, [pc, #304]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004158:	4a4a      	ldr	r2, [pc, #296]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 800415a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800415e:	6053      	str	r3, [r2, #4]
 8004160:	e02e      	b.n	80041c0 <HAL_RCC_OscConfig+0x434>
 8004162:	4b48      	ldr	r3, [pc, #288]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	069b      	lsls	r3, r3, #26
 8004170:	4944      	ldr	r1, [pc, #272]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 8004172:	4313      	orrs	r3, r2
 8004174:	604b      	str	r3, [r1, #4]
 8004176:	e023      	b.n	80041c0 <HAL_RCC_OscConfig+0x434>
 8004178:	4b42      	ldr	r3, [pc, #264]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	061b      	lsls	r3, r3, #24
 8004186:	493f      	ldr	r1, [pc, #252]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 8004188:	4313      	orrs	r3, r2
 800418a:	60cb      	str	r3, [r1, #12]
 800418c:	e018      	b.n	80041c0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800418e:	4b3d      	ldr	r3, [pc, #244]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a3c      	ldr	r2, [pc, #240]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 8004194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419a:	f7fe ff25 	bl	8002fe8 <HAL_GetTick>
 800419e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80041a2:	f7fe ff21 	bl	8002fe8 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e212      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041b4:	4b33      	ldr	r3, [pc, #204]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f0      	bne.n	80041a2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d036      	beq.n	800423a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d019      	beq.n	8004208 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041d4:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 80041d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d8:	4a2a      	ldr	r2, [pc, #168]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e0:	f7fe ff02 	bl	8002fe8 <HAL_GetTick>
 80041e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041e8:	f7fe fefe 	bl	8002fe8 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e1ef      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041fa:	4b22      	ldr	r3, [pc, #136]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 80041fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCC_OscConfig+0x45c>
 8004206:	e018      	b.n	800423a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004208:	4b1e      	ldr	r3, [pc, #120]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 800420a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420c:	4a1d      	ldr	r2, [pc, #116]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 800420e:	f023 0301 	bic.w	r3, r3, #1
 8004212:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004214:	f7fe fee8 	bl	8002fe8 <HAL_GetTick>
 8004218:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800421c:	f7fe fee4 	bl	8002fe8 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e1d5      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800422e:	4b15      	ldr	r3, [pc, #84]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 8004230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	2b00      	cmp	r3, #0
 8004244:	d039      	beq.n	80042ba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01c      	beq.n	8004288 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800424e:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a0c      	ldr	r2, [pc, #48]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 8004254:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004258:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800425a:	f7fe fec5 	bl	8002fe8 <HAL_GetTick>
 800425e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004262:	f7fe fec1 	bl	8002fe8 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e1b2      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004274:	4b03      	ldr	r3, [pc, #12]	; (8004284 <HAL_RCC_OscConfig+0x4f8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <HAL_RCC_OscConfig+0x4d6>
 8004280:	e01b      	b.n	80042ba <HAL_RCC_OscConfig+0x52e>
 8004282:	bf00      	nop
 8004284:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004288:	4b9b      	ldr	r3, [pc, #620]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a9a      	ldr	r2, [pc, #616]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 800428e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004292:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004294:	f7fe fea8 	bl	8002fe8 <HAL_GetTick>
 8004298:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800429c:	f7fe fea4 	bl	8002fe8 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e195      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042ae:	4b92      	ldr	r3, [pc, #584]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 8081 	beq.w	80043ca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042c8:	4b8c      	ldr	r3, [pc, #560]	; (80044fc <HAL_RCC_OscConfig+0x770>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a8b      	ldr	r2, [pc, #556]	; (80044fc <HAL_RCC_OscConfig+0x770>)
 80042ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042d4:	f7fe fe88 	bl	8002fe8 <HAL_GetTick>
 80042d8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042dc:	f7fe fe84 	bl	8002fe8 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b64      	cmp	r3, #100	; 0x64
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e175      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042ee:	4b83      	ldr	r3, [pc, #524]	; (80044fc <HAL_RCC_OscConfig+0x770>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d106      	bne.n	8004310 <HAL_RCC_OscConfig+0x584>
 8004302:	4b7d      	ldr	r3, [pc, #500]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	4a7c      	ldr	r2, [pc, #496]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	6713      	str	r3, [r2, #112]	; 0x70
 800430e:	e02d      	b.n	800436c <HAL_RCC_OscConfig+0x5e0>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10c      	bne.n	8004332 <HAL_RCC_OscConfig+0x5a6>
 8004318:	4b77      	ldr	r3, [pc, #476]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 800431a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431c:	4a76      	ldr	r2, [pc, #472]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	6713      	str	r3, [r2, #112]	; 0x70
 8004324:	4b74      	ldr	r3, [pc, #464]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	4a73      	ldr	r2, [pc, #460]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 800432a:	f023 0304 	bic.w	r3, r3, #4
 800432e:	6713      	str	r3, [r2, #112]	; 0x70
 8004330:	e01c      	b.n	800436c <HAL_RCC_OscConfig+0x5e0>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2b05      	cmp	r3, #5
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0x5c8>
 800433a:	4b6f      	ldr	r3, [pc, #444]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 800433c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433e:	4a6e      	ldr	r2, [pc, #440]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 8004340:	f043 0304 	orr.w	r3, r3, #4
 8004344:	6713      	str	r3, [r2, #112]	; 0x70
 8004346:	4b6c      	ldr	r3, [pc, #432]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434a:	4a6b      	ldr	r2, [pc, #428]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	6713      	str	r3, [r2, #112]	; 0x70
 8004352:	e00b      	b.n	800436c <HAL_RCC_OscConfig+0x5e0>
 8004354:	4b68      	ldr	r3, [pc, #416]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 8004356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004358:	4a67      	ldr	r2, [pc, #412]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	6713      	str	r3, [r2, #112]	; 0x70
 8004360:	4b65      	ldr	r3, [pc, #404]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 8004362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004364:	4a64      	ldr	r2, [pc, #400]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 8004366:	f023 0304 	bic.w	r3, r3, #4
 800436a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d015      	beq.n	80043a0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004374:	f7fe fe38 	bl	8002fe8 <HAL_GetTick>
 8004378:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800437a:	e00a      	b.n	8004392 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800437c:	f7fe fe34 	bl	8002fe8 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	; 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e123      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004392:	4b59      	ldr	r3, [pc, #356]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0ee      	beq.n	800437c <HAL_RCC_OscConfig+0x5f0>
 800439e:	e014      	b.n	80043ca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a0:	f7fe fe22 	bl	8002fe8 <HAL_GetTick>
 80043a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043a6:	e00a      	b.n	80043be <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a8:	f7fe fe1e 	bl	8002fe8 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e10d      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043be:	4b4e      	ldr	r3, [pc, #312]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1ee      	bne.n	80043a8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 8102 	beq.w	80045d8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80043d4:	4b48      	ldr	r3, [pc, #288]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043dc:	2b18      	cmp	r3, #24
 80043de:	f000 80bd 	beq.w	800455c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	f040 809e 	bne.w	8004528 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ec:	4b42      	ldr	r3, [pc, #264]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a41      	ldr	r2, [pc, #260]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 80043f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fe fdf6 	bl	8002fe8 <HAL_GetTick>
 80043fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004400:	f7fe fdf2 	bl	8002fe8 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e0e3      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004412:	4b39      	ldr	r3, [pc, #228]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800441e:	4b36      	ldr	r3, [pc, #216]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 8004420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004422:	4b37      	ldr	r3, [pc, #220]	; (8004500 <HAL_RCC_OscConfig+0x774>)
 8004424:	4013      	ands	r3, r2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800442e:	0112      	lsls	r2, r2, #4
 8004430:	430a      	orrs	r2, r1
 8004432:	4931      	ldr	r1, [pc, #196]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 8004434:	4313      	orrs	r3, r2
 8004436:	628b      	str	r3, [r1, #40]	; 0x28
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	3b01      	subs	r3, #1
 800443e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004446:	3b01      	subs	r3, #1
 8004448:	025b      	lsls	r3, r3, #9
 800444a:	b29b      	uxth	r3, r3
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	3b01      	subs	r3, #1
 8004454:	041b      	lsls	r3, r3, #16
 8004456:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004460:	3b01      	subs	r3, #1
 8004462:	061b      	lsls	r3, r3, #24
 8004464:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004468:	4923      	ldr	r1, [pc, #140]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 800446a:	4313      	orrs	r3, r2
 800446c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800446e:	4b22      	ldr	r3, [pc, #136]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	4a21      	ldr	r2, [pc, #132]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800447a:	4b1f      	ldr	r3, [pc, #124]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 800447c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800447e:	4b21      	ldr	r3, [pc, #132]	; (8004504 <HAL_RCC_OscConfig+0x778>)
 8004480:	4013      	ands	r3, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004486:	00d2      	lsls	r2, r2, #3
 8004488:	491b      	ldr	r1, [pc, #108]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 800448a:	4313      	orrs	r3, r2
 800448c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800448e:	4b1a      	ldr	r3, [pc, #104]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	f023 020c 	bic.w	r2, r3, #12
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	4917      	ldr	r1, [pc, #92]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 800449c:	4313      	orrs	r3, r2
 800449e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80044a0:	4b15      	ldr	r3, [pc, #84]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	f023 0202 	bic.w	r2, r3, #2
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	4912      	ldr	r1, [pc, #72]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044b2:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 80044b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b6:	4a10      	ldr	r2, [pc, #64]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 80044b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044be:	4b0e      	ldr	r3, [pc, #56]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	4a0d      	ldr	r2, [pc, #52]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 80044c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80044ca:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	4a0a      	ldr	r2, [pc, #40]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 80044d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80044d6:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 80044d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044da:	4a07      	ldr	r2, [pc, #28]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 80044e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ee:	f7fe fd7b 	bl	8002fe8 <HAL_GetTick>
 80044f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044f4:	e011      	b.n	800451a <HAL_RCC_OscConfig+0x78e>
 80044f6:	bf00      	nop
 80044f8:	58024400 	.word	0x58024400
 80044fc:	58024800 	.word	0x58024800
 8004500:	fffffc0c 	.word	0xfffffc0c
 8004504:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004508:	f7fe fd6e 	bl	8002fe8 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e05f      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800451a:	4b32      	ldr	r3, [pc, #200]	; (80045e4 <HAL_RCC_OscConfig+0x858>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x77c>
 8004526:	e057      	b.n	80045d8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004528:	4b2e      	ldr	r3, [pc, #184]	; (80045e4 <HAL_RCC_OscConfig+0x858>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a2d      	ldr	r2, [pc, #180]	; (80045e4 <HAL_RCC_OscConfig+0x858>)
 800452e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fe fd58 	bl	8002fe8 <HAL_GetTick>
 8004538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800453c:	f7fe fd54 	bl	8002fe8 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e045      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800454e:	4b25      	ldr	r3, [pc, #148]	; (80045e4 <HAL_RCC_OscConfig+0x858>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x7b0>
 800455a:	e03d      	b.n	80045d8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800455c:	4b21      	ldr	r3, [pc, #132]	; (80045e4 <HAL_RCC_OscConfig+0x858>)
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004562:	4b20      	ldr	r3, [pc, #128]	; (80045e4 <HAL_RCC_OscConfig+0x858>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	2b01      	cmp	r3, #1
 800456e:	d031      	beq.n	80045d4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f003 0203 	and.w	r2, r3, #3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800457a:	429a      	cmp	r2, r3
 800457c:	d12a      	bne.n	80045d4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800458a:	429a      	cmp	r2, r3
 800458c:	d122      	bne.n	80045d4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800459a:	429a      	cmp	r2, r3
 800459c:	d11a      	bne.n	80045d4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	0a5b      	lsrs	r3, r3, #9
 80045a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045aa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d111      	bne.n	80045d4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	0c1b      	lsrs	r3, r3, #16
 80045b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045be:	429a      	cmp	r2, r3
 80045c0:	d108      	bne.n	80045d4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	0e1b      	lsrs	r3, r3, #24
 80045c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d001      	beq.n	80045d8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3730      	adds	r7, #48	; 0x30
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	58024400 	.word	0x58024400

080045e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e19c      	b.n	8004936 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045fc:	4b8a      	ldr	r3, [pc, #552]	; (8004828 <HAL_RCC_ClockConfig+0x240>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d910      	bls.n	800462c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460a:	4b87      	ldr	r3, [pc, #540]	; (8004828 <HAL_RCC_ClockConfig+0x240>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f023 020f 	bic.w	r2, r3, #15
 8004612:	4985      	ldr	r1, [pc, #532]	; (8004828 <HAL_RCC_ClockConfig+0x240>)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	4313      	orrs	r3, r2
 8004618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461a:	4b83      	ldr	r3, [pc, #524]	; (8004828 <HAL_RCC_ClockConfig+0x240>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d001      	beq.n	800462c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e184      	b.n	8004936 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d010      	beq.n	800465a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	4b7b      	ldr	r3, [pc, #492]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004644:	429a      	cmp	r2, r3
 8004646:	d908      	bls.n	800465a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004648:	4b78      	ldr	r3, [pc, #480]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	4975      	ldr	r1, [pc, #468]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 8004656:	4313      	orrs	r3, r2
 8004658:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d010      	beq.n	8004688 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695a      	ldr	r2, [r3, #20]
 800466a:	4b70      	ldr	r3, [pc, #448]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004672:	429a      	cmp	r2, r3
 8004674:	d908      	bls.n	8004688 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004676:	4b6d      	ldr	r3, [pc, #436]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	496a      	ldr	r1, [pc, #424]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 8004684:	4313      	orrs	r3, r2
 8004686:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0310 	and.w	r3, r3, #16
 8004690:	2b00      	cmp	r3, #0
 8004692:	d010      	beq.n	80046b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699a      	ldr	r2, [r3, #24]
 8004698:	4b64      	ldr	r3, [pc, #400]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d908      	bls.n	80046b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046a4:	4b61      	ldr	r3, [pc, #388]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	495e      	ldr	r1, [pc, #376]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d010      	beq.n	80046e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69da      	ldr	r2, [r3, #28]
 80046c6:	4b59      	ldr	r3, [pc, #356]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d908      	bls.n	80046e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80046d2:	4b56      	ldr	r3, [pc, #344]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	4953      	ldr	r1, [pc, #332]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d010      	beq.n	8004712 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	4b4d      	ldr	r3, [pc, #308]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d908      	bls.n	8004712 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004700:	4b4a      	ldr	r3, [pc, #296]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	f023 020f 	bic.w	r2, r3, #15
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	4947      	ldr	r1, [pc, #284]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 800470e:	4313      	orrs	r3, r2
 8004710:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d055      	beq.n	80047ca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800471e:	4b43      	ldr	r3, [pc, #268]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	4940      	ldr	r1, [pc, #256]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 800472c:	4313      	orrs	r3, r2
 800472e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b02      	cmp	r3, #2
 8004736:	d107      	bne.n	8004748 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004738:	4b3c      	ldr	r3, [pc, #240]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d121      	bne.n	8004788 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0f6      	b.n	8004936 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d107      	bne.n	8004760 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004750:	4b36      	ldr	r3, [pc, #216]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d115      	bne.n	8004788 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0ea      	b.n	8004936 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d107      	bne.n	8004778 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004768:	4b30      	ldr	r3, [pc, #192]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d109      	bne.n	8004788 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0de      	b.n	8004936 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004778:	4b2c      	ldr	r3, [pc, #176]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0d6      	b.n	8004936 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004788:	4b28      	ldr	r3, [pc, #160]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f023 0207 	bic.w	r2, r3, #7
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4925      	ldr	r1, [pc, #148]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 8004796:	4313      	orrs	r3, r2
 8004798:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479a:	f7fe fc25 	bl	8002fe8 <HAL_GetTick>
 800479e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a0:	e00a      	b.n	80047b8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a2:	f7fe fc21 	bl	8002fe8 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e0be      	b.n	8004936 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b8:	4b1c      	ldr	r3, [pc, #112]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d1eb      	bne.n	80047a2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d010      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	4b14      	ldr	r3, [pc, #80]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d208      	bcs.n	80047f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e6:	4b11      	ldr	r3, [pc, #68]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	f023 020f 	bic.w	r2, r3, #15
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	490e      	ldr	r1, [pc, #56]	; (800482c <HAL_RCC_ClockConfig+0x244>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047f8:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <HAL_RCC_ClockConfig+0x240>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 030f 	and.w	r3, r3, #15
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d214      	bcs.n	8004830 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004806:	4b08      	ldr	r3, [pc, #32]	; (8004828 <HAL_RCC_ClockConfig+0x240>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f023 020f 	bic.w	r2, r3, #15
 800480e:	4906      	ldr	r1, [pc, #24]	; (8004828 <HAL_RCC_ClockConfig+0x240>)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	4313      	orrs	r3, r2
 8004814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004816:	4b04      	ldr	r3, [pc, #16]	; (8004828 <HAL_RCC_ClockConfig+0x240>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d005      	beq.n	8004830 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e086      	b.n	8004936 <HAL_RCC_ClockConfig+0x34e>
 8004828:	52002000 	.word	0x52002000
 800482c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d010      	beq.n	800485e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	4b3f      	ldr	r3, [pc, #252]	; (8004940 <HAL_RCC_ClockConfig+0x358>)
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004848:	429a      	cmp	r2, r3
 800484a:	d208      	bcs.n	800485e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800484c:	4b3c      	ldr	r3, [pc, #240]	; (8004940 <HAL_RCC_ClockConfig+0x358>)
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	4939      	ldr	r1, [pc, #228]	; (8004940 <HAL_RCC_ClockConfig+0x358>)
 800485a:	4313      	orrs	r3, r2
 800485c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d010      	beq.n	800488c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	4b34      	ldr	r3, [pc, #208]	; (8004940 <HAL_RCC_ClockConfig+0x358>)
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004876:	429a      	cmp	r2, r3
 8004878:	d208      	bcs.n	800488c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800487a:	4b31      	ldr	r3, [pc, #196]	; (8004940 <HAL_RCC_ClockConfig+0x358>)
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	492e      	ldr	r1, [pc, #184]	; (8004940 <HAL_RCC_ClockConfig+0x358>)
 8004888:	4313      	orrs	r3, r2
 800488a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b00      	cmp	r3, #0
 8004896:	d010      	beq.n	80048ba <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699a      	ldr	r2, [r3, #24]
 800489c:	4b28      	ldr	r3, [pc, #160]	; (8004940 <HAL_RCC_ClockConfig+0x358>)
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d208      	bcs.n	80048ba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048a8:	4b25      	ldr	r3, [pc, #148]	; (8004940 <HAL_RCC_ClockConfig+0x358>)
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	4922      	ldr	r1, [pc, #136]	; (8004940 <HAL_RCC_ClockConfig+0x358>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0320 	and.w	r3, r3, #32
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d010      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69da      	ldr	r2, [r3, #28]
 80048ca:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <HAL_RCC_ClockConfig+0x358>)
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d208      	bcs.n	80048e8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80048d6:	4b1a      	ldr	r3, [pc, #104]	; (8004940 <HAL_RCC_ClockConfig+0x358>)
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	4917      	ldr	r1, [pc, #92]	; (8004940 <HAL_RCC_ClockConfig+0x358>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80048e8:	f000 f834 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 80048ec:	4602      	mov	r2, r0
 80048ee:	4b14      	ldr	r3, [pc, #80]	; (8004940 <HAL_RCC_ClockConfig+0x358>)
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	0a1b      	lsrs	r3, r3, #8
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	4912      	ldr	r1, [pc, #72]	; (8004944 <HAL_RCC_ClockConfig+0x35c>)
 80048fa:	5ccb      	ldrb	r3, [r1, r3]
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	fa22 f303 	lsr.w	r3, r2, r3
 8004904:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004906:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <HAL_RCC_ClockConfig+0x358>)
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	4a0d      	ldr	r2, [pc, #52]	; (8004944 <HAL_RCC_ClockConfig+0x35c>)
 8004910:	5cd3      	ldrb	r3, [r2, r3]
 8004912:	f003 031f 	and.w	r3, r3, #31
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	fa22 f303 	lsr.w	r3, r2, r3
 800491c:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <HAL_RCC_ClockConfig+0x360>)
 800491e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004920:	4a0a      	ldr	r2, [pc, #40]	; (800494c <HAL_RCC_ClockConfig+0x364>)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004926:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <HAL_RCC_ClockConfig+0x368>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe f990 	bl	8002c50 <HAL_InitTick>
 8004930:	4603      	mov	r3, r0
 8004932:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004934:	7bfb      	ldrb	r3, [r7, #15]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	58024400 	.word	0x58024400
 8004944:	080100a0 	.word	0x080100a0
 8004948:	24000004 	.word	0x24000004
 800494c:	24000000 	.word	0x24000000
 8004950:	24000020 	.word	0x24000020

08004954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004954:	b480      	push	{r7}
 8004956:	b089      	sub	sp, #36	; 0x24
 8004958:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800495a:	4bb3      	ldr	r3, [pc, #716]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004962:	2b18      	cmp	r3, #24
 8004964:	f200 8155 	bhi.w	8004c12 <HAL_RCC_GetSysClockFreq+0x2be>
 8004968:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <HAL_RCC_GetSysClockFreq+0x1c>)
 800496a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496e:	bf00      	nop
 8004970:	080049d5 	.word	0x080049d5
 8004974:	08004c13 	.word	0x08004c13
 8004978:	08004c13 	.word	0x08004c13
 800497c:	08004c13 	.word	0x08004c13
 8004980:	08004c13 	.word	0x08004c13
 8004984:	08004c13 	.word	0x08004c13
 8004988:	08004c13 	.word	0x08004c13
 800498c:	08004c13 	.word	0x08004c13
 8004990:	080049fb 	.word	0x080049fb
 8004994:	08004c13 	.word	0x08004c13
 8004998:	08004c13 	.word	0x08004c13
 800499c:	08004c13 	.word	0x08004c13
 80049a0:	08004c13 	.word	0x08004c13
 80049a4:	08004c13 	.word	0x08004c13
 80049a8:	08004c13 	.word	0x08004c13
 80049ac:	08004c13 	.word	0x08004c13
 80049b0:	08004a01 	.word	0x08004a01
 80049b4:	08004c13 	.word	0x08004c13
 80049b8:	08004c13 	.word	0x08004c13
 80049bc:	08004c13 	.word	0x08004c13
 80049c0:	08004c13 	.word	0x08004c13
 80049c4:	08004c13 	.word	0x08004c13
 80049c8:	08004c13 	.word	0x08004c13
 80049cc:	08004c13 	.word	0x08004c13
 80049d0:	08004a07 	.word	0x08004a07
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049d4:	4b94      	ldr	r3, [pc, #592]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d009      	beq.n	80049f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049e0:	4b91      	ldr	r3, [pc, #580]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	08db      	lsrs	r3, r3, #3
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	4a90      	ldr	r2, [pc, #576]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
 80049f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80049f2:	e111      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80049f4:	4b8d      	ldr	r3, [pc, #564]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049f6:	61bb      	str	r3, [r7, #24]
    break;
 80049f8:	e10e      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80049fa:	4b8d      	ldr	r3, [pc, #564]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049fc:	61bb      	str	r3, [r7, #24]
    break;
 80049fe:	e10b      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004a00:	4b8c      	ldr	r3, [pc, #560]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004a02:	61bb      	str	r3, [r7, #24]
    break;
 8004a04:	e108      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a06:	4b88      	ldr	r3, [pc, #544]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004a10:	4b85      	ldr	r3, [pc, #532]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a1a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a1c:	4b82      	ldr	r3, [pc, #520]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004a26:	4b80      	ldr	r3, [pc, #512]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2a:	08db      	lsrs	r3, r3, #3
 8004a2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	fb02 f303 	mul.w	r3, r2, r3
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 80e1 	beq.w	8004c0c <HAL_RCC_GetSysClockFreq+0x2b8>
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	f000 8083 	beq.w	8004b58 <HAL_RCC_GetSysClockFreq+0x204>
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	f200 80a1 	bhi.w	8004b9c <HAL_RCC_GetSysClockFreq+0x248>
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_RCC_GetSysClockFreq+0x114>
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d056      	beq.n	8004b14 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004a66:	e099      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a68:	4b6f      	ldr	r3, [pc, #444]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d02d      	beq.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a74:	4b6c      	ldr	r3, [pc, #432]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	08db      	lsrs	r3, r3, #3
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	4a6b      	ldr	r2, [pc, #428]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
 8004a84:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	ee07 3a90 	vmov	s15, r3
 8004a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a9e:	4b62      	ldr	r3, [pc, #392]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aae:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ab2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004c38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004ace:	e087      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	ee07 3a90 	vmov	s15, r3
 8004ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ada:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004c3c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ae2:	4b51      	ldr	r3, [pc, #324]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004af6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004c38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b12:	e065      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004c40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b26:	4b40      	ldr	r3, [pc, #256]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b3a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004c38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b56:	e043      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b62:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004c44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b6a:	4b2f      	ldr	r3, [pc, #188]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b7e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004c38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b9a:	e021      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004c40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bae:	4b1e      	ldr	r3, [pc, #120]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bc2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004c38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bde:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004be0:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	0a5b      	lsrs	r3, r3, #9
 8004be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bea:	3301      	adds	r3, #1
 8004bec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	ee07 3a90 	vmov	s15, r3
 8004bf4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c04:	ee17 3a90 	vmov	r3, s15
 8004c08:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004c0a:	e005      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61bb      	str	r3, [r7, #24]
    break;
 8004c10:	e002      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004c12:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c14:	61bb      	str	r3, [r7, #24]
    break;
 8004c16:	bf00      	nop
  }

  return sysclockfreq;
 8004c18:	69bb      	ldr	r3, [r7, #24]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3724      	adds	r7, #36	; 0x24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	58024400 	.word	0x58024400
 8004c2c:	03d09000 	.word	0x03d09000
 8004c30:	003d0900 	.word	0x003d0900
 8004c34:	017d7840 	.word	0x017d7840
 8004c38:	46000000 	.word	0x46000000
 8004c3c:	4c742400 	.word	0x4c742400
 8004c40:	4a742400 	.word	0x4a742400
 8004c44:	4bbebc20 	.word	0x4bbebc20

08004c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c4e:	f7ff fe81 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8004c52:	4602      	mov	r2, r0
 8004c54:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	490f      	ldr	r1, [pc, #60]	; (8004c9c <HAL_RCC_GetHCLKFreq+0x54>)
 8004c60:	5ccb      	ldrb	r3, [r1, r3]
 8004c62:	f003 031f 	and.w	r3, r3, #31
 8004c66:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	4a09      	ldr	r2, [pc, #36]	; (8004c9c <HAL_RCC_GetHCLKFreq+0x54>)
 8004c76:	5cd3      	ldrb	r3, [r2, r3]
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c82:	4a07      	ldr	r2, [pc, #28]	; (8004ca0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c84:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c86:	4a07      	ldr	r2, [pc, #28]	; (8004ca4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004c8c:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	58024400 	.word	0x58024400
 8004c9c:	080100a0 	.word	0x080100a0
 8004ca0:	24000004 	.word	0x24000004
 8004ca4:	24000000 	.word	0x24000000

08004ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004cac:	f7ff ffcc 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	091b      	lsrs	r3, r3, #4
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	4904      	ldr	r1, [pc, #16]	; (8004cd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cbe:	5ccb      	ldrb	r3, [r1, r3]
 8004cc0:	f003 031f 	and.w	r3, r3, #31
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	58024400 	.word	0x58024400
 8004cd0:	080100a0 	.word	0x080100a0

08004cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004cd8:	f7ff ffb6 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	0a1b      	lsrs	r3, r3, #8
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	4904      	ldr	r1, [pc, #16]	; (8004cfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cea:	5ccb      	ldrb	r3, [r1, r3]
 8004cec:	f003 031f 	and.w	r3, r3, #31
 8004cf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	58024400 	.word	0x58024400
 8004cfc:	080100a0 	.word	0x080100a0

08004d00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	223f      	movs	r2, #63	; 0x3f
 8004d0e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d10:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <HAL_RCC_GetClockConfig+0x7c>)
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f003 0207 	and.w	r2, r3, #7
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004d1c:	4b17      	ldr	r3, [pc, #92]	; (8004d7c <HAL_RCC_GetClockConfig+0x7c>)
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004d28:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <HAL_RCC_GetClockConfig+0x7c>)
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	f003 020f 	and.w	r2, r3, #15
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004d34:	4b11      	ldr	r3, [pc, #68]	; (8004d7c <HAL_RCC_GetClockConfig+0x7c>)
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004d40:	4b0e      	ldr	r3, [pc, #56]	; (8004d7c <HAL_RCC_GetClockConfig+0x7c>)
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <HAL_RCC_GetClockConfig+0x7c>)
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004d58:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <HAL_RCC_GetClockConfig+0x7c>)
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <HAL_RCC_GetClockConfig+0x80>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 020f 	and.w	r2, r3, #15
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	601a      	str	r2, [r3, #0]
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	58024400 	.word	0x58024400
 8004d80:	52002000 	.word	0x52002000

08004d84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d90:	2300      	movs	r3, #0
 8004d92:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d03f      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004da4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004da8:	d02a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004daa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004dae:	d824      	bhi.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004db0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004db4:	d018      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004db6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dba:	d81e      	bhi.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dc4:	d007      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004dc6:	e018      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dc8:	4ba3      	ldr	r3, [pc, #652]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dcc:	4aa2      	ldr	r2, [pc, #648]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004dd4:	e015      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	2102      	movs	r1, #2
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f001 f9d5 	bl	800618c <RCCEx_PLL2_Config>
 8004de2:	4603      	mov	r3, r0
 8004de4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004de6:	e00c      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3324      	adds	r3, #36	; 0x24
 8004dec:	2102      	movs	r1, #2
 8004dee:	4618      	mov	r0, r3
 8004df0:	f001 fa7e 	bl	80062f0 <RCCEx_PLL3_Config>
 8004df4:	4603      	mov	r3, r0
 8004df6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004df8:	e003      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8004dfe:	e000      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e02:	7dfb      	ldrb	r3, [r7, #23]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d109      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e08:	4b93      	ldr	r3, [pc, #588]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e14:	4990      	ldr	r1, [pc, #576]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	650b      	str	r3, [r1, #80]	; 0x50
 8004e1a:	e001      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1c:	7dfb      	ldrb	r3, [r7, #23]
 8004e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d03d      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d826      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004e34:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e51 	.word	0x08004e51
 8004e40:	08004e5f 	.word	0x08004e5f
 8004e44:	08004e71 	.word	0x08004e71
 8004e48:	08004e89 	.word	0x08004e89
 8004e4c:	08004e89 	.word	0x08004e89
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e50:	4b81      	ldr	r3, [pc, #516]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	4a80      	ldr	r2, [pc, #512]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e5c:	e015      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3304      	adds	r3, #4
 8004e62:	2100      	movs	r1, #0
 8004e64:	4618      	mov	r0, r3
 8004e66:	f001 f991 	bl	800618c <RCCEx_PLL2_Config>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e6e:	e00c      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3324      	adds	r3, #36	; 0x24
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 fa3a 	bl	80062f0 <RCCEx_PLL3_Config>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e80:	e003      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
      break;
 8004e86:	e000      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e8a:	7dfb      	ldrb	r3, [r7, #23]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d109      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e90:	4b71      	ldr	r3, [pc, #452]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e94:	f023 0207 	bic.w	r2, r3, #7
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9c:	496e      	ldr	r1, [pc, #440]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	650b      	str	r3, [r1, #80]	; 0x50
 8004ea2:	e001      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea4:	7dfb      	ldrb	r3, [r7, #23]
 8004ea6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d042      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ebc:	d02b      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec2:	d825      	bhi.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004ec4:	2bc0      	cmp	r3, #192	; 0xc0
 8004ec6:	d028      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004ec8:	2bc0      	cmp	r3, #192	; 0xc0
 8004eca:	d821      	bhi.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004ecc:	2b80      	cmp	r3, #128	; 0x80
 8004ece:	d016      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004ed0:	2b80      	cmp	r3, #128	; 0x80
 8004ed2:	d81d      	bhi.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004ed8:	2b40      	cmp	r3, #64	; 0x40
 8004eda:	d007      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004edc:	e018      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ede:	4b5e      	ldr	r3, [pc, #376]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	4a5d      	ldr	r2, [pc, #372]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004eea:	e017      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f001 f94a 	bl	800618c <RCCEx_PLL2_Config>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004efc:	e00e      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3324      	adds	r3, #36	; 0x24
 8004f02:	2100      	movs	r1, #0
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 f9f3 	bl	80062f0 <RCCEx_PLL3_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f0e:	e005      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	75fb      	strb	r3, [r7, #23]
      break;
 8004f14:	e002      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004f16:	bf00      	nop
 8004f18:	e000      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d109      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004f22:	4b4d      	ldr	r3, [pc, #308]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f26:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2e:	494a      	ldr	r1, [pc, #296]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	650b      	str	r3, [r1, #80]	; 0x50
 8004f34:	e001      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f36:	7dfb      	ldrb	r3, [r7, #23]
 8004f38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d049      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f50:	d030      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004f52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f56:	d82a      	bhi.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f58:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f5c:	d02c      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004f5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f62:	d824      	bhi.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f68:	d018      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f6e:	d81e      	bhi.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004f74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f78:	d007      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004f7a:	e018      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f7c:	4b36      	ldr	r3, [pc, #216]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	4a35      	ldr	r2, [pc, #212]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f88:	e017      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	2100      	movs	r1, #0
 8004f90:	4618      	mov	r0, r3
 8004f92:	f001 f8fb 	bl	800618c <RCCEx_PLL2_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004f9a:	e00e      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3324      	adds	r3, #36	; 0x24
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f001 f9a4 	bl	80062f0 <RCCEx_PLL3_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fac:	e005      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb2:	e002      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004fb4:	bf00      	nop
 8004fb6:	e000      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004fb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fba:	7dfb      	ldrb	r3, [r7, #23]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10a      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004fc0:	4b25      	ldr	r3, [pc, #148]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fce:	4922      	ldr	r1, [pc, #136]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	658b      	str	r3, [r1, #88]	; 0x58
 8004fd4:	e001      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
 8004fd8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d04b      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004fec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ff0:	d030      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004ff2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ff6:	d82a      	bhi.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004ff8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ffc:	d02e      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004ffe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005002:	d824      	bhi.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005004:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005008:	d018      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800500a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800500e:	d81e      	bhi.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005018:	d007      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800501a:	e018      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800501c:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	4a0d      	ldr	r2, [pc, #52]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005026:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005028:	e019      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3304      	adds	r3, #4
 800502e:	2100      	movs	r1, #0
 8005030:	4618      	mov	r0, r3
 8005032:	f001 f8ab 	bl	800618c <RCCEx_PLL2_Config>
 8005036:	4603      	mov	r3, r0
 8005038:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800503a:	e010      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3324      	adds	r3, #36	; 0x24
 8005040:	2100      	movs	r1, #0
 8005042:	4618      	mov	r0, r3
 8005044:	f001 f954 	bl	80062f0 <RCCEx_PLL3_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800504c:	e007      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	75fb      	strb	r3, [r7, #23]
      break;
 8005052:	e004      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005054:	bf00      	nop
 8005056:	e002      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005058:	58024400 	.word	0x58024400
      break;
 800505c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800505e:	7dfb      	ldrb	r3, [r7, #23]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005064:	4b99      	ldr	r3, [pc, #612]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005068:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005072:	4996      	ldr	r1, [pc, #600]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005074:	4313      	orrs	r3, r2
 8005076:	658b      	str	r3, [r1, #88]	; 0x58
 8005078:	e001      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507a:	7dfb      	ldrb	r3, [r7, #23]
 800507c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d032      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800508e:	2b30      	cmp	r3, #48	; 0x30
 8005090:	d01c      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005092:	2b30      	cmp	r3, #48	; 0x30
 8005094:	d817      	bhi.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005096:	2b20      	cmp	r3, #32
 8005098:	d00c      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800509a:	2b20      	cmp	r3, #32
 800509c:	d813      	bhi.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d016      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80050a2:	2b10      	cmp	r3, #16
 80050a4:	d10f      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a6:	4b89      	ldr	r3, [pc, #548]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80050a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050aa:	4a88      	ldr	r2, [pc, #544]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80050ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80050b2:	e00e      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3304      	adds	r3, #4
 80050b8:	2102      	movs	r1, #2
 80050ba:	4618      	mov	r0, r3
 80050bc:	f001 f866 	bl	800618c <RCCEx_PLL2_Config>
 80050c0:	4603      	mov	r3, r0
 80050c2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80050c4:	e005      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	75fb      	strb	r3, [r7, #23]
      break;
 80050ca:	e002      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80050cc:	bf00      	nop
 80050ce:	e000      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80050d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050d2:	7dfb      	ldrb	r3, [r7, #23]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d109      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80050d8:	4b7c      	ldr	r3, [pc, #496]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80050da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e4:	4979      	ldr	r1, [pc, #484]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80050ea:	e001      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ec:	7dfb      	ldrb	r3, [r7, #23]
 80050ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d047      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005104:	d030      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005106:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800510a:	d82a      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800510c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005110:	d02c      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005112:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005116:	d824      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800511c:	d018      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800511e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005122:	d81e      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512c:	d007      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800512e:	e018      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005130:	4b66      	ldr	r3, [pc, #408]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	4a65      	ldr	r2, [pc, #404]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800513a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800513c:	e017      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3304      	adds	r3, #4
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f001 f821 	bl	800618c <RCCEx_PLL2_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800514e:	e00e      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3324      	adds	r3, #36	; 0x24
 8005154:	2100      	movs	r1, #0
 8005156:	4618      	mov	r0, r3
 8005158:	f001 f8ca 	bl	80062f0 <RCCEx_PLL3_Config>
 800515c:	4603      	mov	r3, r0
 800515e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005160:	e005      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	75fb      	strb	r3, [r7, #23]
      break;
 8005166:	e002      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005168:	bf00      	nop
 800516a:	e000      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800516c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800516e:	7dfb      	ldrb	r3, [r7, #23]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d109      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005174:	4b55      	ldr	r3, [pc, #340]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005178:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005180:	4952      	ldr	r1, [pc, #328]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005182:	4313      	orrs	r3, r2
 8005184:	650b      	str	r3, [r1, #80]	; 0x50
 8005186:	e001      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005188:	7dfb      	ldrb	r3, [r7, #23]
 800518a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d049      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051a0:	d02e      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80051a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051a6:	d828      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80051a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051ac:	d02a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80051ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051b2:	d822      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80051b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051b8:	d026      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80051ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051be:	d81c      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80051c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051c4:	d010      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80051c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ca:	d816      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01d      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x488>
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d4:	d111      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3304      	adds	r3, #4
 80051da:	2101      	movs	r1, #1
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 ffd5 	bl	800618c <RCCEx_PLL2_Config>
 80051e2:	4603      	mov	r3, r0
 80051e4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80051e6:	e012      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3324      	adds	r3, #36	; 0x24
 80051ec:	2101      	movs	r1, #1
 80051ee:	4618      	mov	r0, r3
 80051f0:	f001 f87e 	bl	80062f0 <RCCEx_PLL3_Config>
 80051f4:	4603      	mov	r3, r0
 80051f6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80051f8:	e009      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	75fb      	strb	r3, [r7, #23]
      break;
 80051fe:	e006      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005200:	bf00      	nop
 8005202:	e004      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005204:	bf00      	nop
 8005206:	e002      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005208:	bf00      	nop
 800520a:	e000      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800520c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800520e:	7dfb      	ldrb	r3, [r7, #23]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d109      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005214:	4b2d      	ldr	r3, [pc, #180]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005218:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005220:	492a      	ldr	r1, [pc, #168]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005222:	4313      	orrs	r3, r2
 8005224:	650b      	str	r3, [r1, #80]	; 0x50
 8005226:	e001      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d04d      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800523e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005242:	d02e      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005244:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005248:	d828      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800524a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524e:	d02a      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005254:	d822      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005256:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800525a:	d026      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x526>
 800525c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005260:	d81c      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005262:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005266:	d010      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800526c:	d816      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800526e:	2b00      	cmp	r3, #0
 8005270:	d01d      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005276:	d111      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3304      	adds	r3, #4
 800527c:	2101      	movs	r1, #1
 800527e:	4618      	mov	r0, r3
 8005280:	f000 ff84 	bl	800618c <RCCEx_PLL2_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005288:	e012      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3324      	adds	r3, #36	; 0x24
 800528e:	2101      	movs	r1, #1
 8005290:	4618      	mov	r0, r3
 8005292:	f001 f82d 	bl	80062f0 <RCCEx_PLL3_Config>
 8005296:	4603      	mov	r3, r0
 8005298:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800529a:	e009      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	75fb      	strb	r3, [r7, #23]
      break;
 80052a0:	e006      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80052a2:	bf00      	nop
 80052a4:	e004      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80052a6:	bf00      	nop
 80052a8:	e002      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80052aa:	bf00      	nop
 80052ac:	e000      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80052ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10c      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80052b6:	4b05      	ldr	r3, [pc, #20]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052c4:	4901      	ldr	r1, [pc, #4]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	658b      	str	r3, [r1, #88]	; 0x58
 80052ca:	e003      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80052cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
 80052d2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d02f      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e8:	d00e      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80052ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ee:	d814      	bhi.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x596>
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d015      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80052f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052f8:	d10f      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052fa:	4baf      	ldr	r3, [pc, #700]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	4aae      	ldr	r2, [pc, #696]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005304:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005306:	e00c      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3304      	adds	r3, #4
 800530c:	2101      	movs	r1, #1
 800530e:	4618      	mov	r0, r3
 8005310:	f000 ff3c 	bl	800618c <RCCEx_PLL2_Config>
 8005314:	4603      	mov	r3, r0
 8005316:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005318:	e003      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	75fb      	strb	r3, [r7, #23]
      break;
 800531e:	e000      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005322:	7dfb      	ldrb	r3, [r7, #23]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d109      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005328:	4ba3      	ldr	r3, [pc, #652]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800532a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005334:	49a0      	ldr	r1, [pc, #640]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005336:	4313      	orrs	r3, r2
 8005338:	650b      	str	r3, [r1, #80]	; 0x50
 800533a:	e001      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533c:	7dfb      	ldrb	r3, [r7, #23]
 800533e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d032      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005350:	2b03      	cmp	r3, #3
 8005352:	d81b      	bhi.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005354:	a201      	add	r2, pc, #4	; (adr r2, 800535c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535a:	bf00      	nop
 800535c:	08005393 	.word	0x08005393
 8005360:	0800536d 	.word	0x0800536d
 8005364:	0800537b 	.word	0x0800537b
 8005368:	08005393 	.word	0x08005393
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800536c:	4b92      	ldr	r3, [pc, #584]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	4a91      	ldr	r2, [pc, #580]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005376:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005378:	e00c      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3304      	adds	r3, #4
 800537e:	2102      	movs	r1, #2
 8005380:	4618      	mov	r0, r3
 8005382:	f000 ff03 	bl	800618c <RCCEx_PLL2_Config>
 8005386:	4603      	mov	r3, r0
 8005388:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800538a:	e003      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	75fb      	strb	r3, [r7, #23]
      break;
 8005390:	e000      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005392:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005394:	7dfb      	ldrb	r3, [r7, #23]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d109      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800539a:	4b87      	ldr	r3, [pc, #540]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800539c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539e:	f023 0203 	bic.w	r2, r3, #3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a6:	4984      	ldr	r1, [pc, #528]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80053ac:	e001      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ae:	7dfb      	ldrb	r3, [r7, #23]
 80053b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 8086 	beq.w	80054cc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053c0:	4b7e      	ldr	r3, [pc, #504]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a7d      	ldr	r2, [pc, #500]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80053c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053cc:	f7fd fe0c 	bl	8002fe8 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053d2:	e009      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053d4:	f7fd fe08 	bl	8002fe8 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b64      	cmp	r3, #100	; 0x64
 80053e0:	d902      	bls.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	75fb      	strb	r3, [r7, #23]
        break;
 80053e6:	e005      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053e8:	4b74      	ldr	r3, [pc, #464]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0ef      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80053f4:	7dfb      	ldrb	r3, [r7, #23]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d166      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80053fa:	4b6f      	ldr	r3, [pc, #444]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80053fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005404:	4053      	eors	r3, r2
 8005406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540a:	2b00      	cmp	r3, #0
 800540c:	d013      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800540e:	4b6a      	ldr	r3, [pc, #424]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005416:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005418:	4b67      	ldr	r3, [pc, #412]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800541a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541c:	4a66      	ldr	r2, [pc, #408]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800541e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005422:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005424:	4b64      	ldr	r3, [pc, #400]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005428:	4a63      	ldr	r2, [pc, #396]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800542a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005430:	4a61      	ldr	r2, [pc, #388]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800543c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005440:	d115      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005442:	f7fd fdd1 	bl	8002fe8 <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005448:	e00b      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544a:	f7fd fdcd 	bl	8002fe8 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	f241 3288 	movw	r2, #5000	; 0x1388
 8005458:	4293      	cmp	r3, r2
 800545a:	d902      	bls.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	75fb      	strb	r3, [r7, #23]
            break;
 8005460:	e005      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005462:	4b55      	ldr	r3, [pc, #340]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0ed      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800546e:	7dfb      	ldrb	r3, [r7, #23]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d126      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800547a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005482:	d10d      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005484:	4b4c      	ldr	r3, [pc, #304]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005492:	0919      	lsrs	r1, r3, #4
 8005494:	4b4a      	ldr	r3, [pc, #296]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005496:	400b      	ands	r3, r1
 8005498:	4947      	ldr	r1, [pc, #284]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800549a:	4313      	orrs	r3, r2
 800549c:	610b      	str	r3, [r1, #16]
 800549e:	e005      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x728>
 80054a0:	4b45      	ldr	r3, [pc, #276]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	4a44      	ldr	r2, [pc, #272]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80054aa:	6113      	str	r3, [r2, #16]
 80054ac:	4b42      	ldr	r3, [pc, #264]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ba:	493f      	ldr	r1, [pc, #252]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	670b      	str	r3, [r1, #112]	; 0x70
 80054c0:	e004      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
 80054c4:	75bb      	strb	r3, [r7, #22]
 80054c6:	e001      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c8:	7dfb      	ldrb	r3, [r7, #23]
 80054ca:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8085 	beq.w	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054de:	2b28      	cmp	r3, #40	; 0x28
 80054e0:	d866      	bhi.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80054e2:	a201      	add	r2, pc, #4	; (adr r2, 80054e8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80054e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e8:	080055c5 	.word	0x080055c5
 80054ec:	080055b1 	.word	0x080055b1
 80054f0:	080055b1 	.word	0x080055b1
 80054f4:	080055b1 	.word	0x080055b1
 80054f8:	080055b1 	.word	0x080055b1
 80054fc:	080055b1 	.word	0x080055b1
 8005500:	080055b1 	.word	0x080055b1
 8005504:	080055b1 	.word	0x080055b1
 8005508:	0800558d 	.word	0x0800558d
 800550c:	080055b1 	.word	0x080055b1
 8005510:	080055b1 	.word	0x080055b1
 8005514:	080055b1 	.word	0x080055b1
 8005518:	080055b1 	.word	0x080055b1
 800551c:	080055b1 	.word	0x080055b1
 8005520:	080055b1 	.word	0x080055b1
 8005524:	080055b1 	.word	0x080055b1
 8005528:	0800559f 	.word	0x0800559f
 800552c:	080055b1 	.word	0x080055b1
 8005530:	080055b1 	.word	0x080055b1
 8005534:	080055b1 	.word	0x080055b1
 8005538:	080055b1 	.word	0x080055b1
 800553c:	080055b1 	.word	0x080055b1
 8005540:	080055b1 	.word	0x080055b1
 8005544:	080055b1 	.word	0x080055b1
 8005548:	080055c5 	.word	0x080055c5
 800554c:	080055b1 	.word	0x080055b1
 8005550:	080055b1 	.word	0x080055b1
 8005554:	080055b1 	.word	0x080055b1
 8005558:	080055b1 	.word	0x080055b1
 800555c:	080055b1 	.word	0x080055b1
 8005560:	080055b1 	.word	0x080055b1
 8005564:	080055b1 	.word	0x080055b1
 8005568:	080055c5 	.word	0x080055c5
 800556c:	080055b1 	.word	0x080055b1
 8005570:	080055b1 	.word	0x080055b1
 8005574:	080055b1 	.word	0x080055b1
 8005578:	080055b1 	.word	0x080055b1
 800557c:	080055b1 	.word	0x080055b1
 8005580:	080055b1 	.word	0x080055b1
 8005584:	080055b1 	.word	0x080055b1
 8005588:	080055c5 	.word	0x080055c5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3304      	adds	r3, #4
 8005590:	2101      	movs	r1, #1
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fdfa 	bl	800618c <RCCEx_PLL2_Config>
 8005598:	4603      	mov	r3, r0
 800559a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800559c:	e013      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3324      	adds	r3, #36	; 0x24
 80055a2:	2101      	movs	r1, #1
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fea3 	bl	80062f0 <RCCEx_PLL3_Config>
 80055aa:	4603      	mov	r3, r0
 80055ac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80055ae:	e00a      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	75fb      	strb	r3, [r7, #23]
      break;
 80055b4:	e007      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80055b6:	bf00      	nop
 80055b8:	58024400 	.word	0x58024400
 80055bc:	58024800 	.word	0x58024800
 80055c0:	00ffffcf 	.word	0x00ffffcf
      break;
 80055c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d109      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80055cc:	4b96      	ldr	r3, [pc, #600]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80055ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055d8:	4993      	ldr	r1, [pc, #588]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	654b      	str	r3, [r1, #84]	; 0x54
 80055de:	e001      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
 80055e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d038      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f4:	2b05      	cmp	r3, #5
 80055f6:	d821      	bhi.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80055f8:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80055fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fe:	bf00      	nop
 8005600:	08005643 	.word	0x08005643
 8005604:	08005619 	.word	0x08005619
 8005608:	0800562b 	.word	0x0800562b
 800560c:	08005643 	.word	0x08005643
 8005610:	08005643 	.word	0x08005643
 8005614:	08005643 	.word	0x08005643
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3304      	adds	r3, #4
 800561c:	2101      	movs	r1, #1
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fdb4 	bl	800618c <RCCEx_PLL2_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005628:	e00c      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3324      	adds	r3, #36	; 0x24
 800562e:	2101      	movs	r1, #1
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fe5d 	bl	80062f0 <RCCEx_PLL3_Config>
 8005636:	4603      	mov	r3, r0
 8005638:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800563a:	e003      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	75fb      	strb	r3, [r7, #23]
      break;
 8005640:	e000      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005642:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005644:	7dfb      	ldrb	r3, [r7, #23]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d109      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800564a:	4b77      	ldr	r3, [pc, #476]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800564c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564e:	f023 0207 	bic.w	r2, r3, #7
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005656:	4974      	ldr	r1, [pc, #464]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005658:	4313      	orrs	r3, r2
 800565a:	654b      	str	r3, [r1, #84]	; 0x54
 800565c:	e001      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565e:	7dfb      	ldrb	r3, [r7, #23]
 8005660:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b00      	cmp	r3, #0
 800566c:	d03a      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005674:	2b05      	cmp	r3, #5
 8005676:	d821      	bhi.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005678:	a201      	add	r2, pc, #4	; (adr r2, 8005680 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800567a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567e:	bf00      	nop
 8005680:	080056c3 	.word	0x080056c3
 8005684:	08005699 	.word	0x08005699
 8005688:	080056ab 	.word	0x080056ab
 800568c:	080056c3 	.word	0x080056c3
 8005690:	080056c3 	.word	0x080056c3
 8005694:	080056c3 	.word	0x080056c3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3304      	adds	r3, #4
 800569c:	2101      	movs	r1, #1
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fd74 	bl	800618c <RCCEx_PLL2_Config>
 80056a4:	4603      	mov	r3, r0
 80056a6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80056a8:	e00c      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3324      	adds	r3, #36	; 0x24
 80056ae:	2101      	movs	r1, #1
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fe1d 	bl	80062f0 <RCCEx_PLL3_Config>
 80056b6:	4603      	mov	r3, r0
 80056b8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80056ba:	e003      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	75fb      	strb	r3, [r7, #23]
      break;
 80056c0:	e000      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80056c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056c4:	7dfb      	ldrb	r3, [r7, #23]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056ca:	4b57      	ldr	r3, [pc, #348]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80056cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ce:	f023 0207 	bic.w	r2, r3, #7
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d8:	4953      	ldr	r1, [pc, #332]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	658b      	str	r3, [r1, #88]	; 0x58
 80056de:	e001      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
 80056e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d04b      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056fa:	d02e      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80056fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005700:	d828      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005706:	d02a      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800570c:	d822      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800570e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005712:	d026      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005714:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005718:	d81c      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800571a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800571e:	d010      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005724:	d816      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005726:	2b00      	cmp	r3, #0
 8005728:	d01d      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800572a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800572e:	d111      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	2100      	movs	r1, #0
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fd28 	bl	800618c <RCCEx_PLL2_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005740:	e012      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3324      	adds	r3, #36	; 0x24
 8005746:	2102      	movs	r1, #2
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fdd1 	bl	80062f0 <RCCEx_PLL3_Config>
 800574e:	4603      	mov	r3, r0
 8005750:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005752:	e009      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	75fb      	strb	r3, [r7, #23]
      break;
 8005758:	e006      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800575a:	bf00      	nop
 800575c:	e004      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800575e:	bf00      	nop
 8005760:	e002      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005762:	bf00      	nop
 8005764:	e000      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005766:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005768:	7dfb      	ldrb	r3, [r7, #23]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800576e:	4b2e      	ldr	r3, [pc, #184]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005772:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800577c:	492a      	ldr	r1, [pc, #168]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800577e:	4313      	orrs	r3, r2
 8005780:	654b      	str	r3, [r1, #84]	; 0x54
 8005782:	e001      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005784:	7dfb      	ldrb	r3, [r7, #23]
 8005786:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005790:	2b00      	cmp	r3, #0
 8005792:	d04d      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800579a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800579e:	d02e      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80057a0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80057a4:	d828      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80057a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057aa:	d02a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80057ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b0:	d822      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80057b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057b6:	d026      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80057b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057bc:	d81c      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80057be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057c2:	d010      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80057c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057c8:	d816      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01d      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80057ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d2:	d111      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3304      	adds	r3, #4
 80057d8:	2100      	movs	r1, #0
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fcd6 	bl	800618c <RCCEx_PLL2_Config>
 80057e0:	4603      	mov	r3, r0
 80057e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80057e4:	e012      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3324      	adds	r3, #36	; 0x24
 80057ea:	2102      	movs	r1, #2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fd7f 	bl	80062f0 <RCCEx_PLL3_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80057f6:	e009      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	75fb      	strb	r3, [r7, #23]
      break;
 80057fc:	e006      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80057fe:	bf00      	nop
 8005800:	e004      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005802:	bf00      	nop
 8005804:	e002      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005806:	bf00      	nop
 8005808:	e000      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800580a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800580c:	7dfb      	ldrb	r3, [r7, #23]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10c      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005812:	4b05      	ldr	r3, [pc, #20]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005816:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005820:	4901      	ldr	r1, [pc, #4]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005822:	4313      	orrs	r3, r2
 8005824:	658b      	str	r3, [r1, #88]	; 0x58
 8005826:	e003      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005828:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582c:	7dfb      	ldrb	r3, [r7, #23]
 800582e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005838:	2b00      	cmp	r3, #0
 800583a:	d04b      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005842:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005846:	d02e      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005848:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800584c:	d828      	bhi.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800584e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005852:	d02a      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005858:	d822      	bhi.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800585a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800585e:	d026      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005860:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005864:	d81c      	bhi.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800586a:	d010      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800586c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005870:	d816      	bhi.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005872:	2b00      	cmp	r3, #0
 8005874:	d01d      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800587a:	d111      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3304      	adds	r3, #4
 8005880:	2100      	movs	r1, #0
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fc82 	bl	800618c <RCCEx_PLL2_Config>
 8005888:	4603      	mov	r3, r0
 800588a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800588c:	e012      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3324      	adds	r3, #36	; 0x24
 8005892:	2102      	movs	r1, #2
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fd2b 	bl	80062f0 <RCCEx_PLL3_Config>
 800589a:	4603      	mov	r3, r0
 800589c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800589e:	e009      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	75fb      	strb	r3, [r7, #23]
      break;
 80058a4:	e006      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80058a6:	bf00      	nop
 80058a8:	e004      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80058aa:	bf00      	nop
 80058ac:	e002      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80058ae:	bf00      	nop
 80058b0:	e000      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80058b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10a      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80058ba:	4b9d      	ldr	r3, [pc, #628]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80058bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058c8:	4999      	ldr	r1, [pc, #612]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	658b      	str	r3, [r1, #88]	; 0x58
 80058ce:	e001      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d01a      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ea:	d10a      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3324      	adds	r3, #36	; 0x24
 80058f0:	2102      	movs	r1, #2
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fcfc 	bl	80062f0 <RCCEx_PLL3_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005902:	4b8b      	ldr	r3, [pc, #556]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005906:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005910:	4987      	ldr	r1, [pc, #540]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005912:	4313      	orrs	r3, r2
 8005914:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0310 	and.w	r3, r3, #16
 800591e:	2b00      	cmp	r3, #0
 8005920:	d01a      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800592c:	d10a      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3324      	adds	r3, #36	; 0x24
 8005932:	2102      	movs	r1, #2
 8005934:	4618      	mov	r0, r3
 8005936:	f000 fcdb 	bl	80062f0 <RCCEx_PLL3_Config>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005944:	4b7a      	ldr	r3, [pc, #488]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005952:	4977      	ldr	r1, [pc, #476]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005954:	4313      	orrs	r3, r2
 8005956:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d034      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800596a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800596e:	d01d      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005970:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005974:	d817      	bhi.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800597a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597e:	d009      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005980:	e011      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	3304      	adds	r3, #4
 8005986:	2100      	movs	r1, #0
 8005988:	4618      	mov	r0, r3
 800598a:	f000 fbff 	bl	800618c <RCCEx_PLL2_Config>
 800598e:	4603      	mov	r3, r0
 8005990:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005992:	e00c      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3324      	adds	r3, #36	; 0x24
 8005998:	2102      	movs	r1, #2
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fca8 	bl	80062f0 <RCCEx_PLL3_Config>
 80059a0:	4603      	mov	r3, r0
 80059a2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80059a4:	e003      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	75fb      	strb	r3, [r7, #23]
      break;
 80059aa:	e000      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80059ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10a      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059b4:	4b5e      	ldr	r3, [pc, #376]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80059b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059c2:	495b      	ldr	r1, [pc, #364]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	658b      	str	r3, [r1, #88]	; 0x58
 80059c8:	e001      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ca:	7dfb      	ldrb	r3, [r7, #23]
 80059cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d033      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059e4:	d01c      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80059e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059ea:	d816      	bhi.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80059ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059f0:	d003      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80059f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059f6:	d007      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80059f8:	e00f      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059fa:	4b4d      	ldr	r3, [pc, #308]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	4a4c      	ldr	r2, [pc, #304]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a06:	e00c      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	3324      	adds	r3, #36	; 0x24
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fc6e 	bl	80062f0 <RCCEx_PLL3_Config>
 8005a14:	4603      	mov	r3, r0
 8005a16:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a18:	e003      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a1e:	e000      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005a20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a22:	7dfb      	ldrb	r3, [r7, #23]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10a      	bne.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a28:	4b41      	ldr	r3, [pc, #260]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a36:	493e      	ldr	r1, [pc, #248]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	654b      	str	r3, [r1, #84]	; 0x54
 8005a3c:	e001      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3e:	7dfb      	ldrb	r3, [r7, #23]
 8005a40:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d029      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5a:	d007      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005a5c:	e00f      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a5e:	4b34      	ldr	r3, [pc, #208]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	4a33      	ldr	r2, [pc, #204]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005a6a:	e00b      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3304      	adds	r3, #4
 8005a70:	2102      	movs	r1, #2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fb8a 	bl	800618c <RCCEx_PLL2_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005a7c:	e002      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	75fb      	strb	r3, [r7, #23]
      break;
 8005a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d109      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005a8a:	4b29      	ldr	r3, [pc, #164]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a96:	4926      	ldr	r1, [pc, #152]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005a9c:	e001      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a9e:	7dfb      	ldrb	r3, [r7, #23]
 8005aa0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3324      	adds	r3, #36	; 0x24
 8005ab2:	2102      	movs	r1, #2
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fc1b 	bl	80062f0 <RCCEx_PLL3_Config>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d033      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ad4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ad8:	d017      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005ada:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ade:	d811      	bhi.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ae4:	d013      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aea:	d80b      	bhi.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d010      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af4:	d106      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005af6:	4b0e      	ldr	r3, [pc, #56]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	4a0d      	ldr	r2, [pc, #52]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005b02:	e007      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	75fb      	strb	r3, [r7, #23]
      break;
 8005b08:	e004      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005b0a:	bf00      	nop
 8005b0c:	e002      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005b0e:	bf00      	nop
 8005b10:	e000      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b14:	7dfb      	ldrb	r3, [r7, #23]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10c      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b1a:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b26:	4902      	ldr	r1, [pc, #8]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	654b      	str	r3, [r1, #84]	; 0x54
 8005b2c:	e004      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005b2e:	bf00      	nop
 8005b30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b34:	7dfb      	ldrb	r3, [r7, #23]
 8005b36:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d008      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b44:	4b31      	ldr	r3, [pc, #196]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b50:	492e      	ldr	r1, [pc, #184]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d009      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005b62:	4b2a      	ldr	r3, [pc, #168]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b70:	4926      	ldr	r1, [pc, #152]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d008      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b82:	4b22      	ldr	r3, [pc, #136]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b86:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b8e:	491f      	ldr	r1, [pc, #124]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00d      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ba0:	4b1a      	ldr	r3, [pc, #104]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	4a19      	ldr	r2, [pc, #100]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ba6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005baa:	6113      	str	r3, [r2, #16]
 8005bac:	4b17      	ldr	r3, [pc, #92]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005bb6:	4915      	ldr	r1, [pc, #84]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	da08      	bge.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005bc4:	4b11      	ldr	r3, [pc, #68]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd0:	490e      	ldr	r1, [pc, #56]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d009      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005be2:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf0:	4906      	ldr	r1, [pc, #24]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005bf6:	7dbb      	ldrb	r3, [r7, #22]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	e000      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	58024400 	.word	0x58024400

08005c10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c14:	f7ff f818 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	091b      	lsrs	r3, r3, #4
 8005c20:	f003 0307 	and.w	r3, r3, #7
 8005c24:	4904      	ldr	r1, [pc, #16]	; (8005c38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c26:	5ccb      	ldrb	r3, [r1, r3]
 8005c28:	f003 031f 	and.w	r3, r3, #31
 8005c2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	58024400 	.word	0x58024400
 8005c38:	080100a0 	.word	0x080100a0

08005c3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b089      	sub	sp, #36	; 0x24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c44:	4ba1      	ldr	r3, [pc, #644]	; (8005ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c48:	f003 0303 	and.w	r3, r3, #3
 8005c4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005c4e:	4b9f      	ldr	r3, [pc, #636]	; (8005ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c52:	0b1b      	lsrs	r3, r3, #12
 8005c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c5a:	4b9c      	ldr	r3, [pc, #624]	; (8005ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	091b      	lsrs	r3, r3, #4
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005c66:	4b99      	ldr	r3, [pc, #612]	; (8005ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	08db      	lsrs	r3, r3, #3
 8005c6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	fb02 f303 	mul.w	r3, r2, r3
 8005c76:	ee07 3a90 	vmov	s15, r3
 8005c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 8111 	beq.w	8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	f000 8083 	beq.w	8005d98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	f200 80a1 	bhi.w	8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d056      	beq.n	8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005ca6:	e099      	b.n	8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ca8:	4b88      	ldr	r3, [pc, #544]	; (8005ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0320 	and.w	r3, r3, #32
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d02d      	beq.n	8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cb4:	4b85      	ldr	r3, [pc, #532]	; (8005ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	08db      	lsrs	r3, r3, #3
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	4a84      	ldr	r2, [pc, #528]	; (8005ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	ee07 3a90 	vmov	s15, r3
 8005ccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	ee07 3a90 	vmov	s15, r3
 8005cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cde:	4b7b      	ldr	r3, [pc, #492]	; (8005ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cf2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d0e:	e087      	b.n	8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d22:	4b6a      	ldr	r3, [pc, #424]	; (8005ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d36:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d52:	e065      	b.n	8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d66:	4b59      	ldr	r3, [pc, #356]	; (8005ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d96:	e043      	b.n	8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005daa:	4b48      	ldr	r3, [pc, #288]	; (8005ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dbe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dda:	e021      	b.n	8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dee:	4b37      	ldr	r3, [pc, #220]	; (8005ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df6:	ee07 3a90 	vmov	s15, r3
 8005dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005e20:	4b2a      	ldr	r3, [pc, #168]	; (8005ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	0a5b      	lsrs	r3, r3, #9
 8005e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e46:	ee17 2a90 	vmov	r2, s15
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005e4e:	4b1f      	ldr	r3, [pc, #124]	; (8005ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	0c1b      	lsrs	r3, r3, #16
 8005e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e58:	ee07 3a90 	vmov	s15, r3
 8005e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e68:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e74:	ee17 2a90 	vmov	r2, s15
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005e7c:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e80:	0e1b      	lsrs	r3, r3, #24
 8005e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e96:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ea2:	ee17 2a90 	vmov	r2, s15
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005eaa:	e008      	b.n	8005ebe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	609a      	str	r2, [r3, #8]
}
 8005ebe:	bf00      	nop
 8005ec0:	3724      	adds	r7, #36	; 0x24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	58024400 	.word	0x58024400
 8005ed0:	03d09000 	.word	0x03d09000
 8005ed4:	46000000 	.word	0x46000000
 8005ed8:	4c742400 	.word	0x4c742400
 8005edc:	4a742400 	.word	0x4a742400
 8005ee0:	4bbebc20 	.word	0x4bbebc20

08005ee4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b089      	sub	sp, #36	; 0x24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005eec:	4ba1      	ldr	r3, [pc, #644]	; (8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef0:	f003 0303 	and.w	r3, r3, #3
 8005ef4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005ef6:	4b9f      	ldr	r3, [pc, #636]	; (8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efa:	0d1b      	lsrs	r3, r3, #20
 8005efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f02:	4b9c      	ldr	r3, [pc, #624]	; (8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f06:	0a1b      	lsrs	r3, r3, #8
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005f0e:	4b99      	ldr	r3, [pc, #612]	; (8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f12:	08db      	lsrs	r3, r3, #3
 8005f14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	fb02 f303 	mul.w	r3, r2, r3
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 8111 	beq.w	8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	f000 8083 	beq.w	8006040 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	f200 80a1 	bhi.w	8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d056      	beq.n	8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005f4e:	e099      	b.n	8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f50:	4b88      	ldr	r3, [pc, #544]	; (8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0320 	and.w	r3, r3, #32
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d02d      	beq.n	8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f5c:	4b85      	ldr	r3, [pc, #532]	; (8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	08db      	lsrs	r3, r3, #3
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	4a84      	ldr	r2, [pc, #528]	; (8006178 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f68:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	ee07 3a90 	vmov	s15, r3
 8005f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f86:	4b7b      	ldr	r3, [pc, #492]	; (8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800617c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005fb6:	e087      	b.n	80060c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fca:	4b6a      	ldr	r3, [pc, #424]	; (8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fde:	eddf 5a67 	vldr	s11, [pc, #412]	; 800617c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ffa:	e065      	b.n	80060c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006006:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800600a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800600e:	4b59      	ldr	r3, [pc, #356]	; (8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800601e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006022:	eddf 5a56 	vldr	s11, [pc, #344]	; 800617c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800602a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800602e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800603e:	e043      	b.n	80060c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006188 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800604e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006052:	4b48      	ldr	r3, [pc, #288]	; (8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006062:	ed97 6a03 	vldr	s12, [r7, #12]
 8006066:	eddf 5a45 	vldr	s11, [pc, #276]	; 800617c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800606a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800606e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800607a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006082:	e021      	b.n	80060c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006096:	4b37      	ldr	r3, [pc, #220]	; (8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800617c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80060c8:	4b2a      	ldr	r3, [pc, #168]	; (8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	0a5b      	lsrs	r3, r3, #9
 80060ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ee:	ee17 2a90 	vmov	r2, s15
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80060f6:	4b1f      	ldr	r3, [pc, #124]	; (8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	0c1b      	lsrs	r3, r3, #16
 80060fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006100:	ee07 3a90 	vmov	s15, r3
 8006104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006108:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800610c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006110:	edd7 6a07 	vldr	s13, [r7, #28]
 8006114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800611c:	ee17 2a90 	vmov	r2, s15
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006124:	4b13      	ldr	r3, [pc, #76]	; (8006174 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006128:	0e1b      	lsrs	r3, r3, #24
 800612a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800613a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800613e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800614a:	ee17 2a90 	vmov	r2, s15
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006152:	e008      	b.n	8006166 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	609a      	str	r2, [r3, #8]
}
 8006166:	bf00      	nop
 8006168:	3724      	adds	r7, #36	; 0x24
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	58024400 	.word	0x58024400
 8006178:	03d09000 	.word	0x03d09000
 800617c:	46000000 	.word	0x46000000
 8006180:	4c742400 	.word	0x4c742400
 8006184:	4a742400 	.word	0x4a742400
 8006188:	4bbebc20 	.word	0x4bbebc20

0800618c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800619a:	4b53      	ldr	r3, [pc, #332]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	f003 0303 	and.w	r3, r3, #3
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	d101      	bne.n	80061aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e099      	b.n	80062de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80061aa:	4b4f      	ldr	r3, [pc, #316]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a4e      	ldr	r2, [pc, #312]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 80061b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b6:	f7fc ff17 	bl	8002fe8 <HAL_GetTick>
 80061ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061bc:	e008      	b.n	80061d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80061be:	f7fc ff13 	bl	8002fe8 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e086      	b.n	80062de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061d0:	4b45      	ldr	r3, [pc, #276]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1f0      	bne.n	80061be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80061dc:	4b42      	ldr	r3, [pc, #264]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 80061de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	031b      	lsls	r3, r3, #12
 80061ea:	493f      	ldr	r1, [pc, #252]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	628b      	str	r3, [r1, #40]	; 0x28
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	3b01      	subs	r3, #1
 8006200:	025b      	lsls	r3, r3, #9
 8006202:	b29b      	uxth	r3, r3
 8006204:	431a      	orrs	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	3b01      	subs	r3, #1
 800620c:	041b      	lsls	r3, r3, #16
 800620e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	3b01      	subs	r3, #1
 800621a:	061b      	lsls	r3, r3, #24
 800621c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006220:	4931      	ldr	r1, [pc, #196]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 8006222:	4313      	orrs	r3, r2
 8006224:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006226:	4b30      	ldr	r3, [pc, #192]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 8006228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	492d      	ldr	r1, [pc, #180]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 8006234:	4313      	orrs	r3, r2
 8006236:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006238:	4b2b      	ldr	r3, [pc, #172]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	f023 0220 	bic.w	r2, r3, #32
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	4928      	ldr	r1, [pc, #160]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 8006246:	4313      	orrs	r3, r2
 8006248:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800624a:	4b27      	ldr	r3, [pc, #156]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 800624c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624e:	4a26      	ldr	r2, [pc, #152]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 8006250:	f023 0310 	bic.w	r3, r3, #16
 8006254:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006256:	4b24      	ldr	r3, [pc, #144]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 8006258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800625a:	4b24      	ldr	r3, [pc, #144]	; (80062ec <RCCEx_PLL2_Config+0x160>)
 800625c:	4013      	ands	r3, r2
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	69d2      	ldr	r2, [r2, #28]
 8006262:	00d2      	lsls	r2, r2, #3
 8006264:	4920      	ldr	r1, [pc, #128]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 8006266:	4313      	orrs	r3, r2
 8006268:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800626a:	4b1f      	ldr	r3, [pc, #124]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 800626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626e:	4a1e      	ldr	r2, [pc, #120]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 8006270:	f043 0310 	orr.w	r3, r3, #16
 8006274:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d106      	bne.n	800628a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800627c:	4b1a      	ldr	r3, [pc, #104]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	4a19      	ldr	r2, [pc, #100]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 8006282:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006286:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006288:	e00f      	b.n	80062aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d106      	bne.n	800629e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006290:	4b15      	ldr	r3, [pc, #84]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006294:	4a14      	ldr	r2, [pc, #80]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 8006296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800629a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800629c:	e005      	b.n	80062aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800629e:	4b12      	ldr	r3, [pc, #72]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 80062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a2:	4a11      	ldr	r2, [pc, #68]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 80062a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80062aa:	4b0f      	ldr	r3, [pc, #60]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a0e      	ldr	r2, [pc, #56]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 80062b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062b6:	f7fc fe97 	bl	8002fe8 <HAL_GetTick>
 80062ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062bc:	e008      	b.n	80062d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80062be:	f7fc fe93 	bl	8002fe8 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d901      	bls.n	80062d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e006      	b.n	80062de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062d0:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <RCCEx_PLL2_Config+0x15c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0f0      	beq.n	80062be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	58024400 	.word	0x58024400
 80062ec:	ffff0007 	.word	0xffff0007

080062f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062fe:	4b53      	ldr	r3, [pc, #332]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 8006300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006302:	f003 0303 	and.w	r3, r3, #3
 8006306:	2b03      	cmp	r3, #3
 8006308:	d101      	bne.n	800630e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e099      	b.n	8006442 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800630e:	4b4f      	ldr	r3, [pc, #316]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a4e      	ldr	r2, [pc, #312]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 8006314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800631a:	f7fc fe65 	bl	8002fe8 <HAL_GetTick>
 800631e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006320:	e008      	b.n	8006334 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006322:	f7fc fe61 	bl	8002fe8 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d901      	bls.n	8006334 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e086      	b.n	8006442 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006334:	4b45      	ldr	r3, [pc, #276]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1f0      	bne.n	8006322 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006340:	4b42      	ldr	r3, [pc, #264]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 8006342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006344:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	051b      	lsls	r3, r3, #20
 800634e:	493f      	ldr	r1, [pc, #252]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 8006350:	4313      	orrs	r3, r2
 8006352:	628b      	str	r3, [r1, #40]	; 0x28
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	3b01      	subs	r3, #1
 800635a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	3b01      	subs	r3, #1
 8006364:	025b      	lsls	r3, r3, #9
 8006366:	b29b      	uxth	r3, r3
 8006368:	431a      	orrs	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	3b01      	subs	r3, #1
 8006370:	041b      	lsls	r3, r3, #16
 8006372:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	3b01      	subs	r3, #1
 800637e:	061b      	lsls	r3, r3, #24
 8006380:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006384:	4931      	ldr	r1, [pc, #196]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 8006386:	4313      	orrs	r3, r2
 8006388:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800638a:	4b30      	ldr	r3, [pc, #192]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	492d      	ldr	r1, [pc, #180]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 8006398:	4313      	orrs	r3, r2
 800639a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800639c:	4b2b      	ldr	r3, [pc, #172]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	4928      	ldr	r1, [pc, #160]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80063ae:	4b27      	ldr	r3, [pc, #156]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	4a26      	ldr	r2, [pc, #152]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 80063b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80063ba:	4b24      	ldr	r3, [pc, #144]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 80063bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063be:	4b24      	ldr	r3, [pc, #144]	; (8006450 <RCCEx_PLL3_Config+0x160>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	69d2      	ldr	r2, [r2, #28]
 80063c6:	00d2      	lsls	r2, r2, #3
 80063c8:	4920      	ldr	r1, [pc, #128]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80063ce:	4b1f      	ldr	r3, [pc, #124]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 80063d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d2:	4a1e      	ldr	r2, [pc, #120]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 80063d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d106      	bne.n	80063ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80063e0:	4b1a      	ldr	r3, [pc, #104]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	4a19      	ldr	r2, [pc, #100]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 80063e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80063ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063ec:	e00f      	b.n	800640e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d106      	bne.n	8006402 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80063f4:	4b15      	ldr	r3, [pc, #84]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	4a14      	ldr	r2, [pc, #80]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 80063fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80063fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006400:	e005      	b.n	800640e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006402:	4b12      	ldr	r3, [pc, #72]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	4a11      	ldr	r2, [pc, #68]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 8006408:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800640c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800640e:	4b0f      	ldr	r3, [pc, #60]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a0e      	ldr	r2, [pc, #56]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 8006414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800641a:	f7fc fde5 	bl	8002fe8 <HAL_GetTick>
 800641e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006420:	e008      	b.n	8006434 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006422:	f7fc fde1 	bl	8002fe8 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d901      	bls.n	8006434 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e006      	b.n	8006442 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006434:	4b05      	ldr	r3, [pc, #20]	; (800644c <RCCEx_PLL3_Config+0x15c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d0f0      	beq.n	8006422 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006440:	7bfb      	ldrb	r3, [r7, #15]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	58024400 	.word	0x58024400
 8006450:	ffff0007 	.word	0xffff0007

08006454 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e0f1      	b.n	800664a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a78      	ldr	r2, [pc, #480]	; (8006654 <HAL_SPI_Init+0x200>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00f      	beq.n	8006496 <HAL_SPI_Init+0x42>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a77      	ldr	r2, [pc, #476]	; (8006658 <HAL_SPI_Init+0x204>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00a      	beq.n	8006496 <HAL_SPI_Init+0x42>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a75      	ldr	r2, [pc, #468]	; (800665c <HAL_SPI_Init+0x208>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d005      	beq.n	8006496 <HAL_SPI_Init+0x42>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	2b0f      	cmp	r3, #15
 8006490:	d901      	bls.n	8006496 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e0d9      	b.n	800664a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 ff66 	bl	8007368 <SPI_GetPacketSize>
 800649c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a6c      	ldr	r2, [pc, #432]	; (8006654 <HAL_SPI_Init+0x200>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00c      	beq.n	80064c2 <HAL_SPI_Init+0x6e>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a6a      	ldr	r2, [pc, #424]	; (8006658 <HAL_SPI_Init+0x204>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d007      	beq.n	80064c2 <HAL_SPI_Init+0x6e>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a69      	ldr	r2, [pc, #420]	; (800665c <HAL_SPI_Init+0x208>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d002      	beq.n	80064c2 <HAL_SPI_Init+0x6e>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b08      	cmp	r3, #8
 80064c0:	d811      	bhi.n	80064e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80064c6:	4a63      	ldr	r2, [pc, #396]	; (8006654 <HAL_SPI_Init+0x200>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d009      	beq.n	80064e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a61      	ldr	r2, [pc, #388]	; (8006658 <HAL_SPI_Init+0x204>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d004      	beq.n	80064e0 <HAL_SPI_Init+0x8c>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a60      	ldr	r2, [pc, #384]	; (800665c <HAL_SPI_Init+0x208>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d104      	bne.n	80064ea <HAL_SPI_Init+0x96>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b10      	cmp	r3, #16
 80064e4:	d901      	bls.n	80064ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e0af      	b.n	800664a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d106      	bne.n	8006504 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fc fa02 	bl	8002908 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0201 	bic.w	r2, r2, #1
 800651a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006526:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006530:	d119      	bne.n	8006566 <HAL_SPI_Init+0x112>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800653a:	d103      	bne.n	8006544 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006540:	2b00      	cmp	r3, #0
 8006542:	d008      	beq.n	8006556 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10c      	bne.n	8006566 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006550:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006554:	d107      	bne.n	8006566 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006564:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	69da      	ldr	r2, [r3, #28]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656e:	431a      	orrs	r2, r3
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006578:	ea42 0103 	orr.w	r1, r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	431a      	orrs	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	431a      	orrs	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	431a      	orrs	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065c6:	ea42 0103 	orr.w	r1, r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d113      	bne.n	8006606 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006604:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0201 	bic.w	r2, r2, #1
 8006614:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00a      	beq.n	8006638 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	40013000 	.word	0x40013000
 8006658:	40003800 	.word	0x40003800
 800665c:	40003c00 	.word	0x40003c00

08006660 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08a      	sub	sp, #40	; 0x28
 8006664:	af02      	add	r7, sp, #8
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	603b      	str	r3, [r7, #0]
 800666c:	4613      	mov	r3, r2
 800666e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3320      	adds	r3, #32
 8006676:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006682:	2b01      	cmp	r3, #1
 8006684:	d101      	bne.n	800668a <HAL_SPI_Transmit+0x2a>
 8006686:	2302      	movs	r3, #2
 8006688:	e1d7      	b.n	8006a3a <HAL_SPI_Transmit+0x3da>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006692:	f7fc fca9 	bl	8002fe8 <HAL_GetTick>
 8006696:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d007      	beq.n	80066b4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80066a4:	2302      	movs	r3, #2
 80066a6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80066b0:	7efb      	ldrb	r3, [r7, #27]
 80066b2:	e1c2      	b.n	8006a3a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <HAL_SPI_Transmit+0x60>
 80066ba:	88fb      	ldrh	r3, [r7, #6]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d107      	bne.n	80066d0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80066cc:	7efb      	ldrb	r3, [r7, #27]
 80066ce:	e1b4      	b.n	8006a3a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2203      	movs	r2, #3
 80066d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	88fa      	ldrh	r2, [r7, #6]
 80066ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	88fa      	ldrh	r2, [r7, #6]
 80066f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006720:	d107      	bne.n	8006732 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006730:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	4b96      	ldr	r3, [pc, #600]	; (8006994 <HAL_SPI_Transmit+0x334>)
 800673a:	4013      	ands	r3, r2
 800673c:	88f9      	ldrh	r1, [r7, #6]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	6812      	ldr	r2, [r2, #0]
 8006742:	430b      	orrs	r3, r1
 8006744:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f042 0201 	orr.w	r2, r2, #1
 8006754:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800675e:	d107      	bne.n	8006770 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800676e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	2b0f      	cmp	r3, #15
 8006776:	d947      	bls.n	8006808 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006778:	e03f      	b.n	80067fa <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b02      	cmp	r3, #2
 8006786:	d114      	bne.n	80067b2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6812      	ldr	r2, [r2, #0]
 8006792:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006798:	1d1a      	adds	r2, r3, #4
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80067b0:	e023      	b.n	80067fa <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067b2:	f7fc fc19 	bl	8002fe8 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d803      	bhi.n	80067ca <HAL_SPI_Transmit+0x16a>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c8:	d102      	bne.n	80067d0 <HAL_SPI_Transmit+0x170>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d114      	bne.n	80067fa <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 fcfb 	bl	80071cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e11f      	b.n	8006a3a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006800:	b29b      	uxth	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1b9      	bne.n	800677a <HAL_SPI_Transmit+0x11a>
 8006806:	e0f2      	b.n	80069ee <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	2b07      	cmp	r3, #7
 800680e:	f240 80e7 	bls.w	80069e0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006812:	e05d      	b.n	80068d0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b02      	cmp	r3, #2
 8006820:	d132      	bne.n	8006888 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006828:	b29b      	uxth	r3, r3
 800682a:	2b01      	cmp	r3, #1
 800682c:	d918      	bls.n	8006860 <HAL_SPI_Transmit+0x200>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d014      	beq.n	8006860 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6812      	ldr	r2, [r2, #0]
 8006840:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006846:	1d1a      	adds	r2, r3, #4
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006852:	b29b      	uxth	r3, r3
 8006854:	3b02      	subs	r3, #2
 8006856:	b29a      	uxth	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800685e:	e037      	b.n	80068d0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006864:	881a      	ldrh	r2, [r3, #0]
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800686e:	1c9a      	adds	r2, r3, #2
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006886:	e023      	b.n	80068d0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006888:	f7fc fbae 	bl	8002fe8 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	429a      	cmp	r2, r3
 8006896:	d803      	bhi.n	80068a0 <HAL_SPI_Transmit+0x240>
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689e:	d102      	bne.n	80068a6 <HAL_SPI_Transmit+0x246>
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d114      	bne.n	80068d0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f000 fc90 	bl	80071cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e0b4      	b.n	8006a3a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d19b      	bne.n	8006814 <HAL_SPI_Transmit+0x1b4>
 80068dc:	e087      	b.n	80069ee <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d155      	bne.n	8006998 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d918      	bls.n	800692a <HAL_SPI_Transmit+0x2ca>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fc:	2b40      	cmp	r3, #64	; 0x40
 80068fe:	d914      	bls.n	800692a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6812      	ldr	r2, [r2, #0]
 800690a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006910:	1d1a      	adds	r2, r3, #4
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800691c:	b29b      	uxth	r3, r3
 800691e:	3b04      	subs	r3, #4
 8006920:	b29a      	uxth	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006928:	e05a      	b.n	80069e0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b01      	cmp	r3, #1
 8006934:	d917      	bls.n	8006966 <HAL_SPI_Transmit+0x306>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d013      	beq.n	8006966 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006942:	881a      	ldrh	r2, [r3, #0]
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694c:	1c9a      	adds	r2, r3, #2
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006958:	b29b      	uxth	r3, r3
 800695a:	3b02      	subs	r3, #2
 800695c:	b29a      	uxth	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006964:	e03c      	b.n	80069e0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3320      	adds	r3, #32
 8006970:	7812      	ldrb	r2, [r2, #0]
 8006972:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006984:	b29b      	uxth	r3, r3
 8006986:	3b01      	subs	r3, #1
 8006988:	b29a      	uxth	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006990:	e026      	b.n	80069e0 <HAL_SPI_Transmit+0x380>
 8006992:	bf00      	nop
 8006994:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006998:	f7fc fb26 	bl	8002fe8 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d803      	bhi.n	80069b0 <HAL_SPI_Transmit+0x350>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ae:	d102      	bne.n	80069b6 <HAL_SPI_Transmit+0x356>
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d114      	bne.n	80069e0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 fc08 	bl	80071cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e02c      	b.n	8006a3a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f47f af78 	bne.w	80068de <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2200      	movs	r2, #0
 80069f6:	2108      	movs	r1, #8
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 fc87 	bl	800730c <SPI_WaitOnFlagUntilTimeout>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d007      	beq.n	8006a14 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a0a:	f043 0220 	orr.w	r2, r3, #32
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 fbd9 	bl	80071cc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e000      	b.n	8006a3a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8006a38:	7efb      	ldrb	r3, [r7, #27]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3720      	adds	r7, #32
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop

08006a44 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b08a      	sub	sp, #40	; 0x28
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	603b      	str	r3, [r7, #0]
 8006a50:	4613      	mov	r3, r2
 8006a52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3330      	adds	r3, #48	; 0x30
 8006a5e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a68:	d112      	bne.n	8006a90 <HAL_SPI_Receive+0x4c>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10e      	bne.n	8006a90 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2204      	movs	r2, #4
 8006a76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a7a:	88fa      	ldrh	r2, [r7, #6]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	4613      	mov	r3, r2
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 f978 	bl	8006d7c <HAL_SPI_TransmitReceive>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	e16f      	b.n	8006d70 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <HAL_SPI_Receive+0x5a>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e168      	b.n	8006d70 <HAL_SPI_Receive+0x32c>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006aa6:	f7fc fa9f 	bl	8002fe8 <HAL_GetTick>
 8006aaa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d007      	beq.n	8006ac8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8006ab8:	2302      	movs	r3, #2
 8006aba:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006ac4:	7ffb      	ldrb	r3, [r7, #31]
 8006ac6:	e153      	b.n	8006d70 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d002      	beq.n	8006ad4 <HAL_SPI_Receive+0x90>
 8006ace:	88fb      	ldrh	r3, [r7, #6]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d107      	bne.n	8006ae4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006ae0:	7ffb      	ldrb	r3, [r7, #31]
 8006ae2:	e145      	b.n	8006d70 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2204      	movs	r2, #4
 8006ae8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	88fa      	ldrh	r2, [r7, #6]
 8006afe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	88fa      	ldrh	r2, [r7, #6]
 8006b06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006b34:	d107      	bne.n	8006b46 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b44:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	4b8a      	ldr	r3, [pc, #552]	; (8006d78 <HAL_SPI_Receive+0x334>)
 8006b4e:	4013      	ands	r3, r2
 8006b50:	88f9      	ldrh	r1, [r7, #6]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	6812      	ldr	r2, [r2, #0]
 8006b56:	430b      	orrs	r3, r1
 8006b58:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f042 0201 	orr.w	r2, r2, #1
 8006b68:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b72:	d107      	bne.n	8006b84 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	2b0f      	cmp	r3, #15
 8006b8a:	d948      	bls.n	8006c1e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006b8c:	e040      	b.n	8006c10 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	695a      	ldr	r2, [r3, #20]
 8006b94:	f248 0308 	movw	r3, #32776	; 0x8008
 8006b98:	4013      	ands	r3, r2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d014      	beq.n	8006bc8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ba6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006ba8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bae:	1d1a      	adds	r2, r3, #4
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006bc6:	e023      	b.n	8006c10 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bc8:	f7fc fa0e 	bl	8002fe8 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d803      	bhi.n	8006be0 <HAL_SPI_Receive+0x19c>
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bde:	d102      	bne.n	8006be6 <HAL_SPI_Receive+0x1a2>
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d114      	bne.n	8006c10 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 faf0 	bl	80071cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e0af      	b.n	8006d70 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1b8      	bne.n	8006b8e <HAL_SPI_Receive+0x14a>
 8006c1c:	e095      	b.n	8006d4a <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	2b07      	cmp	r3, #7
 8006c24:	f240 808b 	bls.w	8006d3e <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006c28:	e03f      	b.n	8006caa <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d114      	bne.n	8006c62 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	8812      	ldrh	r2, [r2, #0]
 8006c40:	b292      	uxth	r2, r2
 8006c42:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c48:	1c9a      	adds	r2, r3, #2
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006c60:	e023      	b.n	8006caa <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c62:	f7fc f9c1 	bl	8002fe8 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d803      	bhi.n	8006c7a <HAL_SPI_Receive+0x236>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c78:	d102      	bne.n	8006c80 <HAL_SPI_Receive+0x23c>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d114      	bne.n	8006caa <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 faa3 	bl	80071cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e062      	b.n	8006d70 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1b9      	bne.n	8006c2a <HAL_SPI_Receive+0x1e6>
 8006cb6:	e048      	b.n	8006d4a <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d117      	bne.n	8006cf6 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cd2:	7812      	ldrb	r2, [r2, #0]
 8006cd4:	b2d2      	uxtb	r2, r2
 8006cd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006cf4:	e023      	b.n	8006d3e <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cf6:	f7fc f977 	bl	8002fe8 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d803      	bhi.n	8006d0e <HAL_SPI_Receive+0x2ca>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0c:	d102      	bne.n	8006d14 <HAL_SPI_Receive+0x2d0>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d114      	bne.n	8006d3e <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fa59 	bl	80071cc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e018      	b.n	8006d70 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1b6      	bne.n	8006cb8 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 fa3e 	bl	80071cc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e000      	b.n	8006d70 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8006d6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3720      	adds	r7, #32
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	ffff0000 	.word	0xffff0000

08006d7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08e      	sub	sp, #56	; 0x38
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3320      	adds	r3, #32
 8006d96:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3330      	adds	r3, #48	; 0x30
 8006d9e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <HAL_SPI_TransmitReceive+0x32>
 8006daa:	2302      	movs	r3, #2
 8006dac:	e209      	b.n	80071c2 <HAL_SPI_TransmitReceive+0x446>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006db6:	f7fc f917 	bl	8002fe8 <HAL_GetTick>
 8006dba:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006dbc:	887b      	ldrh	r3, [r7, #2]
 8006dbe:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006dc0:	887b      	ldrh	r3, [r7, #2]
 8006dc2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006dca:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006dd2:	7efb      	ldrb	r3, [r7, #27]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d014      	beq.n	8006e02 <HAL_SPI_TransmitReceive+0x86>
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dde:	d106      	bne.n	8006dee <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d102      	bne.n	8006dee <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006de8:	7efb      	ldrb	r3, [r7, #27]
 8006dea:	2b04      	cmp	r3, #4
 8006dec:	d009      	beq.n	8006e02 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8006dee:	2302      	movs	r3, #2
 8006df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006dfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e00:	e1df      	b.n	80071c2 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d005      	beq.n	8006e14 <HAL_SPI_TransmitReceive+0x98>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <HAL_SPI_TransmitReceive+0x98>
 8006e0e:	887b      	ldrh	r3, [r7, #2]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d109      	bne.n	8006e28 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006e22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e26:	e1cc      	b.n	80071c2 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b04      	cmp	r3, #4
 8006e32:	d003      	beq.n	8006e3c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2205      	movs	r2, #5
 8006e38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	887a      	ldrh	r2, [r7, #2]
 8006e4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	887a      	ldrh	r2, [r7, #2]
 8006e56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	887a      	ldrh	r2, [r7, #2]
 8006e64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	887a      	ldrh	r2, [r7, #2]
 8006e6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	4b82      	ldr	r3, [pc, #520]	; (800708c <HAL_SPI_TransmitReceive+0x310>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	8879      	ldrh	r1, [r7, #2]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	6812      	ldr	r2, [r2, #0]
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ea8:	d107      	bne.n	8006eba <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	2b0f      	cmp	r3, #15
 8006ec0:	d970      	bls.n	8006fa4 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006ec2:	e068      	b.n	8006f96 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d11a      	bne.n	8006f08 <HAL_SPI_TransmitReceive+0x18c>
 8006ed2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d017      	beq.n	8006f08 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6812      	ldr	r2, [r2, #0]
 8006ee2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee8:	1d1a      	adds	r2, r3, #4
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006f06:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695a      	ldr	r2, [r3, #20]
 8006f0e:	f248 0308 	movw	r3, #32776	; 0x8008
 8006f12:	4013      	ands	r3, r2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d01a      	beq.n	8006f4e <HAL_SPI_TransmitReceive+0x1d2>
 8006f18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d017      	beq.n	8006f4e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006f28:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f2e:	1d1a      	adds	r2, r3, #4
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f4c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f4e:	f7fc f84b 	bl	8002fe8 <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d803      	bhi.n	8006f66 <HAL_SPI_TransmitReceive+0x1ea>
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f64:	d102      	bne.n	8006f6c <HAL_SPI_TransmitReceive+0x1f0>
 8006f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d114      	bne.n	8006f96 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 f92d 	bl	80071cc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e115      	b.n	80071c2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006f96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d193      	bne.n	8006ec4 <HAL_SPI_TransmitReceive+0x148>
 8006f9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d190      	bne.n	8006ec4 <HAL_SPI_TransmitReceive+0x148>
 8006fa2:	e0e7      	b.n	8007174 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	2b07      	cmp	r3, #7
 8006faa:	f240 80dd 	bls.w	8007168 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006fae:	e066      	b.n	800707e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d119      	bne.n	8006ff2 <HAL_SPI_TransmitReceive+0x276>
 8006fbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d016      	beq.n	8006ff2 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc8:	881a      	ldrh	r2, [r3, #0]
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd2:	1c9a      	adds	r2, r3, #2
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ff0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d11a      	bne.n	8007036 <HAL_SPI_TransmitReceive+0x2ba>
 8007000:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007002:	2b00      	cmp	r3, #0
 8007004:	d017      	beq.n	8007036 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800700a:	6a3a      	ldr	r2, [r7, #32]
 800700c:	8812      	ldrh	r2, [r2, #0]
 800700e:	b292      	uxth	r2, r2
 8007010:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007016:	1c9a      	adds	r2, r3, #2
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007022:	b29b      	uxth	r3, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	b29a      	uxth	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007034:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007036:	f7fb ffd7 	bl	8002fe8 <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007042:	429a      	cmp	r2, r3
 8007044:	d803      	bhi.n	800704e <HAL_SPI_TransmitReceive+0x2d2>
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704c:	d102      	bne.n	8007054 <HAL_SPI_TransmitReceive+0x2d8>
 800704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007050:	2b00      	cmp	r3, #0
 8007052:	d114      	bne.n	800707e <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 f8b9 	bl	80071cc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007068:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e0a1      	b.n	80071c2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800707e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007080:	2b00      	cmp	r3, #0
 8007082:	d195      	bne.n	8006fb0 <HAL_SPI_TransmitReceive+0x234>
 8007084:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007086:	2b00      	cmp	r3, #0
 8007088:	d192      	bne.n	8006fb0 <HAL_SPI_TransmitReceive+0x234>
 800708a:	e073      	b.n	8007174 <HAL_SPI_TransmitReceive+0x3f8>
 800708c:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b02      	cmp	r3, #2
 800709c:	d11b      	bne.n	80070d6 <HAL_SPI_TransmitReceive+0x35a>
 800709e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d018      	beq.n	80070d6 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3320      	adds	r3, #32
 80070ae:	7812      	ldrb	r2, [r2, #0]
 80070b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	3b01      	subs	r3, #1
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80070d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d11d      	bne.n	8007120 <HAL_SPI_TransmitReceive+0x3a4>
 80070e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d01a      	beq.n	8007120 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070f6:	7812      	ldrb	r2, [r2, #0]
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800710c:	b29b      	uxth	r3, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	b29a      	uxth	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800711e:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007120:	f7fb ff62 	bl	8002fe8 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800712c:	429a      	cmp	r2, r3
 800712e:	d803      	bhi.n	8007138 <HAL_SPI_TransmitReceive+0x3bc>
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007136:	d102      	bne.n	800713e <HAL_SPI_TransmitReceive+0x3c2>
 8007138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713a:	2b00      	cmp	r3, #0
 800713c:	d114      	bne.n	8007168 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 f844 	bl	80071cc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007152:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e02c      	b.n	80071c2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007168:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800716a:	2b00      	cmp	r3, #0
 800716c:	d190      	bne.n	8007090 <HAL_SPI_TransmitReceive+0x314>
 800716e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007170:	2b00      	cmp	r3, #0
 8007172:	d18d      	bne.n	8007090 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	2200      	movs	r2, #0
 800717c:	2108      	movs	r1, #8
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 f8c4 	bl	800730c <SPI_WaitOnFlagUntilTimeout>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d007      	beq.n	800719a <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007190:	f043 0220 	orr.w	r2, r3, #32
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 f816 	bl	80071cc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e001      	b.n	80071c2 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 80071be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3730      	adds	r7, #48	; 0x30
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop

080071cc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	699a      	ldr	r2, [r3, #24]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0208 	orr.w	r2, r2, #8
 80071ea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	699a      	ldr	r2, [r3, #24]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f042 0210 	orr.w	r2, r2, #16
 80071fa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0201 	bic.w	r2, r2, #1
 800720a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6919      	ldr	r1, [r3, #16]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	4b3c      	ldr	r3, [pc, #240]	; (8007308 <SPI_CloseTransfer+0x13c>)
 8007218:	400b      	ands	r3, r1
 800721a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689a      	ldr	r2, [r3, #8]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800722a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b04      	cmp	r3, #4
 8007236:	d014      	beq.n	8007262 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f003 0320 	and.w	r3, r3, #32
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00f      	beq.n	8007262 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007248:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	699a      	ldr	r2, [r3, #24]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f042 0220 	orr.w	r2, r2, #32
 8007260:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b03      	cmp	r3, #3
 800726c:	d014      	beq.n	8007298 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00f      	beq.n	8007298 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800727e:	f043 0204 	orr.w	r2, r3, #4
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	699a      	ldr	r2, [r3, #24]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007296:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00f      	beq.n	80072c2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072a8:	f043 0201 	orr.w	r2, r3, #1
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	699a      	ldr	r2, [r3, #24]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072c0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00f      	beq.n	80072ec <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072d2:	f043 0208 	orr.w	r2, r3, #8
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	699a      	ldr	r2, [r3, #24]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072ea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80072fc:	bf00      	nop
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	fffffc90 	.word	0xfffffc90

0800730c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	603b      	str	r3, [r7, #0]
 8007318:	4613      	mov	r3, r2
 800731a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800731c:	e010      	b.n	8007340 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800731e:	f7fb fe63 	bl	8002fe8 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	429a      	cmp	r2, r3
 800732c:	d803      	bhi.n	8007336 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007334:	d102      	bne.n	800733c <SPI_WaitOnFlagUntilTimeout+0x30>
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e00f      	b.n	8007360 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	695a      	ldr	r2, [r3, #20]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	4013      	ands	r3, r2
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	429a      	cmp	r2, r3
 800734e:	bf0c      	ite	eq
 8007350:	2301      	moveq	r3, #1
 8007352:	2300      	movne	r3, #0
 8007354:	b2db      	uxtb	r3, r3
 8007356:	461a      	mov	r2, r3
 8007358:	79fb      	ldrb	r3, [r7, #7]
 800735a:	429a      	cmp	r2, r3
 800735c:	d0df      	beq.n	800731e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007374:	095b      	lsrs	r3, r3, #5
 8007376:	3301      	adds	r3, #1
 8007378:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	3301      	adds	r3, #1
 8007380:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	3307      	adds	r3, #7
 8007386:	08db      	lsrs	r3, r3, #3
 8007388:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007392:	4618      	mov	r0, r3
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b082      	sub	sp, #8
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e049      	b.n	8007444 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d106      	bne.n	80073ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7fb fb29 	bl	8002a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2202      	movs	r2, #2
 80073ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	3304      	adds	r3, #4
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f000 fd71 	bl	8007ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b01      	cmp	r3, #1
 800745e:	d001      	beq.n	8007464 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e054      	b.n	800750e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0201 	orr.w	r2, r2, #1
 800747a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a26      	ldr	r2, [pc, #152]	; (800751c <HAL_TIM_Base_Start_IT+0xd0>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d022      	beq.n	80074cc <HAL_TIM_Base_Start_IT+0x80>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800748e:	d01d      	beq.n	80074cc <HAL_TIM_Base_Start_IT+0x80>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a22      	ldr	r2, [pc, #136]	; (8007520 <HAL_TIM_Base_Start_IT+0xd4>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d018      	beq.n	80074cc <HAL_TIM_Base_Start_IT+0x80>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a21      	ldr	r2, [pc, #132]	; (8007524 <HAL_TIM_Base_Start_IT+0xd8>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d013      	beq.n	80074cc <HAL_TIM_Base_Start_IT+0x80>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a1f      	ldr	r2, [pc, #124]	; (8007528 <HAL_TIM_Base_Start_IT+0xdc>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d00e      	beq.n	80074cc <HAL_TIM_Base_Start_IT+0x80>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a1e      	ldr	r2, [pc, #120]	; (800752c <HAL_TIM_Base_Start_IT+0xe0>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d009      	beq.n	80074cc <HAL_TIM_Base_Start_IT+0x80>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a1c      	ldr	r2, [pc, #112]	; (8007530 <HAL_TIM_Base_Start_IT+0xe4>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d004      	beq.n	80074cc <HAL_TIM_Base_Start_IT+0x80>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a1b      	ldr	r2, [pc, #108]	; (8007534 <HAL_TIM_Base_Start_IT+0xe8>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d115      	bne.n	80074f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689a      	ldr	r2, [r3, #8]
 80074d2:	4b19      	ldr	r3, [pc, #100]	; (8007538 <HAL_TIM_Base_Start_IT+0xec>)
 80074d4:	4013      	ands	r3, r2
 80074d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2b06      	cmp	r3, #6
 80074dc:	d015      	beq.n	800750a <HAL_TIM_Base_Start_IT+0xbe>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074e4:	d011      	beq.n	800750a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f042 0201 	orr.w	r2, r2, #1
 80074f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f6:	e008      	b.n	800750a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f042 0201 	orr.w	r2, r2, #1
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	e000      	b.n	800750c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800750a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	40010000 	.word	0x40010000
 8007520:	40000400 	.word	0x40000400
 8007524:	40000800 	.word	0x40000800
 8007528:	40000c00 	.word	0x40000c00
 800752c:	40010400 	.word	0x40010400
 8007530:	40001800 	.word	0x40001800
 8007534:	40014000 	.word	0x40014000
 8007538:	00010007 	.word	0x00010007

0800753c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e049      	b.n	80075e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d106      	bne.n	8007568 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f841 	bl	80075ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3304      	adds	r3, #4
 8007578:	4619      	mov	r1, r3
 800757a:	4610      	mov	r0, r2
 800757c:	f000 fca2 	bl	8007ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80075f2:	bf00      	nop
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
	...

08007600 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d109      	bne.n	8007624 <HAL_TIM_PWM_Start+0x24>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b01      	cmp	r3, #1
 800761a:	bf14      	ite	ne
 800761c:	2301      	movne	r3, #1
 800761e:	2300      	moveq	r3, #0
 8007620:	b2db      	uxtb	r3, r3
 8007622:	e03c      	b.n	800769e <HAL_TIM_PWM_Start+0x9e>
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	2b04      	cmp	r3, #4
 8007628:	d109      	bne.n	800763e <HAL_TIM_PWM_Start+0x3e>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b01      	cmp	r3, #1
 8007634:	bf14      	ite	ne
 8007636:	2301      	movne	r3, #1
 8007638:	2300      	moveq	r3, #0
 800763a:	b2db      	uxtb	r3, r3
 800763c:	e02f      	b.n	800769e <HAL_TIM_PWM_Start+0x9e>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b08      	cmp	r3, #8
 8007642:	d109      	bne.n	8007658 <HAL_TIM_PWM_Start+0x58>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b01      	cmp	r3, #1
 800764e:	bf14      	ite	ne
 8007650:	2301      	movne	r3, #1
 8007652:	2300      	moveq	r3, #0
 8007654:	b2db      	uxtb	r3, r3
 8007656:	e022      	b.n	800769e <HAL_TIM_PWM_Start+0x9e>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2b0c      	cmp	r3, #12
 800765c:	d109      	bne.n	8007672 <HAL_TIM_PWM_Start+0x72>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b01      	cmp	r3, #1
 8007668:	bf14      	ite	ne
 800766a:	2301      	movne	r3, #1
 800766c:	2300      	moveq	r3, #0
 800766e:	b2db      	uxtb	r3, r3
 8007670:	e015      	b.n	800769e <HAL_TIM_PWM_Start+0x9e>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b10      	cmp	r3, #16
 8007676:	d109      	bne.n	800768c <HAL_TIM_PWM_Start+0x8c>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b01      	cmp	r3, #1
 8007682:	bf14      	ite	ne
 8007684:	2301      	movne	r3, #1
 8007686:	2300      	moveq	r3, #0
 8007688:	b2db      	uxtb	r3, r3
 800768a:	e008      	b.n	800769e <HAL_TIM_PWM_Start+0x9e>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b01      	cmp	r3, #1
 8007696:	bf14      	ite	ne
 8007698:	2301      	movne	r3, #1
 800769a:	2300      	moveq	r3, #0
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e0a1      	b.n	80077ea <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d104      	bne.n	80076b6 <HAL_TIM_PWM_Start+0xb6>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076b4:	e023      	b.n	80076fe <HAL_TIM_PWM_Start+0xfe>
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	2b04      	cmp	r3, #4
 80076ba:	d104      	bne.n	80076c6 <HAL_TIM_PWM_Start+0xc6>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2202      	movs	r2, #2
 80076c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076c4:	e01b      	b.n	80076fe <HAL_TIM_PWM_Start+0xfe>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d104      	bne.n	80076d6 <HAL_TIM_PWM_Start+0xd6>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076d4:	e013      	b.n	80076fe <HAL_TIM_PWM_Start+0xfe>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b0c      	cmp	r3, #12
 80076da:	d104      	bne.n	80076e6 <HAL_TIM_PWM_Start+0xe6>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2202      	movs	r2, #2
 80076e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076e4:	e00b      	b.n	80076fe <HAL_TIM_PWM_Start+0xfe>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b10      	cmp	r3, #16
 80076ea:	d104      	bne.n	80076f6 <HAL_TIM_PWM_Start+0xf6>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076f4:	e003      	b.n	80076fe <HAL_TIM_PWM_Start+0xfe>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2202      	movs	r2, #2
 80076fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2201      	movs	r2, #1
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	4618      	mov	r0, r3
 8007708:	f000 ffea 	bl	80086e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a38      	ldr	r2, [pc, #224]	; (80077f4 <HAL_TIM_PWM_Start+0x1f4>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d013      	beq.n	800773e <HAL_TIM_PWM_Start+0x13e>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a37      	ldr	r2, [pc, #220]	; (80077f8 <HAL_TIM_PWM_Start+0x1f8>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d00e      	beq.n	800773e <HAL_TIM_PWM_Start+0x13e>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a35      	ldr	r2, [pc, #212]	; (80077fc <HAL_TIM_PWM_Start+0x1fc>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d009      	beq.n	800773e <HAL_TIM_PWM_Start+0x13e>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a34      	ldr	r2, [pc, #208]	; (8007800 <HAL_TIM_PWM_Start+0x200>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d004      	beq.n	800773e <HAL_TIM_PWM_Start+0x13e>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a32      	ldr	r2, [pc, #200]	; (8007804 <HAL_TIM_PWM_Start+0x204>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d101      	bne.n	8007742 <HAL_TIM_PWM_Start+0x142>
 800773e:	2301      	movs	r3, #1
 8007740:	e000      	b.n	8007744 <HAL_TIM_PWM_Start+0x144>
 8007742:	2300      	movs	r3, #0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d007      	beq.n	8007758 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007756:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a25      	ldr	r2, [pc, #148]	; (80077f4 <HAL_TIM_PWM_Start+0x1f4>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d022      	beq.n	80077a8 <HAL_TIM_PWM_Start+0x1a8>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776a:	d01d      	beq.n	80077a8 <HAL_TIM_PWM_Start+0x1a8>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a25      	ldr	r2, [pc, #148]	; (8007808 <HAL_TIM_PWM_Start+0x208>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d018      	beq.n	80077a8 <HAL_TIM_PWM_Start+0x1a8>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a24      	ldr	r2, [pc, #144]	; (800780c <HAL_TIM_PWM_Start+0x20c>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d013      	beq.n	80077a8 <HAL_TIM_PWM_Start+0x1a8>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a22      	ldr	r2, [pc, #136]	; (8007810 <HAL_TIM_PWM_Start+0x210>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d00e      	beq.n	80077a8 <HAL_TIM_PWM_Start+0x1a8>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a1a      	ldr	r2, [pc, #104]	; (80077f8 <HAL_TIM_PWM_Start+0x1f8>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d009      	beq.n	80077a8 <HAL_TIM_PWM_Start+0x1a8>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1e      	ldr	r2, [pc, #120]	; (8007814 <HAL_TIM_PWM_Start+0x214>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d004      	beq.n	80077a8 <HAL_TIM_PWM_Start+0x1a8>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a16      	ldr	r2, [pc, #88]	; (80077fc <HAL_TIM_PWM_Start+0x1fc>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d115      	bne.n	80077d4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	4b1a      	ldr	r3, [pc, #104]	; (8007818 <HAL_TIM_PWM_Start+0x218>)
 80077b0:	4013      	ands	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b06      	cmp	r3, #6
 80077b8:	d015      	beq.n	80077e6 <HAL_TIM_PWM_Start+0x1e6>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077c0:	d011      	beq.n	80077e6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f042 0201 	orr.w	r2, r2, #1
 80077d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077d2:	e008      	b.n	80077e6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f042 0201 	orr.w	r2, r2, #1
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	e000      	b.n	80077e8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	40010000 	.word	0x40010000
 80077f8:	40010400 	.word	0x40010400
 80077fc:	40014000 	.word	0x40014000
 8007800:	40014400 	.word	0x40014400
 8007804:	40014800 	.word	0x40014800
 8007808:	40000400 	.word	0x40000400
 800780c:	40000800 	.word	0x40000800
 8007810:	40000c00 	.word	0x40000c00
 8007814:	40001800 	.word	0x40001800
 8007818:	00010007 	.word	0x00010007

0800781c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b02      	cmp	r3, #2
 8007830:	d122      	bne.n	8007878 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f003 0302 	and.w	r3, r3, #2
 800783c:	2b02      	cmp	r3, #2
 800783e:	d11b      	bne.n	8007878 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f06f 0202 	mvn.w	r2, #2
 8007848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	f003 0303 	and.w	r3, r3, #3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fb12 	bl	8007e88 <HAL_TIM_IC_CaptureCallback>
 8007864:	e005      	b.n	8007872 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fb04 	bl	8007e74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fb15 	bl	8007e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f003 0304 	and.w	r3, r3, #4
 8007882:	2b04      	cmp	r3, #4
 8007884:	d122      	bne.n	80078cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b04      	cmp	r3, #4
 8007892:	d11b      	bne.n	80078cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f06f 0204 	mvn.w	r2, #4
 800789c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2202      	movs	r2, #2
 80078a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fae8 	bl	8007e88 <HAL_TIM_IC_CaptureCallback>
 80078b8:	e005      	b.n	80078c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fada 	bl	8007e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 faeb 	bl	8007e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	f003 0308 	and.w	r3, r3, #8
 80078d6:	2b08      	cmp	r3, #8
 80078d8:	d122      	bne.n	8007920 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f003 0308 	and.w	r3, r3, #8
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d11b      	bne.n	8007920 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f06f 0208 	mvn.w	r2, #8
 80078f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2204      	movs	r2, #4
 80078f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fabe 	bl	8007e88 <HAL_TIM_IC_CaptureCallback>
 800790c:	e005      	b.n	800791a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fab0 	bl	8007e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fac1 	bl	8007e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	f003 0310 	and.w	r3, r3, #16
 800792a:	2b10      	cmp	r3, #16
 800792c:	d122      	bne.n	8007974 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f003 0310 	and.w	r3, r3, #16
 8007938:	2b10      	cmp	r3, #16
 800793a:	d11b      	bne.n	8007974 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f06f 0210 	mvn.w	r2, #16
 8007944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2208      	movs	r2, #8
 800794a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fa94 	bl	8007e88 <HAL_TIM_IC_CaptureCallback>
 8007960:	e005      	b.n	800796e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fa86 	bl	8007e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fa97 	bl	8007e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	2b01      	cmp	r3, #1
 8007980:	d10e      	bne.n	80079a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b01      	cmp	r3, #1
 800798e:	d107      	bne.n	80079a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f06f 0201 	mvn.w	r2, #1
 8007998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7fa ff06 	bl	80027ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079aa:	2b80      	cmp	r3, #128	; 0x80
 80079ac:	d10e      	bne.n	80079cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b8:	2b80      	cmp	r3, #128	; 0x80
 80079ba:	d107      	bne.n	80079cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 ff48 	bl	800885c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079da:	d10e      	bne.n	80079fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e6:	2b80      	cmp	r3, #128	; 0x80
 80079e8:	d107      	bne.n	80079fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 ff3b 	bl	8008870 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a04:	2b40      	cmp	r3, #64	; 0x40
 8007a06:	d10e      	bne.n	8007a26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a12:	2b40      	cmp	r3, #64	; 0x40
 8007a14:	d107      	bne.n	8007a26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fa45 	bl	8007eb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	f003 0320 	and.w	r3, r3, #32
 8007a30:	2b20      	cmp	r3, #32
 8007a32:	d10e      	bne.n	8007a52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b20      	cmp	r3, #32
 8007a40:	d107      	bne.n	8007a52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f06f 0220 	mvn.w	r2, #32
 8007a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fefb 	bl	8008848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a52:	bf00      	nop
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
	...

08007a5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d101      	bne.n	8007a7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a76:	2302      	movs	r3, #2
 8007a78:	e0ff      	b.n	8007c7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b14      	cmp	r3, #20
 8007a86:	f200 80f0 	bhi.w	8007c6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007a8a:	a201      	add	r2, pc, #4	; (adr r2, 8007a90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a90:	08007ae5 	.word	0x08007ae5
 8007a94:	08007c6b 	.word	0x08007c6b
 8007a98:	08007c6b 	.word	0x08007c6b
 8007a9c:	08007c6b 	.word	0x08007c6b
 8007aa0:	08007b25 	.word	0x08007b25
 8007aa4:	08007c6b 	.word	0x08007c6b
 8007aa8:	08007c6b 	.word	0x08007c6b
 8007aac:	08007c6b 	.word	0x08007c6b
 8007ab0:	08007b67 	.word	0x08007b67
 8007ab4:	08007c6b 	.word	0x08007c6b
 8007ab8:	08007c6b 	.word	0x08007c6b
 8007abc:	08007c6b 	.word	0x08007c6b
 8007ac0:	08007ba7 	.word	0x08007ba7
 8007ac4:	08007c6b 	.word	0x08007c6b
 8007ac8:	08007c6b 	.word	0x08007c6b
 8007acc:	08007c6b 	.word	0x08007c6b
 8007ad0:	08007be9 	.word	0x08007be9
 8007ad4:	08007c6b 	.word	0x08007c6b
 8007ad8:	08007c6b 	.word	0x08007c6b
 8007adc:	08007c6b 	.word	0x08007c6b
 8007ae0:	08007c29 	.word	0x08007c29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68b9      	ldr	r1, [r7, #8]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 fa84 	bl	8007ff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699a      	ldr	r2, [r3, #24]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0208 	orr.w	r2, r2, #8
 8007afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	699a      	ldr	r2, [r3, #24]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f022 0204 	bic.w	r2, r2, #4
 8007b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6999      	ldr	r1, [r3, #24]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	691a      	ldr	r2, [r3, #16]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	619a      	str	r2, [r3, #24]
      break;
 8007b22:	e0a5      	b.n	8007c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68b9      	ldr	r1, [r7, #8]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 faf4 	bl	8008118 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	699a      	ldr	r2, [r3, #24]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	699a      	ldr	r2, [r3, #24]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6999      	ldr	r1, [r3, #24]
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	021a      	lsls	r2, r3, #8
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	619a      	str	r2, [r3, #24]
      break;
 8007b64:	e084      	b.n	8007c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68b9      	ldr	r1, [r7, #8]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f000 fb5d 	bl	800822c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	69da      	ldr	r2, [r3, #28]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f042 0208 	orr.w	r2, r2, #8
 8007b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69da      	ldr	r2, [r3, #28]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 0204 	bic.w	r2, r2, #4
 8007b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	69d9      	ldr	r1, [r3, #28]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	691a      	ldr	r2, [r3, #16]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	61da      	str	r2, [r3, #28]
      break;
 8007ba4:	e064      	b.n	8007c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68b9      	ldr	r1, [r7, #8]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 fbc5 	bl	800833c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	69da      	ldr	r2, [r3, #28]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69da      	ldr	r2, [r3, #28]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	69d9      	ldr	r1, [r3, #28]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	021a      	lsls	r2, r3, #8
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	61da      	str	r2, [r3, #28]
      break;
 8007be6:	e043      	b.n	8007c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68b9      	ldr	r1, [r7, #8]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fc0e 	bl	8008410 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0208 	orr.w	r2, r2, #8
 8007c02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f022 0204 	bic.w	r2, r2, #4
 8007c12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	691a      	ldr	r2, [r3, #16]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c26:	e023      	b.n	8007c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68b9      	ldr	r1, [r7, #8]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 fc52 	bl	80084d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	021a      	lsls	r2, r3, #8
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c68:	e002      	b.n	8007c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop

08007c84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d101      	bne.n	8007ca0 <HAL_TIM_ConfigClockSource+0x1c>
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	e0dc      	b.n	8007e5a <HAL_TIM_ConfigClockSource+0x1d6>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2202      	movs	r2, #2
 8007cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	4b6a      	ldr	r3, [pc, #424]	; (8007e64 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a64      	ldr	r2, [pc, #400]	; (8007e68 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	f000 80a9 	beq.w	8007e2e <HAL_TIM_ConfigClockSource+0x1aa>
 8007cdc:	4a62      	ldr	r2, [pc, #392]	; (8007e68 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	f200 80ae 	bhi.w	8007e40 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ce4:	4a61      	ldr	r2, [pc, #388]	; (8007e6c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	f000 80a1 	beq.w	8007e2e <HAL_TIM_ConfigClockSource+0x1aa>
 8007cec:	4a5f      	ldr	r2, [pc, #380]	; (8007e6c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	f200 80a6 	bhi.w	8007e40 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cf4:	4a5e      	ldr	r2, [pc, #376]	; (8007e70 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	f000 8099 	beq.w	8007e2e <HAL_TIM_ConfigClockSource+0x1aa>
 8007cfc:	4a5c      	ldr	r2, [pc, #368]	; (8007e70 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	f200 809e 	bhi.w	8007e40 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007d08:	f000 8091 	beq.w	8007e2e <HAL_TIM_ConfigClockSource+0x1aa>
 8007d0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007d10:	f200 8096 	bhi.w	8007e40 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d18:	f000 8089 	beq.w	8007e2e <HAL_TIM_ConfigClockSource+0x1aa>
 8007d1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d20:	f200 808e 	bhi.w	8007e40 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d28:	d03e      	beq.n	8007da8 <HAL_TIM_ConfigClockSource+0x124>
 8007d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d2e:	f200 8087 	bhi.w	8007e40 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d36:	f000 8086 	beq.w	8007e46 <HAL_TIM_ConfigClockSource+0x1c2>
 8007d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d3e:	d87f      	bhi.n	8007e40 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d40:	2b70      	cmp	r3, #112	; 0x70
 8007d42:	d01a      	beq.n	8007d7a <HAL_TIM_ConfigClockSource+0xf6>
 8007d44:	2b70      	cmp	r3, #112	; 0x70
 8007d46:	d87b      	bhi.n	8007e40 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d48:	2b60      	cmp	r3, #96	; 0x60
 8007d4a:	d050      	beq.n	8007dee <HAL_TIM_ConfigClockSource+0x16a>
 8007d4c:	2b60      	cmp	r3, #96	; 0x60
 8007d4e:	d877      	bhi.n	8007e40 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d50:	2b50      	cmp	r3, #80	; 0x50
 8007d52:	d03c      	beq.n	8007dce <HAL_TIM_ConfigClockSource+0x14a>
 8007d54:	2b50      	cmp	r3, #80	; 0x50
 8007d56:	d873      	bhi.n	8007e40 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d58:	2b40      	cmp	r3, #64	; 0x40
 8007d5a:	d058      	beq.n	8007e0e <HAL_TIM_ConfigClockSource+0x18a>
 8007d5c:	2b40      	cmp	r3, #64	; 0x40
 8007d5e:	d86f      	bhi.n	8007e40 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d60:	2b30      	cmp	r3, #48	; 0x30
 8007d62:	d064      	beq.n	8007e2e <HAL_TIM_ConfigClockSource+0x1aa>
 8007d64:	2b30      	cmp	r3, #48	; 0x30
 8007d66:	d86b      	bhi.n	8007e40 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d68:	2b20      	cmp	r3, #32
 8007d6a:	d060      	beq.n	8007e2e <HAL_TIM_ConfigClockSource+0x1aa>
 8007d6c:	2b20      	cmp	r3, #32
 8007d6e:	d867      	bhi.n	8007e40 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d05c      	beq.n	8007e2e <HAL_TIM_ConfigClockSource+0x1aa>
 8007d74:	2b10      	cmp	r3, #16
 8007d76:	d05a      	beq.n	8007e2e <HAL_TIM_ConfigClockSource+0x1aa>
 8007d78:	e062      	b.n	8007e40 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6818      	ldr	r0, [r3, #0]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	6899      	ldr	r1, [r3, #8]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	f000 fc89 	bl	80086a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	609a      	str	r2, [r3, #8]
      break;
 8007da6:	e04f      	b.n	8007e48 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6818      	ldr	r0, [r3, #0]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	6899      	ldr	r1, [r3, #8]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	f000 fc72 	bl	80086a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689a      	ldr	r2, [r3, #8]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dca:	609a      	str	r2, [r3, #8]
      break;
 8007dcc:	e03c      	b.n	8007e48 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	6859      	ldr	r1, [r3, #4]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	f000 fbe2 	bl	80085a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2150      	movs	r1, #80	; 0x50
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fc3c 	bl	8008664 <TIM_ITRx_SetConfig>
      break;
 8007dec:	e02c      	b.n	8007e48 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	6859      	ldr	r1, [r3, #4]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f000 fc01 	bl	8008602 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2160      	movs	r1, #96	; 0x60
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 fc2c 	bl	8008664 <TIM_ITRx_SetConfig>
      break;
 8007e0c:	e01c      	b.n	8007e48 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6818      	ldr	r0, [r3, #0]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	6859      	ldr	r1, [r3, #4]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f000 fbc2 	bl	80085a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2140      	movs	r1, #64	; 0x40
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 fc1c 	bl	8008664 <TIM_ITRx_SetConfig>
      break;
 8007e2c:	e00c      	b.n	8007e48 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4619      	mov	r1, r3
 8007e38:	4610      	mov	r0, r2
 8007e3a:	f000 fc13 	bl	8008664 <TIM_ITRx_SetConfig>
      break;
 8007e3e:	e003      	b.n	8007e48 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	73fb      	strb	r3, [r7, #15]
      break;
 8007e44:	e000      	b.n	8007e48 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007e46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	ffceff88 	.word	0xffceff88
 8007e68:	00100040 	.word	0x00100040
 8007e6c:	00100030 	.word	0x00100030
 8007e70:	00100020 	.word	0x00100020

08007e74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a40      	ldr	r2, [pc, #256]	; (8007fd8 <TIM_Base_SetConfig+0x114>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d013      	beq.n	8007f04 <TIM_Base_SetConfig+0x40>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee2:	d00f      	beq.n	8007f04 <TIM_Base_SetConfig+0x40>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a3d      	ldr	r2, [pc, #244]	; (8007fdc <TIM_Base_SetConfig+0x118>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d00b      	beq.n	8007f04 <TIM_Base_SetConfig+0x40>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a3c      	ldr	r2, [pc, #240]	; (8007fe0 <TIM_Base_SetConfig+0x11c>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d007      	beq.n	8007f04 <TIM_Base_SetConfig+0x40>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a3b      	ldr	r2, [pc, #236]	; (8007fe4 <TIM_Base_SetConfig+0x120>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d003      	beq.n	8007f04 <TIM_Base_SetConfig+0x40>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a3a      	ldr	r2, [pc, #232]	; (8007fe8 <TIM_Base_SetConfig+0x124>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d108      	bne.n	8007f16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a2f      	ldr	r2, [pc, #188]	; (8007fd8 <TIM_Base_SetConfig+0x114>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d01f      	beq.n	8007f5e <TIM_Base_SetConfig+0x9a>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f24:	d01b      	beq.n	8007f5e <TIM_Base_SetConfig+0x9a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a2c      	ldr	r2, [pc, #176]	; (8007fdc <TIM_Base_SetConfig+0x118>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d017      	beq.n	8007f5e <TIM_Base_SetConfig+0x9a>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a2b      	ldr	r2, [pc, #172]	; (8007fe0 <TIM_Base_SetConfig+0x11c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d013      	beq.n	8007f5e <TIM_Base_SetConfig+0x9a>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a2a      	ldr	r2, [pc, #168]	; (8007fe4 <TIM_Base_SetConfig+0x120>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d00f      	beq.n	8007f5e <TIM_Base_SetConfig+0x9a>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a29      	ldr	r2, [pc, #164]	; (8007fe8 <TIM_Base_SetConfig+0x124>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d00b      	beq.n	8007f5e <TIM_Base_SetConfig+0x9a>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a28      	ldr	r2, [pc, #160]	; (8007fec <TIM_Base_SetConfig+0x128>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d007      	beq.n	8007f5e <TIM_Base_SetConfig+0x9a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a27      	ldr	r2, [pc, #156]	; (8007ff0 <TIM_Base_SetConfig+0x12c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d003      	beq.n	8007f5e <TIM_Base_SetConfig+0x9a>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a26      	ldr	r2, [pc, #152]	; (8007ff4 <TIM_Base_SetConfig+0x130>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d108      	bne.n	8007f70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a10      	ldr	r2, [pc, #64]	; (8007fd8 <TIM_Base_SetConfig+0x114>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d00f      	beq.n	8007fbc <TIM_Base_SetConfig+0xf8>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a12      	ldr	r2, [pc, #72]	; (8007fe8 <TIM_Base_SetConfig+0x124>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d00b      	beq.n	8007fbc <TIM_Base_SetConfig+0xf8>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a11      	ldr	r2, [pc, #68]	; (8007fec <TIM_Base_SetConfig+0x128>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d007      	beq.n	8007fbc <TIM_Base_SetConfig+0xf8>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a10      	ldr	r2, [pc, #64]	; (8007ff0 <TIM_Base_SetConfig+0x12c>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d003      	beq.n	8007fbc <TIM_Base_SetConfig+0xf8>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a0f      	ldr	r2, [pc, #60]	; (8007ff4 <TIM_Base_SetConfig+0x130>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d103      	bne.n	8007fc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	691a      	ldr	r2, [r3, #16]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	615a      	str	r2, [r3, #20]
}
 8007fca:	bf00      	nop
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	40010000 	.word	0x40010000
 8007fdc:	40000400 	.word	0x40000400
 8007fe0:	40000800 	.word	0x40000800
 8007fe4:	40000c00 	.word	0x40000c00
 8007fe8:	40010400 	.word	0x40010400
 8007fec:	40014000 	.word	0x40014000
 8007ff0:	40014400 	.word	0x40014400
 8007ff4:	40014800 	.word	0x40014800

08007ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b087      	sub	sp, #28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	f023 0201 	bic.w	r2, r3, #1
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	4b37      	ldr	r3, [pc, #220]	; (8008100 <TIM_OC1_SetConfig+0x108>)
 8008024:	4013      	ands	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f023 0303 	bic.w	r3, r3, #3
 800802e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	4313      	orrs	r3, r2
 8008038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f023 0302 	bic.w	r3, r3, #2
 8008040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	4313      	orrs	r3, r2
 800804a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a2d      	ldr	r2, [pc, #180]	; (8008104 <TIM_OC1_SetConfig+0x10c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00f      	beq.n	8008074 <TIM_OC1_SetConfig+0x7c>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a2c      	ldr	r2, [pc, #176]	; (8008108 <TIM_OC1_SetConfig+0x110>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d00b      	beq.n	8008074 <TIM_OC1_SetConfig+0x7c>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a2b      	ldr	r2, [pc, #172]	; (800810c <TIM_OC1_SetConfig+0x114>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d007      	beq.n	8008074 <TIM_OC1_SetConfig+0x7c>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a2a      	ldr	r2, [pc, #168]	; (8008110 <TIM_OC1_SetConfig+0x118>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d003      	beq.n	8008074 <TIM_OC1_SetConfig+0x7c>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a29      	ldr	r2, [pc, #164]	; (8008114 <TIM_OC1_SetConfig+0x11c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d10c      	bne.n	800808e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f023 0308 	bic.w	r3, r3, #8
 800807a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	4313      	orrs	r3, r2
 8008084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f023 0304 	bic.w	r3, r3, #4
 800808c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a1c      	ldr	r2, [pc, #112]	; (8008104 <TIM_OC1_SetConfig+0x10c>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d00f      	beq.n	80080b6 <TIM_OC1_SetConfig+0xbe>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a1b      	ldr	r2, [pc, #108]	; (8008108 <TIM_OC1_SetConfig+0x110>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d00b      	beq.n	80080b6 <TIM_OC1_SetConfig+0xbe>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a1a      	ldr	r2, [pc, #104]	; (800810c <TIM_OC1_SetConfig+0x114>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d007      	beq.n	80080b6 <TIM_OC1_SetConfig+0xbe>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a19      	ldr	r2, [pc, #100]	; (8008110 <TIM_OC1_SetConfig+0x118>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d003      	beq.n	80080b6 <TIM_OC1_SetConfig+0xbe>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a18      	ldr	r2, [pc, #96]	; (8008114 <TIM_OC1_SetConfig+0x11c>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d111      	bne.n	80080da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	621a      	str	r2, [r3, #32]
}
 80080f4:	bf00      	nop
 80080f6:	371c      	adds	r7, #28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	fffeff8f 	.word	0xfffeff8f
 8008104:	40010000 	.word	0x40010000
 8008108:	40010400 	.word	0x40010400
 800810c:	40014000 	.word	0x40014000
 8008110:	40014400 	.word	0x40014400
 8008114:	40014800 	.word	0x40014800

08008118 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	f023 0210 	bic.w	r2, r3, #16
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	4b34      	ldr	r3, [pc, #208]	; (8008214 <TIM_OC2_SetConfig+0xfc>)
 8008144:	4013      	ands	r3, r2
 8008146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800814e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	021b      	lsls	r3, r3, #8
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	4313      	orrs	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f023 0320 	bic.w	r3, r3, #32
 8008162:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	011b      	lsls	r3, r3, #4
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	4313      	orrs	r3, r2
 800816e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a29      	ldr	r2, [pc, #164]	; (8008218 <TIM_OC2_SetConfig+0x100>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d003      	beq.n	8008180 <TIM_OC2_SetConfig+0x68>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a28      	ldr	r2, [pc, #160]	; (800821c <TIM_OC2_SetConfig+0x104>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d10d      	bne.n	800819c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	011b      	lsls	r3, r3, #4
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	4313      	orrs	r3, r2
 8008192:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800819a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a1e      	ldr	r2, [pc, #120]	; (8008218 <TIM_OC2_SetConfig+0x100>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d00f      	beq.n	80081c4 <TIM_OC2_SetConfig+0xac>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a1d      	ldr	r2, [pc, #116]	; (800821c <TIM_OC2_SetConfig+0x104>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d00b      	beq.n	80081c4 <TIM_OC2_SetConfig+0xac>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a1c      	ldr	r2, [pc, #112]	; (8008220 <TIM_OC2_SetConfig+0x108>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d007      	beq.n	80081c4 <TIM_OC2_SetConfig+0xac>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a1b      	ldr	r2, [pc, #108]	; (8008224 <TIM_OC2_SetConfig+0x10c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d003      	beq.n	80081c4 <TIM_OC2_SetConfig+0xac>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a1a      	ldr	r2, [pc, #104]	; (8008228 <TIM_OC2_SetConfig+0x110>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d113      	bne.n	80081ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	4313      	orrs	r3, r2
 80081de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	621a      	str	r2, [r3, #32]
}
 8008206:	bf00      	nop
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	feff8fff 	.word	0xfeff8fff
 8008218:	40010000 	.word	0x40010000
 800821c:	40010400 	.word	0x40010400
 8008220:	40014000 	.word	0x40014000
 8008224:	40014400 	.word	0x40014400
 8008228:	40014800 	.word	0x40014800

0800822c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800822c:	b480      	push	{r7}
 800822e:	b087      	sub	sp, #28
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	4b33      	ldr	r3, [pc, #204]	; (8008324 <TIM_OC3_SetConfig+0xf8>)
 8008258:	4013      	ands	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0303 	bic.w	r3, r3, #3
 8008262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	4313      	orrs	r3, r2
 800826c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	021b      	lsls	r3, r3, #8
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	4313      	orrs	r3, r2
 8008280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a28      	ldr	r2, [pc, #160]	; (8008328 <TIM_OC3_SetConfig+0xfc>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d003      	beq.n	8008292 <TIM_OC3_SetConfig+0x66>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a27      	ldr	r2, [pc, #156]	; (800832c <TIM_OC3_SetConfig+0x100>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d10d      	bne.n	80082ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	021b      	lsls	r3, r3, #8
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a1d      	ldr	r2, [pc, #116]	; (8008328 <TIM_OC3_SetConfig+0xfc>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d00f      	beq.n	80082d6 <TIM_OC3_SetConfig+0xaa>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a1c      	ldr	r2, [pc, #112]	; (800832c <TIM_OC3_SetConfig+0x100>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d00b      	beq.n	80082d6 <TIM_OC3_SetConfig+0xaa>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a1b      	ldr	r2, [pc, #108]	; (8008330 <TIM_OC3_SetConfig+0x104>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d007      	beq.n	80082d6 <TIM_OC3_SetConfig+0xaa>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a1a      	ldr	r2, [pc, #104]	; (8008334 <TIM_OC3_SetConfig+0x108>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d003      	beq.n	80082d6 <TIM_OC3_SetConfig+0xaa>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a19      	ldr	r2, [pc, #100]	; (8008338 <TIM_OC3_SetConfig+0x10c>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d113      	bne.n	80082fe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	011b      	lsls	r3, r3, #4
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	011b      	lsls	r3, r3, #4
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	685a      	ldr	r2, [r3, #4]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	621a      	str	r2, [r3, #32]
}
 8008318:	bf00      	nop
 800831a:	371c      	adds	r7, #28
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	fffeff8f 	.word	0xfffeff8f
 8008328:	40010000 	.word	0x40010000
 800832c:	40010400 	.word	0x40010400
 8008330:	40014000 	.word	0x40014000
 8008334:	40014400 	.word	0x40014400
 8008338:	40014800 	.word	0x40014800

0800833c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	4b24      	ldr	r3, [pc, #144]	; (80083f8 <TIM_OC4_SetConfig+0xbc>)
 8008368:	4013      	ands	r3, r2
 800836a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	021b      	lsls	r3, r3, #8
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	4313      	orrs	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	031b      	lsls	r3, r3, #12
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	4313      	orrs	r3, r2
 8008392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a19      	ldr	r2, [pc, #100]	; (80083fc <TIM_OC4_SetConfig+0xc0>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d00f      	beq.n	80083bc <TIM_OC4_SetConfig+0x80>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a18      	ldr	r2, [pc, #96]	; (8008400 <TIM_OC4_SetConfig+0xc4>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d00b      	beq.n	80083bc <TIM_OC4_SetConfig+0x80>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a17      	ldr	r2, [pc, #92]	; (8008404 <TIM_OC4_SetConfig+0xc8>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d007      	beq.n	80083bc <TIM_OC4_SetConfig+0x80>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a16      	ldr	r2, [pc, #88]	; (8008408 <TIM_OC4_SetConfig+0xcc>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d003      	beq.n	80083bc <TIM_OC4_SetConfig+0x80>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a15      	ldr	r2, [pc, #84]	; (800840c <TIM_OC4_SetConfig+0xd0>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d109      	bne.n	80083d0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	019b      	lsls	r3, r3, #6
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	621a      	str	r2, [r3, #32]
}
 80083ea:	bf00      	nop
 80083ec:	371c      	adds	r7, #28
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	feff8fff 	.word	0xfeff8fff
 80083fc:	40010000 	.word	0x40010000
 8008400:	40010400 	.word	0x40010400
 8008404:	40014000 	.word	0x40014000
 8008408:	40014400 	.word	0x40014400
 800840c:	40014800 	.word	0x40014800

08008410 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008410:	b480      	push	{r7}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	4b21      	ldr	r3, [pc, #132]	; (80084c0 <TIM_OC5_SetConfig+0xb0>)
 800843c:	4013      	ands	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	4313      	orrs	r3, r2
 8008448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008450:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	041b      	lsls	r3, r3, #16
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	4313      	orrs	r3, r2
 800845c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a18      	ldr	r2, [pc, #96]	; (80084c4 <TIM_OC5_SetConfig+0xb4>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00f      	beq.n	8008486 <TIM_OC5_SetConfig+0x76>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a17      	ldr	r2, [pc, #92]	; (80084c8 <TIM_OC5_SetConfig+0xb8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00b      	beq.n	8008486 <TIM_OC5_SetConfig+0x76>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a16      	ldr	r2, [pc, #88]	; (80084cc <TIM_OC5_SetConfig+0xbc>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d007      	beq.n	8008486 <TIM_OC5_SetConfig+0x76>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a15      	ldr	r2, [pc, #84]	; (80084d0 <TIM_OC5_SetConfig+0xc0>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d003      	beq.n	8008486 <TIM_OC5_SetConfig+0x76>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a14      	ldr	r2, [pc, #80]	; (80084d4 <TIM_OC5_SetConfig+0xc4>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d109      	bne.n	800849a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800848c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	021b      	lsls	r3, r3, #8
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	4313      	orrs	r3, r2
 8008498:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	685a      	ldr	r2, [r3, #4]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	621a      	str	r2, [r3, #32]
}
 80084b4:	bf00      	nop
 80084b6:	371c      	adds	r7, #28
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	fffeff8f 	.word	0xfffeff8f
 80084c4:	40010000 	.word	0x40010000
 80084c8:	40010400 	.word	0x40010400
 80084cc:	40014000 	.word	0x40014000
 80084d0:	40014400 	.word	0x40014400
 80084d4:	40014800 	.word	0x40014800

080084d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80084d8:	b480      	push	{r7}
 80084da:	b087      	sub	sp, #28
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	4b22      	ldr	r3, [pc, #136]	; (800858c <TIM_OC6_SetConfig+0xb4>)
 8008504:	4013      	ands	r3, r2
 8008506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	021b      	lsls	r3, r3, #8
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	4313      	orrs	r3, r2
 8008512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800851a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	051b      	lsls	r3, r3, #20
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	4313      	orrs	r3, r2
 8008526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a19      	ldr	r2, [pc, #100]	; (8008590 <TIM_OC6_SetConfig+0xb8>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d00f      	beq.n	8008550 <TIM_OC6_SetConfig+0x78>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a18      	ldr	r2, [pc, #96]	; (8008594 <TIM_OC6_SetConfig+0xbc>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d00b      	beq.n	8008550 <TIM_OC6_SetConfig+0x78>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a17      	ldr	r2, [pc, #92]	; (8008598 <TIM_OC6_SetConfig+0xc0>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d007      	beq.n	8008550 <TIM_OC6_SetConfig+0x78>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a16      	ldr	r2, [pc, #88]	; (800859c <TIM_OC6_SetConfig+0xc4>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d003      	beq.n	8008550 <TIM_OC6_SetConfig+0x78>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a15      	ldr	r2, [pc, #84]	; (80085a0 <TIM_OC6_SetConfig+0xc8>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d109      	bne.n	8008564 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008556:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	029b      	lsls	r3, r3, #10
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	4313      	orrs	r3, r2
 8008562:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685a      	ldr	r2, [r3, #4]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	621a      	str	r2, [r3, #32]
}
 800857e:	bf00      	nop
 8008580:	371c      	adds	r7, #28
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	feff8fff 	.word	0xfeff8fff
 8008590:	40010000 	.word	0x40010000
 8008594:	40010400 	.word	0x40010400
 8008598:	40014000 	.word	0x40014000
 800859c:	40014400 	.word	0x40014400
 80085a0:	40014800 	.word	0x40014800

080085a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6a1b      	ldr	r3, [r3, #32]
 80085b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	f023 0201 	bic.w	r2, r3, #1
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f023 030a 	bic.w	r3, r3, #10
 80085e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	621a      	str	r2, [r3, #32]
}
 80085f6:	bf00      	nop
 80085f8:	371c      	adds	r7, #28
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008602:	b480      	push	{r7}
 8008604:	b087      	sub	sp, #28
 8008606:	af00      	add	r7, sp, #0
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	f023 0210 	bic.w	r2, r3, #16
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800862c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	031b      	lsls	r3, r3, #12
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	4313      	orrs	r3, r2
 8008636:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800863e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	011b      	lsls	r3, r3, #4
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	4313      	orrs	r3, r2
 8008648:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	621a      	str	r2, [r3, #32]
}
 8008656:	bf00      	nop
 8008658:	371c      	adds	r7, #28
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
	...

08008664 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	4b09      	ldr	r3, [pc, #36]	; (800869c <TIM_ITRx_SetConfig+0x38>)
 8008678:	4013      	ands	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	4313      	orrs	r3, r2
 8008682:	f043 0307 	orr.w	r3, r3, #7
 8008686:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	609a      	str	r2, [r3, #8]
}
 800868e:	bf00      	nop
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	ffcfff8f 	.word	0xffcfff8f

080086a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
 80086ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	021a      	lsls	r2, r3, #8
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	431a      	orrs	r2, r3
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	609a      	str	r2, [r3, #8]
}
 80086d4:	bf00      	nop
 80086d6:	371c      	adds	r7, #28
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f003 031f 	and.w	r3, r3, #31
 80086f2:	2201      	movs	r2, #1
 80086f4:	fa02 f303 	lsl.w	r3, r2, r3
 80086f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6a1a      	ldr	r2, [r3, #32]
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	43db      	mvns	r3, r3
 8008702:	401a      	ands	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6a1a      	ldr	r2, [r3, #32]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f003 031f 	and.w	r3, r3, #31
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	fa01 f303 	lsl.w	r3, r1, r3
 8008718:	431a      	orrs	r2, r3
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	621a      	str	r2, [r3, #32]
}
 800871e:	bf00      	nop
 8008720:	371c      	adds	r7, #28
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
	...

0800872c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800873c:	2b01      	cmp	r3, #1
 800873e:	d101      	bne.n	8008744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008740:	2302      	movs	r3, #2
 8008742:	e06d      	b.n	8008820 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2202      	movs	r2, #2
 8008750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a30      	ldr	r2, [pc, #192]	; (800882c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d004      	beq.n	8008778 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a2f      	ldr	r2, [pc, #188]	; (8008830 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d108      	bne.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800877e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	4313      	orrs	r3, r2
 8008788:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008790:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	4313      	orrs	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a20      	ldr	r2, [pc, #128]	; (800882c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d022      	beq.n	80087f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b6:	d01d      	beq.n	80087f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a1d      	ldr	r2, [pc, #116]	; (8008834 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d018      	beq.n	80087f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a1c      	ldr	r2, [pc, #112]	; (8008838 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d013      	beq.n	80087f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a1a      	ldr	r2, [pc, #104]	; (800883c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d00e      	beq.n	80087f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a15      	ldr	r2, [pc, #84]	; (8008830 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d009      	beq.n	80087f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a16      	ldr	r2, [pc, #88]	; (8008840 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d004      	beq.n	80087f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a15      	ldr	r2, [pc, #84]	; (8008844 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d10c      	bne.n	800880e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	4313      	orrs	r3, r2
 8008804:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2201      	movs	r2, #1
 8008812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	40010000 	.word	0x40010000
 8008830:	40010400 	.word	0x40010400
 8008834:	40000400 	.word	0x40000400
 8008838:	40000800 	.word	0x40000800
 800883c:	40000c00 	.word	0x40000c00
 8008840:	40001800 	.word	0x40001800
 8008844:	40014000 	.word	0x40014000

08008848 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e042      	b.n	800891c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800889c:	2b00      	cmp	r3, #0
 800889e:	d106      	bne.n	80088ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7fa f96b 	bl	8002b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2224      	movs	r2, #36	; 0x24
 80088b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f022 0201 	bic.w	r2, r2, #1
 80088c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f8c2 	bl	8008a50 <UART_SetConfig>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d101      	bne.n	80088d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e022      	b.n	800891c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d002      	beq.n	80088e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fe1e 	bl	8009520 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689a      	ldr	r2, [r3, #8]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f042 0201 	orr.w	r2, r2, #1
 8008912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fea5 	bl	8009664 <UART_CheckIdleState>
 800891a:	4603      	mov	r3, r0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b08a      	sub	sp, #40	; 0x28
 8008928:	af02      	add	r7, sp, #8
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	603b      	str	r3, [r7, #0]
 8008930:	4613      	mov	r3, r2
 8008932:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800893a:	2b20      	cmp	r3, #32
 800893c:	f040 8083 	bne.w	8008a46 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d002      	beq.n	800894c <HAL_UART_Transmit+0x28>
 8008946:	88fb      	ldrh	r3, [r7, #6]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d101      	bne.n	8008950 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e07b      	b.n	8008a48 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008956:	2b01      	cmp	r3, #1
 8008958:	d101      	bne.n	800895e <HAL_UART_Transmit+0x3a>
 800895a:	2302      	movs	r3, #2
 800895c:	e074      	b.n	8008a48 <HAL_UART_Transmit+0x124>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2221      	movs	r2, #33	; 0x21
 8008972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008976:	f7fa fb37 	bl	8002fe8 <HAL_GetTick>
 800897a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	88fa      	ldrh	r2, [r7, #6]
 8008980:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	88fa      	ldrh	r2, [r7, #6]
 8008988:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008994:	d108      	bne.n	80089a8 <HAL_UART_Transmit+0x84>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d104      	bne.n	80089a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800899e:	2300      	movs	r3, #0
 80089a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	61bb      	str	r3, [r7, #24]
 80089a6:	e003      	b.n	80089b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089ac:	2300      	movs	r3, #0
 80089ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80089b8:	e02c      	b.n	8008a14 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	9300      	str	r3, [sp, #0]
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2200      	movs	r2, #0
 80089c2:	2180      	movs	r1, #128	; 0x80
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 fe98 	bl	80096fa <UART_WaitOnFlagUntilTimeout>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e039      	b.n	8008a48 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10b      	bne.n	80089f2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	461a      	mov	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	3302      	adds	r3, #2
 80089ee:	61bb      	str	r3, [r7, #24]
 80089f0:	e007      	b.n	8008a02 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	781a      	ldrb	r2, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	3301      	adds	r3, #1
 8008a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1cc      	bne.n	80089ba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	2200      	movs	r2, #0
 8008a28:	2140      	movs	r1, #64	; 0x40
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f000 fe65 	bl	80096fa <UART_WaitOnFlagUntilTimeout>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e006      	b.n	8008a48 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	e000      	b.n	8008a48 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008a46:	2302      	movs	r3, #2
  }
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3720      	adds	r7, #32
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a54:	b092      	sub	sp, #72	; 0x48
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	431a      	orrs	r2, r3
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	69db      	ldr	r3, [r3, #28]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	4bbe      	ldr	r3, [pc, #760]	; (8008d78 <UART_SetConfig+0x328>)
 8008a80:	4013      	ands	r3, r2
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	6812      	ldr	r2, [r2, #0]
 8008a86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a88:	430b      	orrs	r3, r1
 8008a8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	68da      	ldr	r2, [r3, #12]
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4ab3      	ldr	r2, [pc, #716]	; (8008d7c <UART_SetConfig+0x32c>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d004      	beq.n	8008abc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689a      	ldr	r2, [r3, #8]
 8008ac2:	4baf      	ldr	r3, [pc, #700]	; (8008d80 <UART_SetConfig+0x330>)
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	6812      	ldr	r2, [r2, #0]
 8008aca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008acc:	430b      	orrs	r3, r1
 8008ace:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad6:	f023 010f 	bic.w	r1, r3, #15
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4aa6      	ldr	r2, [pc, #664]	; (8008d84 <UART_SetConfig+0x334>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d177      	bne.n	8008be0 <UART_SetConfig+0x190>
 8008af0:	4ba5      	ldr	r3, [pc, #660]	; (8008d88 <UART_SetConfig+0x338>)
 8008af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008af8:	2b28      	cmp	r3, #40	; 0x28
 8008afa:	d86d      	bhi.n	8008bd8 <UART_SetConfig+0x188>
 8008afc:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <UART_SetConfig+0xb4>)
 8008afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b02:	bf00      	nop
 8008b04:	08008ba9 	.word	0x08008ba9
 8008b08:	08008bd9 	.word	0x08008bd9
 8008b0c:	08008bd9 	.word	0x08008bd9
 8008b10:	08008bd9 	.word	0x08008bd9
 8008b14:	08008bd9 	.word	0x08008bd9
 8008b18:	08008bd9 	.word	0x08008bd9
 8008b1c:	08008bd9 	.word	0x08008bd9
 8008b20:	08008bd9 	.word	0x08008bd9
 8008b24:	08008bb1 	.word	0x08008bb1
 8008b28:	08008bd9 	.word	0x08008bd9
 8008b2c:	08008bd9 	.word	0x08008bd9
 8008b30:	08008bd9 	.word	0x08008bd9
 8008b34:	08008bd9 	.word	0x08008bd9
 8008b38:	08008bd9 	.word	0x08008bd9
 8008b3c:	08008bd9 	.word	0x08008bd9
 8008b40:	08008bd9 	.word	0x08008bd9
 8008b44:	08008bb9 	.word	0x08008bb9
 8008b48:	08008bd9 	.word	0x08008bd9
 8008b4c:	08008bd9 	.word	0x08008bd9
 8008b50:	08008bd9 	.word	0x08008bd9
 8008b54:	08008bd9 	.word	0x08008bd9
 8008b58:	08008bd9 	.word	0x08008bd9
 8008b5c:	08008bd9 	.word	0x08008bd9
 8008b60:	08008bd9 	.word	0x08008bd9
 8008b64:	08008bc1 	.word	0x08008bc1
 8008b68:	08008bd9 	.word	0x08008bd9
 8008b6c:	08008bd9 	.word	0x08008bd9
 8008b70:	08008bd9 	.word	0x08008bd9
 8008b74:	08008bd9 	.word	0x08008bd9
 8008b78:	08008bd9 	.word	0x08008bd9
 8008b7c:	08008bd9 	.word	0x08008bd9
 8008b80:	08008bd9 	.word	0x08008bd9
 8008b84:	08008bc9 	.word	0x08008bc9
 8008b88:	08008bd9 	.word	0x08008bd9
 8008b8c:	08008bd9 	.word	0x08008bd9
 8008b90:	08008bd9 	.word	0x08008bd9
 8008b94:	08008bd9 	.word	0x08008bd9
 8008b98:	08008bd9 	.word	0x08008bd9
 8008b9c:	08008bd9 	.word	0x08008bd9
 8008ba0:	08008bd9 	.word	0x08008bd9
 8008ba4:	08008bd1 	.word	0x08008bd1
 8008ba8:	2301      	movs	r3, #1
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bae:	e222      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008bb0:	2304      	movs	r3, #4
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bb6:	e21e      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008bb8:	2308      	movs	r3, #8
 8008bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bbe:	e21a      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008bc0:	2310      	movs	r3, #16
 8008bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc6:	e216      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008bc8:	2320      	movs	r3, #32
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bce:	e212      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008bd0:	2340      	movs	r3, #64	; 0x40
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bd6:	e20e      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008bd8:	2380      	movs	r3, #128	; 0x80
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bde:	e20a      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a69      	ldr	r2, [pc, #420]	; (8008d8c <UART_SetConfig+0x33c>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d130      	bne.n	8008c4c <UART_SetConfig+0x1fc>
 8008bea:	4b67      	ldr	r3, [pc, #412]	; (8008d88 <UART_SetConfig+0x338>)
 8008bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bee:	f003 0307 	and.w	r3, r3, #7
 8008bf2:	2b05      	cmp	r3, #5
 8008bf4:	d826      	bhi.n	8008c44 <UART_SetConfig+0x1f4>
 8008bf6:	a201      	add	r2, pc, #4	; (adr r2, 8008bfc <UART_SetConfig+0x1ac>)
 8008bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfc:	08008c15 	.word	0x08008c15
 8008c00:	08008c1d 	.word	0x08008c1d
 8008c04:	08008c25 	.word	0x08008c25
 8008c08:	08008c2d 	.word	0x08008c2d
 8008c0c:	08008c35 	.word	0x08008c35
 8008c10:	08008c3d 	.word	0x08008c3d
 8008c14:	2300      	movs	r3, #0
 8008c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c1a:	e1ec      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008c1c:	2304      	movs	r3, #4
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c22:	e1e8      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008c24:	2308      	movs	r3, #8
 8008c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c2a:	e1e4      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008c2c:	2310      	movs	r3, #16
 8008c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c32:	e1e0      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008c34:	2320      	movs	r3, #32
 8008c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c3a:	e1dc      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008c3c:	2340      	movs	r3, #64	; 0x40
 8008c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c42:	e1d8      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008c44:	2380      	movs	r3, #128	; 0x80
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c4a:	e1d4      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a4f      	ldr	r2, [pc, #316]	; (8008d90 <UART_SetConfig+0x340>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d130      	bne.n	8008cb8 <UART_SetConfig+0x268>
 8008c56:	4b4c      	ldr	r3, [pc, #304]	; (8008d88 <UART_SetConfig+0x338>)
 8008c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5a:	f003 0307 	and.w	r3, r3, #7
 8008c5e:	2b05      	cmp	r3, #5
 8008c60:	d826      	bhi.n	8008cb0 <UART_SetConfig+0x260>
 8008c62:	a201      	add	r2, pc, #4	; (adr r2, 8008c68 <UART_SetConfig+0x218>)
 8008c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c68:	08008c81 	.word	0x08008c81
 8008c6c:	08008c89 	.word	0x08008c89
 8008c70:	08008c91 	.word	0x08008c91
 8008c74:	08008c99 	.word	0x08008c99
 8008c78:	08008ca1 	.word	0x08008ca1
 8008c7c:	08008ca9 	.word	0x08008ca9
 8008c80:	2300      	movs	r3, #0
 8008c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c86:	e1b6      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008c88:	2304      	movs	r3, #4
 8008c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c8e:	e1b2      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008c90:	2308      	movs	r3, #8
 8008c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c96:	e1ae      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008c98:	2310      	movs	r3, #16
 8008c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c9e:	e1aa      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008ca0:	2320      	movs	r3, #32
 8008ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ca6:	e1a6      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008ca8:	2340      	movs	r3, #64	; 0x40
 8008caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cae:	e1a2      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008cb0:	2380      	movs	r3, #128	; 0x80
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cb6:	e19e      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a35      	ldr	r2, [pc, #212]	; (8008d94 <UART_SetConfig+0x344>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d130      	bne.n	8008d24 <UART_SetConfig+0x2d4>
 8008cc2:	4b31      	ldr	r3, [pc, #196]	; (8008d88 <UART_SetConfig+0x338>)
 8008cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc6:	f003 0307 	and.w	r3, r3, #7
 8008cca:	2b05      	cmp	r3, #5
 8008ccc:	d826      	bhi.n	8008d1c <UART_SetConfig+0x2cc>
 8008cce:	a201      	add	r2, pc, #4	; (adr r2, 8008cd4 <UART_SetConfig+0x284>)
 8008cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd4:	08008ced 	.word	0x08008ced
 8008cd8:	08008cf5 	.word	0x08008cf5
 8008cdc:	08008cfd 	.word	0x08008cfd
 8008ce0:	08008d05 	.word	0x08008d05
 8008ce4:	08008d0d 	.word	0x08008d0d
 8008ce8:	08008d15 	.word	0x08008d15
 8008cec:	2300      	movs	r3, #0
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cf2:	e180      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008cf4:	2304      	movs	r3, #4
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cfa:	e17c      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008cfc:	2308      	movs	r3, #8
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d02:	e178      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008d04:	2310      	movs	r3, #16
 8008d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d0a:	e174      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008d0c:	2320      	movs	r3, #32
 8008d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d12:	e170      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008d14:	2340      	movs	r3, #64	; 0x40
 8008d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d1a:	e16c      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008d1c:	2380      	movs	r3, #128	; 0x80
 8008d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d22:	e168      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a1b      	ldr	r2, [pc, #108]	; (8008d98 <UART_SetConfig+0x348>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d142      	bne.n	8008db4 <UART_SetConfig+0x364>
 8008d2e:	4b16      	ldr	r3, [pc, #88]	; (8008d88 <UART_SetConfig+0x338>)
 8008d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d32:	f003 0307 	and.w	r3, r3, #7
 8008d36:	2b05      	cmp	r3, #5
 8008d38:	d838      	bhi.n	8008dac <UART_SetConfig+0x35c>
 8008d3a:	a201      	add	r2, pc, #4	; (adr r2, 8008d40 <UART_SetConfig+0x2f0>)
 8008d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d40:	08008d59 	.word	0x08008d59
 8008d44:	08008d61 	.word	0x08008d61
 8008d48:	08008d69 	.word	0x08008d69
 8008d4c:	08008d71 	.word	0x08008d71
 8008d50:	08008d9d 	.word	0x08008d9d
 8008d54:	08008da5 	.word	0x08008da5
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d5e:	e14a      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008d60:	2304      	movs	r3, #4
 8008d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d66:	e146      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008d68:	2308      	movs	r3, #8
 8008d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d6e:	e142      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008d70:	2310      	movs	r3, #16
 8008d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d76:	e13e      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008d78:	cfff69f3 	.word	0xcfff69f3
 8008d7c:	58000c00 	.word	0x58000c00
 8008d80:	11fff4ff 	.word	0x11fff4ff
 8008d84:	40011000 	.word	0x40011000
 8008d88:	58024400 	.word	0x58024400
 8008d8c:	40004400 	.word	0x40004400
 8008d90:	40004800 	.word	0x40004800
 8008d94:	40004c00 	.word	0x40004c00
 8008d98:	40005000 	.word	0x40005000
 8008d9c:	2320      	movs	r3, #32
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da2:	e128      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008da4:	2340      	movs	r3, #64	; 0x40
 8008da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008daa:	e124      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008dac:	2380      	movs	r3, #128	; 0x80
 8008dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008db2:	e120      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4acb      	ldr	r2, [pc, #812]	; (80090e8 <UART_SetConfig+0x698>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d176      	bne.n	8008eac <UART_SetConfig+0x45c>
 8008dbe:	4bcb      	ldr	r3, [pc, #812]	; (80090ec <UART_SetConfig+0x69c>)
 8008dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dc6:	2b28      	cmp	r3, #40	; 0x28
 8008dc8:	d86c      	bhi.n	8008ea4 <UART_SetConfig+0x454>
 8008dca:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <UART_SetConfig+0x380>)
 8008dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd0:	08008e75 	.word	0x08008e75
 8008dd4:	08008ea5 	.word	0x08008ea5
 8008dd8:	08008ea5 	.word	0x08008ea5
 8008ddc:	08008ea5 	.word	0x08008ea5
 8008de0:	08008ea5 	.word	0x08008ea5
 8008de4:	08008ea5 	.word	0x08008ea5
 8008de8:	08008ea5 	.word	0x08008ea5
 8008dec:	08008ea5 	.word	0x08008ea5
 8008df0:	08008e7d 	.word	0x08008e7d
 8008df4:	08008ea5 	.word	0x08008ea5
 8008df8:	08008ea5 	.word	0x08008ea5
 8008dfc:	08008ea5 	.word	0x08008ea5
 8008e00:	08008ea5 	.word	0x08008ea5
 8008e04:	08008ea5 	.word	0x08008ea5
 8008e08:	08008ea5 	.word	0x08008ea5
 8008e0c:	08008ea5 	.word	0x08008ea5
 8008e10:	08008e85 	.word	0x08008e85
 8008e14:	08008ea5 	.word	0x08008ea5
 8008e18:	08008ea5 	.word	0x08008ea5
 8008e1c:	08008ea5 	.word	0x08008ea5
 8008e20:	08008ea5 	.word	0x08008ea5
 8008e24:	08008ea5 	.word	0x08008ea5
 8008e28:	08008ea5 	.word	0x08008ea5
 8008e2c:	08008ea5 	.word	0x08008ea5
 8008e30:	08008e8d 	.word	0x08008e8d
 8008e34:	08008ea5 	.word	0x08008ea5
 8008e38:	08008ea5 	.word	0x08008ea5
 8008e3c:	08008ea5 	.word	0x08008ea5
 8008e40:	08008ea5 	.word	0x08008ea5
 8008e44:	08008ea5 	.word	0x08008ea5
 8008e48:	08008ea5 	.word	0x08008ea5
 8008e4c:	08008ea5 	.word	0x08008ea5
 8008e50:	08008e95 	.word	0x08008e95
 8008e54:	08008ea5 	.word	0x08008ea5
 8008e58:	08008ea5 	.word	0x08008ea5
 8008e5c:	08008ea5 	.word	0x08008ea5
 8008e60:	08008ea5 	.word	0x08008ea5
 8008e64:	08008ea5 	.word	0x08008ea5
 8008e68:	08008ea5 	.word	0x08008ea5
 8008e6c:	08008ea5 	.word	0x08008ea5
 8008e70:	08008e9d 	.word	0x08008e9d
 8008e74:	2301      	movs	r3, #1
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e7a:	e0bc      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e82:	e0b8      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008e84:	2308      	movs	r3, #8
 8008e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e8a:	e0b4      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e92:	e0b0      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008e94:	2320      	movs	r3, #32
 8008e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e9a:	e0ac      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008e9c:	2340      	movs	r3, #64	; 0x40
 8008e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ea2:	e0a8      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008ea4:	2380      	movs	r3, #128	; 0x80
 8008ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eaa:	e0a4      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a8f      	ldr	r2, [pc, #572]	; (80090f0 <UART_SetConfig+0x6a0>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d130      	bne.n	8008f18 <UART_SetConfig+0x4c8>
 8008eb6:	4b8d      	ldr	r3, [pc, #564]	; (80090ec <UART_SetConfig+0x69c>)
 8008eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	2b05      	cmp	r3, #5
 8008ec0:	d826      	bhi.n	8008f10 <UART_SetConfig+0x4c0>
 8008ec2:	a201      	add	r2, pc, #4	; (adr r2, 8008ec8 <UART_SetConfig+0x478>)
 8008ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec8:	08008ee1 	.word	0x08008ee1
 8008ecc:	08008ee9 	.word	0x08008ee9
 8008ed0:	08008ef1 	.word	0x08008ef1
 8008ed4:	08008ef9 	.word	0x08008ef9
 8008ed8:	08008f01 	.word	0x08008f01
 8008edc:	08008f09 	.word	0x08008f09
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ee6:	e086      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008ee8:	2304      	movs	r3, #4
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eee:	e082      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ef6:	e07e      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008ef8:	2310      	movs	r3, #16
 8008efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008efe:	e07a      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008f00:	2320      	movs	r3, #32
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f06:	e076      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008f08:	2340      	movs	r3, #64	; 0x40
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f0e:	e072      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008f10:	2380      	movs	r3, #128	; 0x80
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f16:	e06e      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a75      	ldr	r2, [pc, #468]	; (80090f4 <UART_SetConfig+0x6a4>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d130      	bne.n	8008f84 <UART_SetConfig+0x534>
 8008f22:	4b72      	ldr	r3, [pc, #456]	; (80090ec <UART_SetConfig+0x69c>)
 8008f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f26:	f003 0307 	and.w	r3, r3, #7
 8008f2a:	2b05      	cmp	r3, #5
 8008f2c:	d826      	bhi.n	8008f7c <UART_SetConfig+0x52c>
 8008f2e:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <UART_SetConfig+0x4e4>)
 8008f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f34:	08008f4d 	.word	0x08008f4d
 8008f38:	08008f55 	.word	0x08008f55
 8008f3c:	08008f5d 	.word	0x08008f5d
 8008f40:	08008f65 	.word	0x08008f65
 8008f44:	08008f6d 	.word	0x08008f6d
 8008f48:	08008f75 	.word	0x08008f75
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f52:	e050      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008f54:	2304      	movs	r3, #4
 8008f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f5a:	e04c      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008f5c:	2308      	movs	r3, #8
 8008f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f62:	e048      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008f64:	2310      	movs	r3, #16
 8008f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f6a:	e044      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008f6c:	2320      	movs	r3, #32
 8008f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f72:	e040      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008f74:	2340      	movs	r3, #64	; 0x40
 8008f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f7a:	e03c      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008f7c:	2380      	movs	r3, #128	; 0x80
 8008f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f82:	e038      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a5b      	ldr	r2, [pc, #364]	; (80090f8 <UART_SetConfig+0x6a8>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d130      	bne.n	8008ff0 <UART_SetConfig+0x5a0>
 8008f8e:	4b57      	ldr	r3, [pc, #348]	; (80090ec <UART_SetConfig+0x69c>)
 8008f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f92:	f003 0307 	and.w	r3, r3, #7
 8008f96:	2b05      	cmp	r3, #5
 8008f98:	d826      	bhi.n	8008fe8 <UART_SetConfig+0x598>
 8008f9a:	a201      	add	r2, pc, #4	; (adr r2, 8008fa0 <UART_SetConfig+0x550>)
 8008f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa0:	08008fb9 	.word	0x08008fb9
 8008fa4:	08008fc1 	.word	0x08008fc1
 8008fa8:	08008fc9 	.word	0x08008fc9
 8008fac:	08008fd1 	.word	0x08008fd1
 8008fb0:	08008fd9 	.word	0x08008fd9
 8008fb4:	08008fe1 	.word	0x08008fe1
 8008fb8:	2302      	movs	r3, #2
 8008fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fbe:	e01a      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008fc0:	2304      	movs	r3, #4
 8008fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fc6:	e016      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008fc8:	2308      	movs	r3, #8
 8008fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fce:	e012      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008fd0:	2310      	movs	r3, #16
 8008fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fd6:	e00e      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008fd8:	2320      	movs	r3, #32
 8008fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fde:	e00a      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008fe0:	2340      	movs	r3, #64	; 0x40
 8008fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fe6:	e006      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008fe8:	2380      	movs	r3, #128	; 0x80
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fee:	e002      	b.n	8008ff6 <UART_SetConfig+0x5a6>
 8008ff0:	2380      	movs	r3, #128	; 0x80
 8008ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a3f      	ldr	r2, [pc, #252]	; (80090f8 <UART_SetConfig+0x6a8>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	f040 80f8 	bne.w	80091f2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009002:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009006:	2b20      	cmp	r3, #32
 8009008:	dc46      	bgt.n	8009098 <UART_SetConfig+0x648>
 800900a:	2b02      	cmp	r3, #2
 800900c:	f2c0 8082 	blt.w	8009114 <UART_SetConfig+0x6c4>
 8009010:	3b02      	subs	r3, #2
 8009012:	2b1e      	cmp	r3, #30
 8009014:	d87e      	bhi.n	8009114 <UART_SetConfig+0x6c4>
 8009016:	a201      	add	r2, pc, #4	; (adr r2, 800901c <UART_SetConfig+0x5cc>)
 8009018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901c:	0800909f 	.word	0x0800909f
 8009020:	08009115 	.word	0x08009115
 8009024:	080090a7 	.word	0x080090a7
 8009028:	08009115 	.word	0x08009115
 800902c:	08009115 	.word	0x08009115
 8009030:	08009115 	.word	0x08009115
 8009034:	080090b7 	.word	0x080090b7
 8009038:	08009115 	.word	0x08009115
 800903c:	08009115 	.word	0x08009115
 8009040:	08009115 	.word	0x08009115
 8009044:	08009115 	.word	0x08009115
 8009048:	08009115 	.word	0x08009115
 800904c:	08009115 	.word	0x08009115
 8009050:	08009115 	.word	0x08009115
 8009054:	080090c7 	.word	0x080090c7
 8009058:	08009115 	.word	0x08009115
 800905c:	08009115 	.word	0x08009115
 8009060:	08009115 	.word	0x08009115
 8009064:	08009115 	.word	0x08009115
 8009068:	08009115 	.word	0x08009115
 800906c:	08009115 	.word	0x08009115
 8009070:	08009115 	.word	0x08009115
 8009074:	08009115 	.word	0x08009115
 8009078:	08009115 	.word	0x08009115
 800907c:	08009115 	.word	0x08009115
 8009080:	08009115 	.word	0x08009115
 8009084:	08009115 	.word	0x08009115
 8009088:	08009115 	.word	0x08009115
 800908c:	08009115 	.word	0x08009115
 8009090:	08009115 	.word	0x08009115
 8009094:	08009107 	.word	0x08009107
 8009098:	2b40      	cmp	r3, #64	; 0x40
 800909a:	d037      	beq.n	800910c <UART_SetConfig+0x6bc>
 800909c:	e03a      	b.n	8009114 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800909e:	f7fc fdb7 	bl	8005c10 <HAL_RCCEx_GetD3PCLK1Freq>
 80090a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80090a4:	e03c      	b.n	8009120 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fc fdc6 	bl	8005c3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090b4:	e034      	b.n	8009120 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090b6:	f107 0318 	add.w	r3, r7, #24
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fc ff12 	bl	8005ee4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090c4:	e02c      	b.n	8009120 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090c6:	4b09      	ldr	r3, [pc, #36]	; (80090ec <UART_SetConfig+0x69c>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 0320 	and.w	r3, r3, #32
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d016      	beq.n	8009100 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80090d2:	4b06      	ldr	r3, [pc, #24]	; (80090ec <UART_SetConfig+0x69c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	08db      	lsrs	r3, r3, #3
 80090d8:	f003 0303 	and.w	r3, r3, #3
 80090dc:	4a07      	ldr	r2, [pc, #28]	; (80090fc <UART_SetConfig+0x6ac>)
 80090de:	fa22 f303 	lsr.w	r3, r2, r3
 80090e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090e4:	e01c      	b.n	8009120 <UART_SetConfig+0x6d0>
 80090e6:	bf00      	nop
 80090e8:	40011400 	.word	0x40011400
 80090ec:	58024400 	.word	0x58024400
 80090f0:	40007800 	.word	0x40007800
 80090f4:	40007c00 	.word	0x40007c00
 80090f8:	58000c00 	.word	0x58000c00
 80090fc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009100:	4b9d      	ldr	r3, [pc, #628]	; (8009378 <UART_SetConfig+0x928>)
 8009102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009104:	e00c      	b.n	8009120 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009106:	4b9d      	ldr	r3, [pc, #628]	; (800937c <UART_SetConfig+0x92c>)
 8009108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800910a:	e009      	b.n	8009120 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800910c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009112:	e005      	b.n	8009120 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009114:	2300      	movs	r3, #0
 8009116:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800911e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 81de 	beq.w	80094e4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912c:	4a94      	ldr	r2, [pc, #592]	; (8009380 <UART_SetConfig+0x930>)
 800912e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009132:	461a      	mov	r2, r3
 8009134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009136:	fbb3 f3f2 	udiv	r3, r3, r2
 800913a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	4613      	mov	r3, r2
 8009142:	005b      	lsls	r3, r3, #1
 8009144:	4413      	add	r3, r2
 8009146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009148:	429a      	cmp	r2, r3
 800914a:	d305      	bcc.n	8009158 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009154:	429a      	cmp	r2, r3
 8009156:	d903      	bls.n	8009160 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800915e:	e1c1      	b.n	80094e4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009162:	2200      	movs	r2, #0
 8009164:	60bb      	str	r3, [r7, #8]
 8009166:	60fa      	str	r2, [r7, #12]
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	4a84      	ldr	r2, [pc, #528]	; (8009380 <UART_SetConfig+0x930>)
 800916e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009172:	b29b      	uxth	r3, r3
 8009174:	2200      	movs	r2, #0
 8009176:	603b      	str	r3, [r7, #0]
 8009178:	607a      	str	r2, [r7, #4]
 800917a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800917e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009182:	f7f7 f905 	bl	8000390 <__aeabi_uldivmod>
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	4610      	mov	r0, r2
 800918c:	4619      	mov	r1, r3
 800918e:	f04f 0200 	mov.w	r2, #0
 8009192:	f04f 0300 	mov.w	r3, #0
 8009196:	020b      	lsls	r3, r1, #8
 8009198:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800919c:	0202      	lsls	r2, r0, #8
 800919e:	6979      	ldr	r1, [r7, #20]
 80091a0:	6849      	ldr	r1, [r1, #4]
 80091a2:	0849      	lsrs	r1, r1, #1
 80091a4:	2000      	movs	r0, #0
 80091a6:	460c      	mov	r4, r1
 80091a8:	4605      	mov	r5, r0
 80091aa:	eb12 0804 	adds.w	r8, r2, r4
 80091ae:	eb43 0905 	adc.w	r9, r3, r5
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	469a      	mov	sl, r3
 80091ba:	4693      	mov	fp, r2
 80091bc:	4652      	mov	r2, sl
 80091be:	465b      	mov	r3, fp
 80091c0:	4640      	mov	r0, r8
 80091c2:	4649      	mov	r1, r9
 80091c4:	f7f7 f8e4 	bl	8000390 <__aeabi_uldivmod>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	4613      	mov	r3, r2
 80091ce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80091d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091d6:	d308      	bcc.n	80091ea <UART_SetConfig+0x79a>
 80091d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091de:	d204      	bcs.n	80091ea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091e6:	60da      	str	r2, [r3, #12]
 80091e8:	e17c      	b.n	80094e4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80091f0:	e178      	b.n	80094e4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	69db      	ldr	r3, [r3, #28]
 80091f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091fa:	f040 80c5 	bne.w	8009388 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80091fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009202:	2b20      	cmp	r3, #32
 8009204:	dc48      	bgt.n	8009298 <UART_SetConfig+0x848>
 8009206:	2b00      	cmp	r3, #0
 8009208:	db7b      	blt.n	8009302 <UART_SetConfig+0x8b2>
 800920a:	2b20      	cmp	r3, #32
 800920c:	d879      	bhi.n	8009302 <UART_SetConfig+0x8b2>
 800920e:	a201      	add	r2, pc, #4	; (adr r2, 8009214 <UART_SetConfig+0x7c4>)
 8009210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009214:	0800929f 	.word	0x0800929f
 8009218:	080092a7 	.word	0x080092a7
 800921c:	08009303 	.word	0x08009303
 8009220:	08009303 	.word	0x08009303
 8009224:	080092af 	.word	0x080092af
 8009228:	08009303 	.word	0x08009303
 800922c:	08009303 	.word	0x08009303
 8009230:	08009303 	.word	0x08009303
 8009234:	080092bf 	.word	0x080092bf
 8009238:	08009303 	.word	0x08009303
 800923c:	08009303 	.word	0x08009303
 8009240:	08009303 	.word	0x08009303
 8009244:	08009303 	.word	0x08009303
 8009248:	08009303 	.word	0x08009303
 800924c:	08009303 	.word	0x08009303
 8009250:	08009303 	.word	0x08009303
 8009254:	080092cf 	.word	0x080092cf
 8009258:	08009303 	.word	0x08009303
 800925c:	08009303 	.word	0x08009303
 8009260:	08009303 	.word	0x08009303
 8009264:	08009303 	.word	0x08009303
 8009268:	08009303 	.word	0x08009303
 800926c:	08009303 	.word	0x08009303
 8009270:	08009303 	.word	0x08009303
 8009274:	08009303 	.word	0x08009303
 8009278:	08009303 	.word	0x08009303
 800927c:	08009303 	.word	0x08009303
 8009280:	08009303 	.word	0x08009303
 8009284:	08009303 	.word	0x08009303
 8009288:	08009303 	.word	0x08009303
 800928c:	08009303 	.word	0x08009303
 8009290:	08009303 	.word	0x08009303
 8009294:	080092f5 	.word	0x080092f5
 8009298:	2b40      	cmp	r3, #64	; 0x40
 800929a:	d02e      	beq.n	80092fa <UART_SetConfig+0x8aa>
 800929c:	e031      	b.n	8009302 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800929e:	f7fb fd03 	bl	8004ca8 <HAL_RCC_GetPCLK1Freq>
 80092a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80092a4:	e033      	b.n	800930e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092a6:	f7fb fd15 	bl	8004cd4 <HAL_RCC_GetPCLK2Freq>
 80092aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80092ac:	e02f      	b.n	800930e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fc fcc2 	bl	8005c3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80092b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092bc:	e027      	b.n	800930e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092be:	f107 0318 	add.w	r3, r7, #24
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fc fe0e 	bl	8005ee4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092cc:	e01f      	b.n	800930e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092ce:	4b2d      	ldr	r3, [pc, #180]	; (8009384 <UART_SetConfig+0x934>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0320 	and.w	r3, r3, #32
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d009      	beq.n	80092ee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092da:	4b2a      	ldr	r3, [pc, #168]	; (8009384 <UART_SetConfig+0x934>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	08db      	lsrs	r3, r3, #3
 80092e0:	f003 0303 	and.w	r3, r3, #3
 80092e4:	4a24      	ldr	r2, [pc, #144]	; (8009378 <UART_SetConfig+0x928>)
 80092e6:	fa22 f303 	lsr.w	r3, r2, r3
 80092ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092ec:	e00f      	b.n	800930e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80092ee:	4b22      	ldr	r3, [pc, #136]	; (8009378 <UART_SetConfig+0x928>)
 80092f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092f2:	e00c      	b.n	800930e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092f4:	4b21      	ldr	r3, [pc, #132]	; (800937c <UART_SetConfig+0x92c>)
 80092f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092f8:	e009      	b.n	800930e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009300:	e005      	b.n	800930e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009302:	2300      	movs	r3, #0
 8009304:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800930c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800930e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 80e7 	beq.w	80094e4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931a:	4a19      	ldr	r2, [pc, #100]	; (8009380 <UART_SetConfig+0x930>)
 800931c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009320:	461a      	mov	r2, r3
 8009322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009324:	fbb3 f3f2 	udiv	r3, r3, r2
 8009328:	005a      	lsls	r2, r3, #1
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	085b      	lsrs	r3, r3, #1
 8009330:	441a      	add	r2, r3
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	fbb2 f3f3 	udiv	r3, r2, r3
 800933a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	2b0f      	cmp	r3, #15
 8009340:	d916      	bls.n	8009370 <UART_SetConfig+0x920>
 8009342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009348:	d212      	bcs.n	8009370 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800934a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934c:	b29b      	uxth	r3, r3
 800934e:	f023 030f 	bic.w	r3, r3, #15
 8009352:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009356:	085b      	lsrs	r3, r3, #1
 8009358:	b29b      	uxth	r3, r3
 800935a:	f003 0307 	and.w	r3, r3, #7
 800935e:	b29a      	uxth	r2, r3
 8009360:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009362:	4313      	orrs	r3, r2
 8009364:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800936c:	60da      	str	r2, [r3, #12]
 800936e:	e0b9      	b.n	80094e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009376:	e0b5      	b.n	80094e4 <UART_SetConfig+0xa94>
 8009378:	03d09000 	.word	0x03d09000
 800937c:	003d0900 	.word	0x003d0900
 8009380:	08010150 	.word	0x08010150
 8009384:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009388:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800938c:	2b20      	cmp	r3, #32
 800938e:	dc49      	bgt.n	8009424 <UART_SetConfig+0x9d4>
 8009390:	2b00      	cmp	r3, #0
 8009392:	db7c      	blt.n	800948e <UART_SetConfig+0xa3e>
 8009394:	2b20      	cmp	r3, #32
 8009396:	d87a      	bhi.n	800948e <UART_SetConfig+0xa3e>
 8009398:	a201      	add	r2, pc, #4	; (adr r2, 80093a0 <UART_SetConfig+0x950>)
 800939a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939e:	bf00      	nop
 80093a0:	0800942b 	.word	0x0800942b
 80093a4:	08009433 	.word	0x08009433
 80093a8:	0800948f 	.word	0x0800948f
 80093ac:	0800948f 	.word	0x0800948f
 80093b0:	0800943b 	.word	0x0800943b
 80093b4:	0800948f 	.word	0x0800948f
 80093b8:	0800948f 	.word	0x0800948f
 80093bc:	0800948f 	.word	0x0800948f
 80093c0:	0800944b 	.word	0x0800944b
 80093c4:	0800948f 	.word	0x0800948f
 80093c8:	0800948f 	.word	0x0800948f
 80093cc:	0800948f 	.word	0x0800948f
 80093d0:	0800948f 	.word	0x0800948f
 80093d4:	0800948f 	.word	0x0800948f
 80093d8:	0800948f 	.word	0x0800948f
 80093dc:	0800948f 	.word	0x0800948f
 80093e0:	0800945b 	.word	0x0800945b
 80093e4:	0800948f 	.word	0x0800948f
 80093e8:	0800948f 	.word	0x0800948f
 80093ec:	0800948f 	.word	0x0800948f
 80093f0:	0800948f 	.word	0x0800948f
 80093f4:	0800948f 	.word	0x0800948f
 80093f8:	0800948f 	.word	0x0800948f
 80093fc:	0800948f 	.word	0x0800948f
 8009400:	0800948f 	.word	0x0800948f
 8009404:	0800948f 	.word	0x0800948f
 8009408:	0800948f 	.word	0x0800948f
 800940c:	0800948f 	.word	0x0800948f
 8009410:	0800948f 	.word	0x0800948f
 8009414:	0800948f 	.word	0x0800948f
 8009418:	0800948f 	.word	0x0800948f
 800941c:	0800948f 	.word	0x0800948f
 8009420:	08009481 	.word	0x08009481
 8009424:	2b40      	cmp	r3, #64	; 0x40
 8009426:	d02e      	beq.n	8009486 <UART_SetConfig+0xa36>
 8009428:	e031      	b.n	800948e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800942a:	f7fb fc3d 	bl	8004ca8 <HAL_RCC_GetPCLK1Freq>
 800942e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009430:	e033      	b.n	800949a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009432:	f7fb fc4f 	bl	8004cd4 <HAL_RCC_GetPCLK2Freq>
 8009436:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009438:	e02f      	b.n	800949a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800943a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800943e:	4618      	mov	r0, r3
 8009440:	f7fc fbfc 	bl	8005c3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009448:	e027      	b.n	800949a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800944a:	f107 0318 	add.w	r3, r7, #24
 800944e:	4618      	mov	r0, r3
 8009450:	f7fc fd48 	bl	8005ee4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009458:	e01f      	b.n	800949a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800945a:	4b2d      	ldr	r3, [pc, #180]	; (8009510 <UART_SetConfig+0xac0>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0320 	and.w	r3, r3, #32
 8009462:	2b00      	cmp	r3, #0
 8009464:	d009      	beq.n	800947a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009466:	4b2a      	ldr	r3, [pc, #168]	; (8009510 <UART_SetConfig+0xac0>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	08db      	lsrs	r3, r3, #3
 800946c:	f003 0303 	and.w	r3, r3, #3
 8009470:	4a28      	ldr	r2, [pc, #160]	; (8009514 <UART_SetConfig+0xac4>)
 8009472:	fa22 f303 	lsr.w	r3, r2, r3
 8009476:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009478:	e00f      	b.n	800949a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800947a:	4b26      	ldr	r3, [pc, #152]	; (8009514 <UART_SetConfig+0xac4>)
 800947c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800947e:	e00c      	b.n	800949a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009480:	4b25      	ldr	r3, [pc, #148]	; (8009518 <UART_SetConfig+0xac8>)
 8009482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009484:	e009      	b.n	800949a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800948a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800948c:	e005      	b.n	800949a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800948e:	2300      	movs	r3, #0
 8009490:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009498:	bf00      	nop
    }

    if (pclk != 0U)
 800949a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800949c:	2b00      	cmp	r3, #0
 800949e:	d021      	beq.n	80094e4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a4:	4a1d      	ldr	r2, [pc, #116]	; (800951c <UART_SetConfig+0xacc>)
 80094a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094aa:	461a      	mov	r2, r3
 80094ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	085b      	lsrs	r3, r3, #1
 80094b8:	441a      	add	r2, r3
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	fbb2 f3f3 	udiv	r3, r2, r3
 80094c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c6:	2b0f      	cmp	r3, #15
 80094c8:	d909      	bls.n	80094de <UART_SetConfig+0xa8e>
 80094ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094d0:	d205      	bcs.n	80094de <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	60da      	str	r2, [r3, #12]
 80094dc:	e002      	b.n	80094e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	2200      	movs	r2, #0
 80094f8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	2200      	movs	r2, #0
 80094fe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009500:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009504:	4618      	mov	r0, r3
 8009506:	3748      	adds	r7, #72	; 0x48
 8009508:	46bd      	mov	sp, r7
 800950a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800950e:	bf00      	nop
 8009510:	58024400 	.word	0x58024400
 8009514:	03d09000 	.word	0x03d09000
 8009518:	003d0900 	.word	0x003d0900
 800951c:	08010150 	.word	0x08010150

08009520 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00a      	beq.n	800954a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	430a      	orrs	r2, r1
 8009548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954e:	f003 0302 	and.w	r3, r3, #2
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00a      	beq.n	800956c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	430a      	orrs	r2, r1
 800956a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009570:	f003 0304 	and.w	r3, r3, #4
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00a      	beq.n	800958e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	430a      	orrs	r2, r1
 800958c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009592:	f003 0308 	and.w	r3, r3, #8
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00a      	beq.n	80095b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	430a      	orrs	r2, r1
 80095ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b4:	f003 0310 	and.w	r3, r3, #16
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00a      	beq.n	80095d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	430a      	orrs	r2, r1
 80095d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d6:	f003 0320 	and.w	r3, r3, #32
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00a      	beq.n	80095f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	430a      	orrs	r2, r1
 80095f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d01a      	beq.n	8009636 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	430a      	orrs	r2, r1
 8009614:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800961a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800961e:	d10a      	bne.n	8009636 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	430a      	orrs	r2, r1
 8009634:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00a      	beq.n	8009658 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	430a      	orrs	r2, r1
 8009656:	605a      	str	r2, [r3, #4]
  }
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af02      	add	r7, sp, #8
 800966a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009674:	f7f9 fcb8 	bl	8002fe8 <HAL_GetTick>
 8009678:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0308 	and.w	r3, r3, #8
 8009684:	2b08      	cmp	r3, #8
 8009686:	d10e      	bne.n	80096a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009688:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800968c:	9300      	str	r3, [sp, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f82f 	bl	80096fa <UART_WaitOnFlagUntilTimeout>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e025      	b.n	80096f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0304 	and.w	r3, r3, #4
 80096b0:	2b04      	cmp	r3, #4
 80096b2:	d10e      	bne.n	80096d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f819 	bl	80096fa <UART_WaitOnFlagUntilTimeout>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096ce:	2303      	movs	r3, #3
 80096d0:	e00f      	b.n	80096f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2220      	movs	r2, #32
 80096d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2220      	movs	r2, #32
 80096de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b09c      	sub	sp, #112	; 0x70
 80096fe:	af00      	add	r7, sp, #0
 8009700:	60f8      	str	r0, [r7, #12]
 8009702:	60b9      	str	r1, [r7, #8]
 8009704:	603b      	str	r3, [r7, #0]
 8009706:	4613      	mov	r3, r2
 8009708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800970a:	e0a9      	b.n	8009860 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800970c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800970e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009712:	f000 80a5 	beq.w	8009860 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009716:	f7f9 fc67 	bl	8002fe8 <HAL_GetTick>
 800971a:	4602      	mov	r2, r0
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009722:	429a      	cmp	r2, r3
 8009724:	d302      	bcc.n	800972c <UART_WaitOnFlagUntilTimeout+0x32>
 8009726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009728:	2b00      	cmp	r3, #0
 800972a:	d140      	bne.n	80097ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009734:	e853 3f00 	ldrex	r3, [r3]
 8009738:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800973a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800973c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009740:	667b      	str	r3, [r7, #100]	; 0x64
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800974a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800974c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009750:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009752:	e841 2300 	strex	r3, r2, [r1]
 8009756:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1e6      	bne.n	800972c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3308      	adds	r3, #8
 8009764:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009768:	e853 3f00 	ldrex	r3, [r3]
 800976c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800976e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009770:	f023 0301 	bic.w	r3, r3, #1
 8009774:	663b      	str	r3, [r7, #96]	; 0x60
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3308      	adds	r3, #8
 800977c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800977e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009780:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009782:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009786:	e841 2300 	strex	r3, r2, [r1]
 800978a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800978c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1e5      	bne.n	800975e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2220      	movs	r2, #32
 8009796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2220      	movs	r2, #32
 800979e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80097aa:	2303      	movs	r3, #3
 80097ac:	e069      	b.n	8009882 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 0304 	and.w	r3, r3, #4
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d051      	beq.n	8009860 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	69db      	ldr	r3, [r3, #28]
 80097c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097ca:	d149      	bne.n	8009860 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097de:	e853 3f00 	ldrex	r3, [r3]
 80097e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80097ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	461a      	mov	r2, r3
 80097f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097f4:	637b      	str	r3, [r7, #52]	; 0x34
 80097f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097fc:	e841 2300 	strex	r3, r2, [r1]
 8009800:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1e6      	bne.n	80097d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	3308      	adds	r3, #8
 800980e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	e853 3f00 	ldrex	r3, [r3]
 8009816:	613b      	str	r3, [r7, #16]
   return(result);
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	f023 0301 	bic.w	r3, r3, #1
 800981e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	3308      	adds	r3, #8
 8009826:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009828:	623a      	str	r2, [r7, #32]
 800982a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982c:	69f9      	ldr	r1, [r7, #28]
 800982e:	6a3a      	ldr	r2, [r7, #32]
 8009830:	e841 2300 	strex	r3, r2, [r1]
 8009834:	61bb      	str	r3, [r7, #24]
   return(result);
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1e5      	bne.n	8009808 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2220      	movs	r2, #32
 8009840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2220      	movs	r2, #32
 8009848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2220      	movs	r2, #32
 8009850:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800985c:	2303      	movs	r3, #3
 800985e:	e010      	b.n	8009882 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	69da      	ldr	r2, [r3, #28]
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	4013      	ands	r3, r2
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	429a      	cmp	r2, r3
 800986e:	bf0c      	ite	eq
 8009870:	2301      	moveq	r3, #1
 8009872:	2300      	movne	r3, #0
 8009874:	b2db      	uxtb	r3, r3
 8009876:	461a      	mov	r2, r3
 8009878:	79fb      	ldrb	r3, [r7, #7]
 800987a:	429a      	cmp	r2, r3
 800987c:	f43f af46 	beq.w	800970c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3770      	adds	r7, #112	; 0x70
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800988a:	b480      	push	{r7}
 800988c:	b085      	sub	sp, #20
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009898:	2b01      	cmp	r3, #1
 800989a:	d101      	bne.n	80098a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800989c:	2302      	movs	r3, #2
 800989e:	e027      	b.n	80098f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2224      	movs	r2, #36	; 0x24
 80098ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f022 0201 	bic.w	r2, r2, #1
 80098c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80098ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2220      	movs	r2, #32
 80098e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800990c:	2b01      	cmp	r3, #1
 800990e:	d101      	bne.n	8009914 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009910:	2302      	movs	r3, #2
 8009912:	e02d      	b.n	8009970 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2224      	movs	r2, #36	; 0x24
 8009920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 0201 	bic.w	r2, r2, #1
 800993a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	430a      	orrs	r2, r1
 800994e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f84f 	bl	80099f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2220      	movs	r2, #32
 8009962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3710      	adds	r7, #16
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009988:	2b01      	cmp	r3, #1
 800998a:	d101      	bne.n	8009990 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800998c:	2302      	movs	r3, #2
 800998e:	e02d      	b.n	80099ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2224      	movs	r2, #36	; 0x24
 800999c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f022 0201 	bic.w	r2, r2, #1
 80099b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	430a      	orrs	r2, r1
 80099ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f811 	bl	80099f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2220      	movs	r2, #32
 80099de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d108      	bne.n	8009a16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a14:	e031      	b.n	8009a7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a16:	2310      	movs	r3, #16
 8009a18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a1a:	2310      	movs	r3, #16
 8009a1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	0e5b      	lsrs	r3, r3, #25
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	f003 0307 	and.w	r3, r3, #7
 8009a2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	0f5b      	lsrs	r3, r3, #29
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	f003 0307 	and.w	r3, r3, #7
 8009a3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a3e:	7bbb      	ldrb	r3, [r7, #14]
 8009a40:	7b3a      	ldrb	r2, [r7, #12]
 8009a42:	4911      	ldr	r1, [pc, #68]	; (8009a88 <UARTEx_SetNbDataToProcess+0x94>)
 8009a44:	5c8a      	ldrb	r2, [r1, r2]
 8009a46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a4a:	7b3a      	ldrb	r2, [r7, #12]
 8009a4c:	490f      	ldr	r1, [pc, #60]	; (8009a8c <UARTEx_SetNbDataToProcess+0x98>)
 8009a4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a50:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
 8009a5e:	7b7a      	ldrb	r2, [r7, #13]
 8009a60:	4909      	ldr	r1, [pc, #36]	; (8009a88 <UARTEx_SetNbDataToProcess+0x94>)
 8009a62:	5c8a      	ldrb	r2, [r1, r2]
 8009a64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a68:	7b7a      	ldrb	r2, [r7, #13]
 8009a6a:	4908      	ldr	r1, [pc, #32]	; (8009a8c <UARTEx_SetNbDataToProcess+0x98>)
 8009a6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009a7a:	bf00      	nop
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	08010168 	.word	0x08010168
 8009a8c:	08010170 	.word	0x08010170

08009a90 <__NVIC_SetPriority>:
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	4603      	mov	r3, r0
 8009a98:	6039      	str	r1, [r7, #0]
 8009a9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009a9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	db0a      	blt.n	8009aba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	490c      	ldr	r1, [pc, #48]	; (8009adc <__NVIC_SetPriority+0x4c>)
 8009aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009aae:	0112      	lsls	r2, r2, #4
 8009ab0:	b2d2      	uxtb	r2, r2
 8009ab2:	440b      	add	r3, r1
 8009ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009ab8:	e00a      	b.n	8009ad0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	4908      	ldr	r1, [pc, #32]	; (8009ae0 <__NVIC_SetPriority+0x50>)
 8009ac0:	88fb      	ldrh	r3, [r7, #6]
 8009ac2:	f003 030f 	and.w	r3, r3, #15
 8009ac6:	3b04      	subs	r3, #4
 8009ac8:	0112      	lsls	r2, r2, #4
 8009aca:	b2d2      	uxtb	r2, r2
 8009acc:	440b      	add	r3, r1
 8009ace:	761a      	strb	r2, [r3, #24]
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	e000e100 	.word	0xe000e100
 8009ae0:	e000ed00 	.word	0xe000ed00

08009ae4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009ae8:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <SysTick_Handler+0x1c>)
 8009aea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009aec:	f002 f960 	bl	800bdb0 <xTaskGetSchedulerState>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d001      	beq.n	8009afa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009af6:	f000 fd97 	bl	800a628 <xPortSysTickHandler>
  }
}
 8009afa:	bf00      	nop
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	e000e010 	.word	0xe000e010

08009b04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009b04:	b580      	push	{r7, lr}
 8009b06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009b08:	2100      	movs	r1, #0
 8009b0a:	f06f 0004 	mvn.w	r0, #4
 8009b0e:	f7ff ffbf 	bl	8009a90 <__NVIC_SetPriority>
#endif
}
 8009b12:	bf00      	nop
 8009b14:	bd80      	pop	{r7, pc}
	...

08009b18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b1e:	f3ef 8305 	mrs	r3, IPSR
 8009b22:	603b      	str	r3, [r7, #0]
  return(result);
 8009b24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d003      	beq.n	8009b32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009b2a:	f06f 0305 	mvn.w	r3, #5
 8009b2e:	607b      	str	r3, [r7, #4]
 8009b30:	e00c      	b.n	8009b4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009b32:	4b0a      	ldr	r3, [pc, #40]	; (8009b5c <osKernelInitialize+0x44>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d105      	bne.n	8009b46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009b3a:	4b08      	ldr	r3, [pc, #32]	; (8009b5c <osKernelInitialize+0x44>)
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	607b      	str	r3, [r7, #4]
 8009b44:	e002      	b.n	8009b4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009b46:	f04f 33ff 	mov.w	r3, #4294967295
 8009b4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b4c:	687b      	ldr	r3, [r7, #4]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	370c      	adds	r7, #12
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	240006b0 	.word	0x240006b0

08009b60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b66:	f3ef 8305 	mrs	r3, IPSR
 8009b6a:	603b      	str	r3, [r7, #0]
  return(result);
 8009b6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d003      	beq.n	8009b7a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009b72:	f06f 0305 	mvn.w	r3, #5
 8009b76:	607b      	str	r3, [r7, #4]
 8009b78:	e010      	b.n	8009b9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ba8 <osKernelStart+0x48>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d109      	bne.n	8009b96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b82:	f7ff ffbf 	bl	8009b04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b86:	4b08      	ldr	r3, [pc, #32]	; (8009ba8 <osKernelStart+0x48>)
 8009b88:	2202      	movs	r2, #2
 8009b8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b8c:	f001 fcb4 	bl	800b4f8 <vTaskStartScheduler>
      stat = osOK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	607b      	str	r3, [r7, #4]
 8009b94:	e002      	b.n	8009b9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009b96:	f04f 33ff 	mov.w	r3, #4294967295
 8009b9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b9c:	687b      	ldr	r3, [r7, #4]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	240006b0 	.word	0x240006b0

08009bac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b08e      	sub	sp, #56	; 0x38
 8009bb0:	af04      	add	r7, sp, #16
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bbc:	f3ef 8305 	mrs	r3, IPSR
 8009bc0:	617b      	str	r3, [r7, #20]
  return(result);
 8009bc2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d17e      	bne.n	8009cc6 <osThreadNew+0x11a>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d07b      	beq.n	8009cc6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009bce:	2380      	movs	r3, #128	; 0x80
 8009bd0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009bd2:	2318      	movs	r3, #24
 8009bd4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009bda:	f04f 33ff 	mov.w	r3, #4294967295
 8009bde:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d045      	beq.n	8009c72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d002      	beq.n	8009bf4 <osThreadNew+0x48>
        name = attr->name;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d008      	beq.n	8009c1a <osThreadNew+0x6e>
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	2b38      	cmp	r3, #56	; 0x38
 8009c0c:	d805      	bhi.n	8009c1a <osThreadNew+0x6e>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <osThreadNew+0x72>
        return (NULL);
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	e054      	b.n	8009cc8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d003      	beq.n	8009c2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	089b      	lsrs	r3, r3, #2
 8009c2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00e      	beq.n	8009c54 <osThreadNew+0xa8>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	2bbb      	cmp	r3, #187	; 0xbb
 8009c3c:	d90a      	bls.n	8009c54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d006      	beq.n	8009c54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	695b      	ldr	r3, [r3, #20]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d002      	beq.n	8009c54 <osThreadNew+0xa8>
        mem = 1;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	61bb      	str	r3, [r7, #24]
 8009c52:	e010      	b.n	8009c76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10c      	bne.n	8009c76 <osThreadNew+0xca>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d108      	bne.n	8009c76 <osThreadNew+0xca>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d104      	bne.n	8009c76 <osThreadNew+0xca>
          mem = 0;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	61bb      	str	r3, [r7, #24]
 8009c70:	e001      	b.n	8009c76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d110      	bne.n	8009c9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c84:	9202      	str	r2, [sp, #8]
 8009c86:	9301      	str	r3, [sp, #4]
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	6a3a      	ldr	r2, [r7, #32]
 8009c90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f001 fa44 	bl	800b120 <xTaskCreateStatic>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	613b      	str	r3, [r7, #16]
 8009c9c:	e013      	b.n	8009cc6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d110      	bne.n	8009cc6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	f107 0310 	add.w	r3, r7, #16
 8009cac:	9301      	str	r3, [sp, #4]
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f001 fa8f 	bl	800b1da <xTaskCreate>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d001      	beq.n	8009cc6 <osThreadNew+0x11a>
            hTask = NULL;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009cc6:	693b      	ldr	r3, [r7, #16]
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3728      	adds	r7, #40	; 0x28
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cd8:	f3ef 8305 	mrs	r3, IPSR
 8009cdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cde:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d003      	beq.n	8009cec <osDelay+0x1c>
    stat = osErrorISR;
 8009ce4:	f06f 0305 	mvn.w	r3, #5
 8009ce8:	60fb      	str	r3, [r7, #12]
 8009cea:	e007      	b.n	8009cfc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d002      	beq.n	8009cfc <osDelay+0x2c>
      vTaskDelay(ticks);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f001 fbca 	bl	800b490 <vTaskDelay>
    }
  }

  return (stat);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
	...

08009d08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	4a07      	ldr	r2, [pc, #28]	; (8009d34 <vApplicationGetIdleTaskMemory+0x2c>)
 8009d18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	4a06      	ldr	r2, [pc, #24]	; (8009d38 <vApplicationGetIdleTaskMemory+0x30>)
 8009d1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2280      	movs	r2, #128	; 0x80
 8009d24:	601a      	str	r2, [r3, #0]
}
 8009d26:	bf00      	nop
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	240006b4 	.word	0x240006b4
 8009d38:	24000770 	.word	0x24000770

08009d3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	4a07      	ldr	r2, [pc, #28]	; (8009d68 <vApplicationGetTimerTaskMemory+0x2c>)
 8009d4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	4a06      	ldr	r2, [pc, #24]	; (8009d6c <vApplicationGetTimerTaskMemory+0x30>)
 8009d52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d5a:	601a      	str	r2, [r3, #0]
}
 8009d5c:	bf00      	nop
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	24000970 	.word	0x24000970
 8009d6c:	24000a2c 	.word	0x24000a2c

08009d70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b08a      	sub	sp, #40	; 0x28
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d7c:	f001 fc2c 	bl	800b5d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d80:	4b5b      	ldr	r3, [pc, #364]	; (8009ef0 <pvPortMalloc+0x180>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d88:	f000 f920 	bl	8009fcc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d8c:	4b59      	ldr	r3, [pc, #356]	; (8009ef4 <pvPortMalloc+0x184>)
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4013      	ands	r3, r2
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f040 8093 	bne.w	8009ec0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d01d      	beq.n	8009ddc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009da0:	2208      	movs	r2, #8
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4413      	add	r3, r2
 8009da6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f003 0307 	and.w	r3, r3, #7
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d014      	beq.n	8009ddc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f023 0307 	bic.w	r3, r3, #7
 8009db8:	3308      	adds	r3, #8
 8009dba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f003 0307 	and.w	r3, r3, #7
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00a      	beq.n	8009ddc <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009dd8:	bf00      	nop
 8009dda:	e7fe      	b.n	8009dda <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d06e      	beq.n	8009ec0 <pvPortMalloc+0x150>
 8009de2:	4b45      	ldr	r3, [pc, #276]	; (8009ef8 <pvPortMalloc+0x188>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d869      	bhi.n	8009ec0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009dec:	4b43      	ldr	r3, [pc, #268]	; (8009efc <pvPortMalloc+0x18c>)
 8009dee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009df0:	4b42      	ldr	r3, [pc, #264]	; (8009efc <pvPortMalloc+0x18c>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009df6:	e004      	b.n	8009e02 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d903      	bls.n	8009e14 <pvPortMalloc+0xa4>
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1f1      	bne.n	8009df8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e14:	4b36      	ldr	r3, [pc, #216]	; (8009ef0 <pvPortMalloc+0x180>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d050      	beq.n	8009ec0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2208      	movs	r2, #8
 8009e24:	4413      	add	r3, r2
 8009e26:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	6a3b      	ldr	r3, [r7, #32]
 8009e2e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	685a      	ldr	r2, [r3, #4]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	1ad2      	subs	r2, r2, r3
 8009e38:	2308      	movs	r3, #8
 8009e3a:	005b      	lsls	r3, r3, #1
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d91f      	bls.n	8009e80 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4413      	add	r3, r2
 8009e46:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	f003 0307 	and.w	r3, r3, #7
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00a      	beq.n	8009e68 <pvPortMalloc+0xf8>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	613b      	str	r3, [r7, #16]
}
 8009e64:	bf00      	nop
 8009e66:	e7fe      	b.n	8009e66 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	685a      	ldr	r2, [r3, #4]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	1ad2      	subs	r2, r2, r3
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e7a:	69b8      	ldr	r0, [r7, #24]
 8009e7c:	f000 f908 	bl	800a090 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e80:	4b1d      	ldr	r3, [pc, #116]	; (8009ef8 <pvPortMalloc+0x188>)
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	4a1b      	ldr	r2, [pc, #108]	; (8009ef8 <pvPortMalloc+0x188>)
 8009e8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e8e:	4b1a      	ldr	r3, [pc, #104]	; (8009ef8 <pvPortMalloc+0x188>)
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	4b1b      	ldr	r3, [pc, #108]	; (8009f00 <pvPortMalloc+0x190>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d203      	bcs.n	8009ea2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e9a:	4b17      	ldr	r3, [pc, #92]	; (8009ef8 <pvPortMalloc+0x188>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a18      	ldr	r2, [pc, #96]	; (8009f00 <pvPortMalloc+0x190>)
 8009ea0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea4:	685a      	ldr	r2, [r3, #4]
 8009ea6:	4b13      	ldr	r3, [pc, #76]	; (8009ef4 <pvPortMalloc+0x184>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	431a      	orrs	r2, r3
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009eb6:	4b13      	ldr	r3, [pc, #76]	; (8009f04 <pvPortMalloc+0x194>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	4a11      	ldr	r2, [pc, #68]	; (8009f04 <pvPortMalloc+0x194>)
 8009ebe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ec0:	f001 fb98 	bl	800b5f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	f003 0307 	and.w	r3, r3, #7
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00a      	beq.n	8009ee4 <pvPortMalloc+0x174>
	__asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	60fb      	str	r3, [r7, #12]
}
 8009ee0:	bf00      	nop
 8009ee2:	e7fe      	b.n	8009ee2 <pvPortMalloc+0x172>
	return pvReturn;
 8009ee4:	69fb      	ldr	r3, [r7, #28]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3728      	adds	r7, #40	; 0x28
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	24004a34 	.word	0x24004a34
 8009ef4:	24004a48 	.word	0x24004a48
 8009ef8:	24004a38 	.word	0x24004a38
 8009efc:	24004a2c 	.word	0x24004a2c
 8009f00:	24004a3c 	.word	0x24004a3c
 8009f04:	24004a40 	.word	0x24004a40

08009f08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d04d      	beq.n	8009fb6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f1a:	2308      	movs	r3, #8
 8009f1c:	425b      	negs	r3, r3
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	4413      	add	r3, r2
 8009f22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	4b24      	ldr	r3, [pc, #144]	; (8009fc0 <vPortFree+0xb8>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4013      	ands	r3, r2
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d10a      	bne.n	8009f4c <vPortFree+0x44>
	__asm volatile
 8009f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3a:	f383 8811 	msr	BASEPRI, r3
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	60fb      	str	r3, [r7, #12]
}
 8009f48:	bf00      	nop
 8009f4a:	e7fe      	b.n	8009f4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00a      	beq.n	8009f6a <vPortFree+0x62>
	__asm volatile
 8009f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	60bb      	str	r3, [r7, #8]
}
 8009f66:	bf00      	nop
 8009f68:	e7fe      	b.n	8009f68 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	685a      	ldr	r2, [r3, #4]
 8009f6e:	4b14      	ldr	r3, [pc, #80]	; (8009fc0 <vPortFree+0xb8>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4013      	ands	r3, r2
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d01e      	beq.n	8009fb6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d11a      	bne.n	8009fb6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	685a      	ldr	r2, [r3, #4]
 8009f84:	4b0e      	ldr	r3, [pc, #56]	; (8009fc0 <vPortFree+0xb8>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	43db      	mvns	r3, r3
 8009f8a:	401a      	ands	r2, r3
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f90:	f001 fb22 	bl	800b5d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	685a      	ldr	r2, [r3, #4]
 8009f98:	4b0a      	ldr	r3, [pc, #40]	; (8009fc4 <vPortFree+0xbc>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	4a09      	ldr	r2, [pc, #36]	; (8009fc4 <vPortFree+0xbc>)
 8009fa0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009fa2:	6938      	ldr	r0, [r7, #16]
 8009fa4:	f000 f874 	bl	800a090 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009fa8:	4b07      	ldr	r3, [pc, #28]	; (8009fc8 <vPortFree+0xc0>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	3301      	adds	r3, #1
 8009fae:	4a06      	ldr	r2, [pc, #24]	; (8009fc8 <vPortFree+0xc0>)
 8009fb0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009fb2:	f001 fb1f 	bl	800b5f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009fb6:	bf00      	nop
 8009fb8:	3718      	adds	r7, #24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	24004a48 	.word	0x24004a48
 8009fc4:	24004a38 	.word	0x24004a38
 8009fc8:	24004a44 	.word	0x24004a44

08009fcc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009fd2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009fd6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fd8:	4b27      	ldr	r3, [pc, #156]	; (800a078 <prvHeapInit+0xac>)
 8009fda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f003 0307 	and.w	r3, r3, #7
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00c      	beq.n	800a000 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	3307      	adds	r3, #7
 8009fea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f023 0307 	bic.w	r3, r3, #7
 8009ff2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	4a1f      	ldr	r2, [pc, #124]	; (800a078 <prvHeapInit+0xac>)
 8009ffc:	4413      	add	r3, r2
 8009ffe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a004:	4a1d      	ldr	r2, [pc, #116]	; (800a07c <prvHeapInit+0xb0>)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a00a:	4b1c      	ldr	r3, [pc, #112]	; (800a07c <prvHeapInit+0xb0>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	68ba      	ldr	r2, [r7, #8]
 800a014:	4413      	add	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a018:	2208      	movs	r2, #8
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	1a9b      	subs	r3, r3, r2
 800a01e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f023 0307 	bic.w	r3, r3, #7
 800a026:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	4a15      	ldr	r2, [pc, #84]	; (800a080 <prvHeapInit+0xb4>)
 800a02c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a02e:	4b14      	ldr	r3, [pc, #80]	; (800a080 <prvHeapInit+0xb4>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2200      	movs	r2, #0
 800a034:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a036:	4b12      	ldr	r3, [pc, #72]	; (800a080 <prvHeapInit+0xb4>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2200      	movs	r2, #0
 800a03c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	1ad2      	subs	r2, r2, r3
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a04c:	4b0c      	ldr	r3, [pc, #48]	; (800a080 <prvHeapInit+0xb4>)
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	4a0a      	ldr	r2, [pc, #40]	; (800a084 <prvHeapInit+0xb8>)
 800a05a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	4a09      	ldr	r2, [pc, #36]	; (800a088 <prvHeapInit+0xbc>)
 800a062:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a064:	4b09      	ldr	r3, [pc, #36]	; (800a08c <prvHeapInit+0xc0>)
 800a066:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a06a:	601a      	str	r2, [r3, #0]
}
 800a06c:	bf00      	nop
 800a06e:	3714      	adds	r7, #20
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	24000e2c 	.word	0x24000e2c
 800a07c:	24004a2c 	.word	0x24004a2c
 800a080:	24004a34 	.word	0x24004a34
 800a084:	24004a3c 	.word	0x24004a3c
 800a088:	24004a38 	.word	0x24004a38
 800a08c:	24004a48 	.word	0x24004a48

0800a090 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a098:	4b28      	ldr	r3, [pc, #160]	; (800a13c <prvInsertBlockIntoFreeList+0xac>)
 800a09a:	60fb      	str	r3, [r7, #12]
 800a09c:	e002      	b.n	800a0a4 <prvInsertBlockIntoFreeList+0x14>
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	60fb      	str	r3, [r7, #12]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d8f7      	bhi.n	800a09e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d108      	bne.n	800a0d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	685a      	ldr	r2, [r3, #4]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	441a      	add	r2, r3
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	441a      	add	r2, r3
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d118      	bne.n	800a118 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	4b15      	ldr	r3, [pc, #84]	; (800a140 <prvInsertBlockIntoFreeList+0xb0>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d00d      	beq.n	800a10e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	685a      	ldr	r2, [r3, #4]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	441a      	add	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	601a      	str	r2, [r3, #0]
 800a10c:	e008      	b.n	800a120 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a10e:	4b0c      	ldr	r3, [pc, #48]	; (800a140 <prvInsertBlockIntoFreeList+0xb0>)
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	601a      	str	r2, [r3, #0]
 800a116:	e003      	b.n	800a120 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	429a      	cmp	r2, r3
 800a126:	d002      	beq.n	800a12e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a12e:	bf00      	nop
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	24004a2c 	.word	0x24004a2c
 800a140:	24004a34 	.word	0x24004a34

0800a144 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f103 0208 	add.w	r2, r3, #8
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f04f 32ff 	mov.w	r2, #4294967295
 800a15c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f103 0208 	add.w	r2, r3, #8
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f103 0208 	add.w	r2, r3, #8
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a192:	bf00      	nop
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a19e:	b480      	push	{r7}
 800a1a0:	b085      	sub	sp, #20
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	689a      	ldr	r2, [r3, #8]
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	683a      	ldr	r2, [r7, #0]
 800a1c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	683a      	ldr	r2, [r7, #0]
 800a1c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	1c5a      	adds	r2, r3, #1
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	601a      	str	r2, [r3, #0]
}
 800a1da:	bf00      	nop
 800a1dc:	3714      	adds	r7, #20
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b085      	sub	sp, #20
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1fc:	d103      	bne.n	800a206 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	60fb      	str	r3, [r7, #12]
 800a204:	e00c      	b.n	800a220 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	3308      	adds	r3, #8
 800a20a:	60fb      	str	r3, [r7, #12]
 800a20c:	e002      	b.n	800a214 <vListInsert+0x2e>
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	60fb      	str	r3, [r7, #12]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d2f6      	bcs.n	800a20e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	685a      	ldr	r2, [r3, #4]
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	683a      	ldr	r2, [r7, #0]
 800a23a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	1c5a      	adds	r2, r3, #1
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	601a      	str	r2, [r3, #0]
}
 800a24c:	bf00      	nop
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	6892      	ldr	r2, [r2, #8]
 800a26e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	6852      	ldr	r2, [r2, #4]
 800a278:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	429a      	cmp	r2, r3
 800a282:	d103      	bne.n	800a28c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	689a      	ldr	r2, [r3, #8]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	1e5a      	subs	r2, r3, #1
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3714      	adds	r7, #20
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	3b04      	subs	r3, #4
 800a2bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a2c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	3b04      	subs	r3, #4
 800a2ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	f023 0201 	bic.w	r2, r3, #1
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	3b04      	subs	r3, #4
 800a2da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a2dc:	4a0c      	ldr	r2, [pc, #48]	; (800a310 <pxPortInitialiseStack+0x64>)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	3b14      	subs	r3, #20
 800a2e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	3b04      	subs	r3, #4
 800a2f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f06f 0202 	mvn.w	r2, #2
 800a2fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	3b20      	subs	r3, #32
 800a300:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a302:	68fb      	ldr	r3, [r7, #12]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr
 800a310:	0800a315 	.word	0x0800a315

0800a314 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a314:	b480      	push	{r7}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a31a:	2300      	movs	r3, #0
 800a31c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a31e:	4b12      	ldr	r3, [pc, #72]	; (800a368 <prvTaskExitError+0x54>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a326:	d00a      	beq.n	800a33e <prvTaskExitError+0x2a>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	60fb      	str	r3, [r7, #12]
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <prvTaskExitError+0x28>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	60bb      	str	r3, [r7, #8]
}
 800a350:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a352:	bf00      	nop
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d0fc      	beq.n	800a354 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a35a:	bf00      	nop
 800a35c:	bf00      	nop
 800a35e:	3714      	adds	r7, #20
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	24000028 	.word	0x24000028
 800a36c:	00000000 	.word	0x00000000

0800a370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a370:	4b07      	ldr	r3, [pc, #28]	; (800a390 <pxCurrentTCBConst2>)
 800a372:	6819      	ldr	r1, [r3, #0]
 800a374:	6808      	ldr	r0, [r1, #0]
 800a376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a37a:	f380 8809 	msr	PSP, r0
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f04f 0000 	mov.w	r0, #0
 800a386:	f380 8811 	msr	BASEPRI, r0
 800a38a:	4770      	bx	lr
 800a38c:	f3af 8000 	nop.w

0800a390 <pxCurrentTCBConst2>:
 800a390:	24004a94 	.word	0x24004a94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a394:	bf00      	nop
 800a396:	bf00      	nop

0800a398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a398:	4808      	ldr	r0, [pc, #32]	; (800a3bc <prvPortStartFirstTask+0x24>)
 800a39a:	6800      	ldr	r0, [r0, #0]
 800a39c:	6800      	ldr	r0, [r0, #0]
 800a39e:	f380 8808 	msr	MSP, r0
 800a3a2:	f04f 0000 	mov.w	r0, #0
 800a3a6:	f380 8814 	msr	CONTROL, r0
 800a3aa:	b662      	cpsie	i
 800a3ac:	b661      	cpsie	f
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	f3bf 8f6f 	isb	sy
 800a3b6:	df00      	svc	0
 800a3b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a3ba:	bf00      	nop
 800a3bc:	e000ed08 	.word	0xe000ed08

0800a3c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a3c6:	4b46      	ldr	r3, [pc, #280]	; (800a4e0 <xPortStartScheduler+0x120>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a46      	ldr	r2, [pc, #280]	; (800a4e4 <xPortStartScheduler+0x124>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d10a      	bne.n	800a3e6 <xPortStartScheduler+0x26>
	__asm volatile
 800a3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d4:	f383 8811 	msr	BASEPRI, r3
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	613b      	str	r3, [r7, #16]
}
 800a3e2:	bf00      	nop
 800a3e4:	e7fe      	b.n	800a3e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a3e6:	4b3e      	ldr	r3, [pc, #248]	; (800a4e0 <xPortStartScheduler+0x120>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a3f      	ldr	r2, [pc, #252]	; (800a4e8 <xPortStartScheduler+0x128>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d10a      	bne.n	800a406 <xPortStartScheduler+0x46>
	__asm volatile
 800a3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	60fb      	str	r3, [r7, #12]
}
 800a402:	bf00      	nop
 800a404:	e7fe      	b.n	800a404 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a406:	4b39      	ldr	r3, [pc, #228]	; (800a4ec <xPortStartScheduler+0x12c>)
 800a408:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	22ff      	movs	r2, #255	; 0xff
 800a416:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a420:	78fb      	ldrb	r3, [r7, #3]
 800a422:	b2db      	uxtb	r3, r3
 800a424:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a428:	b2da      	uxtb	r2, r3
 800a42a:	4b31      	ldr	r3, [pc, #196]	; (800a4f0 <xPortStartScheduler+0x130>)
 800a42c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a42e:	4b31      	ldr	r3, [pc, #196]	; (800a4f4 <xPortStartScheduler+0x134>)
 800a430:	2207      	movs	r2, #7
 800a432:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a434:	e009      	b.n	800a44a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a436:	4b2f      	ldr	r3, [pc, #188]	; (800a4f4 <xPortStartScheduler+0x134>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	3b01      	subs	r3, #1
 800a43c:	4a2d      	ldr	r2, [pc, #180]	; (800a4f4 <xPortStartScheduler+0x134>)
 800a43e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a440:	78fb      	ldrb	r3, [r7, #3]
 800a442:	b2db      	uxtb	r3, r3
 800a444:	005b      	lsls	r3, r3, #1
 800a446:	b2db      	uxtb	r3, r3
 800a448:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a44a:	78fb      	ldrb	r3, [r7, #3]
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a452:	2b80      	cmp	r3, #128	; 0x80
 800a454:	d0ef      	beq.n	800a436 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a456:	4b27      	ldr	r3, [pc, #156]	; (800a4f4 <xPortStartScheduler+0x134>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f1c3 0307 	rsb	r3, r3, #7
 800a45e:	2b04      	cmp	r3, #4
 800a460:	d00a      	beq.n	800a478 <xPortStartScheduler+0xb8>
	__asm volatile
 800a462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a466:	f383 8811 	msr	BASEPRI, r3
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	60bb      	str	r3, [r7, #8]
}
 800a474:	bf00      	nop
 800a476:	e7fe      	b.n	800a476 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a478:	4b1e      	ldr	r3, [pc, #120]	; (800a4f4 <xPortStartScheduler+0x134>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	021b      	lsls	r3, r3, #8
 800a47e:	4a1d      	ldr	r2, [pc, #116]	; (800a4f4 <xPortStartScheduler+0x134>)
 800a480:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a482:	4b1c      	ldr	r3, [pc, #112]	; (800a4f4 <xPortStartScheduler+0x134>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a48a:	4a1a      	ldr	r2, [pc, #104]	; (800a4f4 <xPortStartScheduler+0x134>)
 800a48c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	b2da      	uxtb	r2, r3
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a496:	4b18      	ldr	r3, [pc, #96]	; (800a4f8 <xPortStartScheduler+0x138>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a17      	ldr	r2, [pc, #92]	; (800a4f8 <xPortStartScheduler+0x138>)
 800a49c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a4a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a4a2:	4b15      	ldr	r3, [pc, #84]	; (800a4f8 <xPortStartScheduler+0x138>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a14      	ldr	r2, [pc, #80]	; (800a4f8 <xPortStartScheduler+0x138>)
 800a4a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a4ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a4ae:	f000 f8dd 	bl	800a66c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a4b2:	4b12      	ldr	r3, [pc, #72]	; (800a4fc <xPortStartScheduler+0x13c>)
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a4b8:	f000 f8fc 	bl	800a6b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a4bc:	4b10      	ldr	r3, [pc, #64]	; (800a500 <xPortStartScheduler+0x140>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a0f      	ldr	r2, [pc, #60]	; (800a500 <xPortStartScheduler+0x140>)
 800a4c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a4c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a4c8:	f7ff ff66 	bl	800a398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a4cc:	f001 f9fa 	bl	800b8c4 <vTaskSwitchContext>
	prvTaskExitError();
 800a4d0:	f7ff ff20 	bl	800a314 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3718      	adds	r7, #24
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	e000ed00 	.word	0xe000ed00
 800a4e4:	410fc271 	.word	0x410fc271
 800a4e8:	410fc270 	.word	0x410fc270
 800a4ec:	e000e400 	.word	0xe000e400
 800a4f0:	24004a4c 	.word	0x24004a4c
 800a4f4:	24004a50 	.word	0x24004a50
 800a4f8:	e000ed20 	.word	0xe000ed20
 800a4fc:	24000028 	.word	0x24000028
 800a500:	e000ef34 	.word	0xe000ef34

0800a504 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
	__asm volatile
 800a50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50e:	f383 8811 	msr	BASEPRI, r3
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	607b      	str	r3, [r7, #4]
}
 800a51c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a51e:	4b0f      	ldr	r3, [pc, #60]	; (800a55c <vPortEnterCritical+0x58>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	3301      	adds	r3, #1
 800a524:	4a0d      	ldr	r2, [pc, #52]	; (800a55c <vPortEnterCritical+0x58>)
 800a526:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a528:	4b0c      	ldr	r3, [pc, #48]	; (800a55c <vPortEnterCritical+0x58>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d10f      	bne.n	800a550 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a530:	4b0b      	ldr	r3, [pc, #44]	; (800a560 <vPortEnterCritical+0x5c>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00a      	beq.n	800a550 <vPortEnterCritical+0x4c>
	__asm volatile
 800a53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53e:	f383 8811 	msr	BASEPRI, r3
 800a542:	f3bf 8f6f 	isb	sy
 800a546:	f3bf 8f4f 	dsb	sy
 800a54a:	603b      	str	r3, [r7, #0]
}
 800a54c:	bf00      	nop
 800a54e:	e7fe      	b.n	800a54e <vPortEnterCritical+0x4a>
	}
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	24000028 	.word	0x24000028
 800a560:	e000ed04 	.word	0xe000ed04

0800a564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a56a:	4b12      	ldr	r3, [pc, #72]	; (800a5b4 <vPortExitCritical+0x50>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10a      	bne.n	800a588 <vPortExitCritical+0x24>
	__asm volatile
 800a572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	607b      	str	r3, [r7, #4]
}
 800a584:	bf00      	nop
 800a586:	e7fe      	b.n	800a586 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a588:	4b0a      	ldr	r3, [pc, #40]	; (800a5b4 <vPortExitCritical+0x50>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	3b01      	subs	r3, #1
 800a58e:	4a09      	ldr	r2, [pc, #36]	; (800a5b4 <vPortExitCritical+0x50>)
 800a590:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a592:	4b08      	ldr	r3, [pc, #32]	; (800a5b4 <vPortExitCritical+0x50>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d105      	bne.n	800a5a6 <vPortExitCritical+0x42>
 800a59a:	2300      	movs	r3, #0
 800a59c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a5a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a5a6:	bf00      	nop
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	24000028 	.word	0x24000028
	...

0800a5c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a5c0:	f3ef 8009 	mrs	r0, PSP
 800a5c4:	f3bf 8f6f 	isb	sy
 800a5c8:	4b15      	ldr	r3, [pc, #84]	; (800a620 <pxCurrentTCBConst>)
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	f01e 0f10 	tst.w	lr, #16
 800a5d0:	bf08      	it	eq
 800a5d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a5d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5da:	6010      	str	r0, [r2, #0]
 800a5dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a5e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a5e4:	f380 8811 	msr	BASEPRI, r0
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f001 f968 	bl	800b8c4 <vTaskSwitchContext>
 800a5f4:	f04f 0000 	mov.w	r0, #0
 800a5f8:	f380 8811 	msr	BASEPRI, r0
 800a5fc:	bc09      	pop	{r0, r3}
 800a5fe:	6819      	ldr	r1, [r3, #0]
 800a600:	6808      	ldr	r0, [r1, #0]
 800a602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a606:	f01e 0f10 	tst.w	lr, #16
 800a60a:	bf08      	it	eq
 800a60c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a610:	f380 8809 	msr	PSP, r0
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	f3af 8000 	nop.w

0800a620 <pxCurrentTCBConst>:
 800a620:	24004a94 	.word	0x24004a94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a624:	bf00      	nop
 800a626:	bf00      	nop

0800a628 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	607b      	str	r3, [r7, #4]
}
 800a640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a642:	f001 f885 	bl	800b750 <xTaskIncrementTick>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d003      	beq.n	800a654 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a64c:	4b06      	ldr	r3, [pc, #24]	; (800a668 <xPortSysTickHandler+0x40>)
 800a64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a652:	601a      	str	r2, [r3, #0]
 800a654:	2300      	movs	r3, #0
 800a656:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	f383 8811 	msr	BASEPRI, r3
}
 800a65e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a660:	bf00      	nop
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	e000ed04 	.word	0xe000ed04

0800a66c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a66c:	b480      	push	{r7}
 800a66e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a670:	4b0b      	ldr	r3, [pc, #44]	; (800a6a0 <vPortSetupTimerInterrupt+0x34>)
 800a672:	2200      	movs	r2, #0
 800a674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a676:	4b0b      	ldr	r3, [pc, #44]	; (800a6a4 <vPortSetupTimerInterrupt+0x38>)
 800a678:	2200      	movs	r2, #0
 800a67a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a67c:	4b0a      	ldr	r3, [pc, #40]	; (800a6a8 <vPortSetupTimerInterrupt+0x3c>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a0a      	ldr	r2, [pc, #40]	; (800a6ac <vPortSetupTimerInterrupt+0x40>)
 800a682:	fba2 2303 	umull	r2, r3, r2, r3
 800a686:	099b      	lsrs	r3, r3, #6
 800a688:	4a09      	ldr	r2, [pc, #36]	; (800a6b0 <vPortSetupTimerInterrupt+0x44>)
 800a68a:	3b01      	subs	r3, #1
 800a68c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a68e:	4b04      	ldr	r3, [pc, #16]	; (800a6a0 <vPortSetupTimerInterrupt+0x34>)
 800a690:	2207      	movs	r2, #7
 800a692:	601a      	str	r2, [r3, #0]
}
 800a694:	bf00      	nop
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	e000e010 	.word	0xe000e010
 800a6a4:	e000e018 	.word	0xe000e018
 800a6a8:	24000000 	.word	0x24000000
 800a6ac:	10624dd3 	.word	0x10624dd3
 800a6b0:	e000e014 	.word	0xe000e014

0800a6b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a6b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a6c4 <vPortEnableVFP+0x10>
 800a6b8:	6801      	ldr	r1, [r0, #0]
 800a6ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a6be:	6001      	str	r1, [r0, #0]
 800a6c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a6c2:	bf00      	nop
 800a6c4:	e000ed88 	.word	0xe000ed88

0800a6c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a6ce:	f3ef 8305 	mrs	r3, IPSR
 800a6d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2b0f      	cmp	r3, #15
 800a6d8:	d914      	bls.n	800a704 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a6da:	4a17      	ldr	r2, [pc, #92]	; (800a738 <vPortValidateInterruptPriority+0x70>)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	4413      	add	r3, r2
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a6e4:	4b15      	ldr	r3, [pc, #84]	; (800a73c <vPortValidateInterruptPriority+0x74>)
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	7afa      	ldrb	r2, [r7, #11]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d20a      	bcs.n	800a704 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f2:	f383 8811 	msr	BASEPRI, r3
 800a6f6:	f3bf 8f6f 	isb	sy
 800a6fa:	f3bf 8f4f 	dsb	sy
 800a6fe:	607b      	str	r3, [r7, #4]
}
 800a700:	bf00      	nop
 800a702:	e7fe      	b.n	800a702 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a704:	4b0e      	ldr	r3, [pc, #56]	; (800a740 <vPortValidateInterruptPriority+0x78>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a70c:	4b0d      	ldr	r3, [pc, #52]	; (800a744 <vPortValidateInterruptPriority+0x7c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	429a      	cmp	r2, r3
 800a712:	d90a      	bls.n	800a72a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a718:	f383 8811 	msr	BASEPRI, r3
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	f3bf 8f4f 	dsb	sy
 800a724:	603b      	str	r3, [r7, #0]
}
 800a726:	bf00      	nop
 800a728:	e7fe      	b.n	800a728 <vPortValidateInterruptPriority+0x60>
	}
 800a72a:	bf00      	nop
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop
 800a738:	e000e3f0 	.word	0xe000e3f0
 800a73c:	24004a4c 	.word	0x24004a4c
 800a740:	e000ed0c 	.word	0xe000ed0c
 800a744:	24004a50 	.word	0x24004a50

0800a748 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10a      	bne.n	800a772 <xQueueGenericReset+0x2a>
	__asm volatile
 800a75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a760:	f383 8811 	msr	BASEPRI, r3
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	60bb      	str	r3, [r7, #8]
}
 800a76e:	bf00      	nop
 800a770:	e7fe      	b.n	800a770 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a772:	f7ff fec7 	bl	800a504 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a77e:	68f9      	ldr	r1, [r7, #12]
 800a780:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a782:	fb01 f303 	mul.w	r3, r1, r3
 800a786:	441a      	add	r2, r3
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	68f9      	ldr	r1, [r7, #12]
 800a7a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a7a8:	fb01 f303 	mul.w	r3, r1, r3
 800a7ac:	441a      	add	r2, r3
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	22ff      	movs	r2, #255	; 0xff
 800a7b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	22ff      	movs	r2, #255	; 0xff
 800a7be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d114      	bne.n	800a7f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d01a      	beq.n	800a806 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	3310      	adds	r3, #16
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f001 f929 	bl	800ba2c <xTaskRemoveFromEventList>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d012      	beq.n	800a806 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a7e0:	4b0c      	ldr	r3, [pc, #48]	; (800a814 <xQueueGenericReset+0xcc>)
 800a7e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7e6:	601a      	str	r2, [r3, #0]
 800a7e8:	f3bf 8f4f 	dsb	sy
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	e009      	b.n	800a806 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	3310      	adds	r3, #16
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7ff fca4 	bl	800a144 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	3324      	adds	r3, #36	; 0x24
 800a800:	4618      	mov	r0, r3
 800a802:	f7ff fc9f 	bl	800a144 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a806:	f7ff fead 	bl	800a564 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a80a:	2301      	movs	r3, #1
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	e000ed04 	.word	0xe000ed04

0800a818 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b08e      	sub	sp, #56	; 0x38
 800a81c:	af02      	add	r7, sp, #8
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
 800a824:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10a      	bne.n	800a842 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a830:	f383 8811 	msr	BASEPRI, r3
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a83e:	bf00      	nop
 800a840:	e7fe      	b.n	800a840 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d10a      	bne.n	800a85e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84c:	f383 8811 	msr	BASEPRI, r3
 800a850:	f3bf 8f6f 	isb	sy
 800a854:	f3bf 8f4f 	dsb	sy
 800a858:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a85a:	bf00      	nop
 800a85c:	e7fe      	b.n	800a85c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d002      	beq.n	800a86a <xQueueGenericCreateStatic+0x52>
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <xQueueGenericCreateStatic+0x56>
 800a86a:	2301      	movs	r3, #1
 800a86c:	e000      	b.n	800a870 <xQueueGenericCreateStatic+0x58>
 800a86e:	2300      	movs	r3, #0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d10a      	bne.n	800a88a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a878:	f383 8811 	msr	BASEPRI, r3
 800a87c:	f3bf 8f6f 	isb	sy
 800a880:	f3bf 8f4f 	dsb	sy
 800a884:	623b      	str	r3, [r7, #32]
}
 800a886:	bf00      	nop
 800a888:	e7fe      	b.n	800a888 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d102      	bne.n	800a896 <xQueueGenericCreateStatic+0x7e>
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d101      	bne.n	800a89a <xQueueGenericCreateStatic+0x82>
 800a896:	2301      	movs	r3, #1
 800a898:	e000      	b.n	800a89c <xQueueGenericCreateStatic+0x84>
 800a89a:	2300      	movs	r3, #0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10a      	bne.n	800a8b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	61fb      	str	r3, [r7, #28]
}
 800a8b2:	bf00      	nop
 800a8b4:	e7fe      	b.n	800a8b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a8b6:	2350      	movs	r3, #80	; 0x50
 800a8b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	2b50      	cmp	r3, #80	; 0x50
 800a8be:	d00a      	beq.n	800a8d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	61bb      	str	r3, [r7, #24]
}
 800a8d2:	bf00      	nop
 800a8d4:	e7fe      	b.n	800a8d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a8d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00d      	beq.n	800a8fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a8ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f0:	9300      	str	r3, [sp, #0]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	68b9      	ldr	r1, [r7, #8]
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f000 f805 	bl	800a908 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a900:	4618      	mov	r0, r3
 800a902:	3730      	adds	r7, #48	; 0x30
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
 800a914:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d103      	bne.n	800a924 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	69ba      	ldr	r2, [r7, #24]
 800a920:	601a      	str	r2, [r3, #0]
 800a922:	e002      	b.n	800a92a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	68ba      	ldr	r2, [r7, #8]
 800a934:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a936:	2101      	movs	r1, #1
 800a938:	69b8      	ldr	r0, [r7, #24]
 800a93a:	f7ff ff05 	bl	800a748 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	78fa      	ldrb	r2, [r7, #3]
 800a942:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a946:	bf00      	nop
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
	...

0800a950 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b08e      	sub	sp, #56	; 0x38
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
 800a95c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a95e:	2300      	movs	r3, #0
 800a960:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d10a      	bne.n	800a982 <xQueueGenericSend+0x32>
	__asm volatile
 800a96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a970:	f383 8811 	msr	BASEPRI, r3
 800a974:	f3bf 8f6f 	isb	sy
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a97e:	bf00      	nop
 800a980:	e7fe      	b.n	800a980 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d103      	bne.n	800a990 <xQueueGenericSend+0x40>
 800a988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d101      	bne.n	800a994 <xQueueGenericSend+0x44>
 800a990:	2301      	movs	r3, #1
 800a992:	e000      	b.n	800a996 <xQueueGenericSend+0x46>
 800a994:	2300      	movs	r3, #0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d10a      	bne.n	800a9b0 <xQueueGenericSend+0x60>
	__asm volatile
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a9ac:	bf00      	nop
 800a9ae:	e7fe      	b.n	800a9ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	2b02      	cmp	r3, #2
 800a9b4:	d103      	bne.n	800a9be <xQueueGenericSend+0x6e>
 800a9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d101      	bne.n	800a9c2 <xQueueGenericSend+0x72>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e000      	b.n	800a9c4 <xQueueGenericSend+0x74>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d10a      	bne.n	800a9de <xQueueGenericSend+0x8e>
	__asm volatile
 800a9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9cc:	f383 8811 	msr	BASEPRI, r3
 800a9d0:	f3bf 8f6f 	isb	sy
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	623b      	str	r3, [r7, #32]
}
 800a9da:	bf00      	nop
 800a9dc:	e7fe      	b.n	800a9dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9de:	f001 f9e7 	bl	800bdb0 <xTaskGetSchedulerState>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d102      	bne.n	800a9ee <xQueueGenericSend+0x9e>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <xQueueGenericSend+0xa2>
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e000      	b.n	800a9f4 <xQueueGenericSend+0xa4>
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d10a      	bne.n	800aa0e <xQueueGenericSend+0xbe>
	__asm volatile
 800a9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fc:	f383 8811 	msr	BASEPRI, r3
 800aa00:	f3bf 8f6f 	isb	sy
 800aa04:	f3bf 8f4f 	dsb	sy
 800aa08:	61fb      	str	r3, [r7, #28]
}
 800aa0a:	bf00      	nop
 800aa0c:	e7fe      	b.n	800aa0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa0e:	f7ff fd79 	bl	800a504 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d302      	bcc.n	800aa24 <xQueueGenericSend+0xd4>
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d129      	bne.n	800aa78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa24:	683a      	ldr	r2, [r7, #0]
 800aa26:	68b9      	ldr	r1, [r7, #8]
 800aa28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa2a:	f000 fa0b 	bl	800ae44 <prvCopyDataToQueue>
 800aa2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d010      	beq.n	800aa5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3a:	3324      	adds	r3, #36	; 0x24
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 fff5 	bl	800ba2c <xTaskRemoveFromEventList>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d013      	beq.n	800aa70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aa48:	4b3f      	ldr	r3, [pc, #252]	; (800ab48 <xQueueGenericSend+0x1f8>)
 800aa4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa4e:	601a      	str	r2, [r3, #0]
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	e00a      	b.n	800aa70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aa5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d007      	beq.n	800aa70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aa60:	4b39      	ldr	r3, [pc, #228]	; (800ab48 <xQueueGenericSend+0x1f8>)
 800aa62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa66:	601a      	str	r2, [r3, #0]
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aa70:	f7ff fd78 	bl	800a564 <vPortExitCritical>
				return pdPASS;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e063      	b.n	800ab40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d103      	bne.n	800aa86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa7e:	f7ff fd71 	bl	800a564 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aa82:	2300      	movs	r3, #0
 800aa84:	e05c      	b.n	800ab40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d106      	bne.n	800aa9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa8c:	f107 0314 	add.w	r3, r7, #20
 800aa90:	4618      	mov	r0, r3
 800aa92:	f001 f82f 	bl	800baf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa96:	2301      	movs	r3, #1
 800aa98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa9a:	f7ff fd63 	bl	800a564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa9e:	f000 fd9b 	bl	800b5d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aaa2:	f7ff fd2f 	bl	800a504 <vPortEnterCritical>
 800aaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aaac:	b25b      	sxtb	r3, r3
 800aaae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab2:	d103      	bne.n	800aabc <xQueueGenericSend+0x16c>
 800aab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aac2:	b25b      	sxtb	r3, r3
 800aac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac8:	d103      	bne.n	800aad2 <xQueueGenericSend+0x182>
 800aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aad2:	f7ff fd47 	bl	800a564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aad6:	1d3a      	adds	r2, r7, #4
 800aad8:	f107 0314 	add.w	r3, r7, #20
 800aadc:	4611      	mov	r1, r2
 800aade:	4618      	mov	r0, r3
 800aae0:	f001 f81e 	bl	800bb20 <xTaskCheckForTimeOut>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d124      	bne.n	800ab34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aaea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaec:	f000 faa2 	bl	800b034 <prvIsQueueFull>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d018      	beq.n	800ab28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf8:	3310      	adds	r3, #16
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	4611      	mov	r1, r2
 800aafe:	4618      	mov	r0, r3
 800ab00:	f000 ff44 	bl	800b98c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ab04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab06:	f000 fa2d 	bl	800af64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ab0a:	f000 fd73 	bl	800b5f4 <xTaskResumeAll>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f47f af7c 	bne.w	800aa0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ab16:	4b0c      	ldr	r3, [pc, #48]	; (800ab48 <xQueueGenericSend+0x1f8>)
 800ab18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab1c:	601a      	str	r2, [r3, #0]
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	e772      	b.n	800aa0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ab28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab2a:	f000 fa1b 	bl	800af64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab2e:	f000 fd61 	bl	800b5f4 <xTaskResumeAll>
 800ab32:	e76c      	b.n	800aa0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ab34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab36:	f000 fa15 	bl	800af64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab3a:	f000 fd5b 	bl	800b5f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ab3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3738      	adds	r7, #56	; 0x38
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	e000ed04 	.word	0xe000ed04

0800ab4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b090      	sub	sp, #64	; 0x40
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
 800ab58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ab5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d10a      	bne.n	800ab7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ab64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab76:	bf00      	nop
 800ab78:	e7fe      	b.n	800ab78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d103      	bne.n	800ab88 <xQueueGenericSendFromISR+0x3c>
 800ab80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d101      	bne.n	800ab8c <xQueueGenericSendFromISR+0x40>
 800ab88:	2301      	movs	r3, #1
 800ab8a:	e000      	b.n	800ab8e <xQueueGenericSendFromISR+0x42>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10a      	bne.n	800aba8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ab92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab96:	f383 8811 	msr	BASEPRI, r3
 800ab9a:	f3bf 8f6f 	isb	sy
 800ab9e:	f3bf 8f4f 	dsb	sy
 800aba2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aba4:	bf00      	nop
 800aba6:	e7fe      	b.n	800aba6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d103      	bne.n	800abb6 <xQueueGenericSendFromISR+0x6a>
 800abae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d101      	bne.n	800abba <xQueueGenericSendFromISR+0x6e>
 800abb6:	2301      	movs	r3, #1
 800abb8:	e000      	b.n	800abbc <xQueueGenericSendFromISR+0x70>
 800abba:	2300      	movs	r3, #0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d10a      	bne.n	800abd6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800abc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	623b      	str	r3, [r7, #32]
}
 800abd2:	bf00      	nop
 800abd4:	e7fe      	b.n	800abd4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abd6:	f7ff fd77 	bl	800a6c8 <vPortValidateInterruptPriority>
	__asm volatile
 800abda:	f3ef 8211 	mrs	r2, BASEPRI
 800abde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	61fa      	str	r2, [r7, #28]
 800abf0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800abf2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abf4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800abf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d302      	bcc.n	800ac08 <xQueueGenericSendFromISR+0xbc>
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d12f      	bne.n	800ac68 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ac08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac16:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac18:	683a      	ldr	r2, [r7, #0]
 800ac1a:	68b9      	ldr	r1, [r7, #8]
 800ac1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ac1e:	f000 f911 	bl	800ae44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac22:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ac26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac2a:	d112      	bne.n	800ac52 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d016      	beq.n	800ac62 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac36:	3324      	adds	r3, #36	; 0x24
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f000 fef7 	bl	800ba2c <xTaskRemoveFromEventList>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00e      	beq.n	800ac62 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00b      	beq.n	800ac62 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	601a      	str	r2, [r3, #0]
 800ac50:	e007      	b.n	800ac62 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ac56:	3301      	adds	r3, #1
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	b25a      	sxtb	r2, r3
 800ac5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ac62:	2301      	movs	r3, #1
 800ac64:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ac66:	e001      	b.n	800ac6c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac6e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	f383 8811 	msr	BASEPRI, r3
}
 800ac76:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3740      	adds	r7, #64	; 0x40
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
	...

0800ac84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b08c      	sub	sp, #48	; 0x30
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac90:	2300      	movs	r3, #0
 800ac92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d10a      	bne.n	800acb4 <xQueueReceive+0x30>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	623b      	str	r3, [r7, #32]
}
 800acb0:	bf00      	nop
 800acb2:	e7fe      	b.n	800acb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d103      	bne.n	800acc2 <xQueueReceive+0x3e>
 800acba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d101      	bne.n	800acc6 <xQueueReceive+0x42>
 800acc2:	2301      	movs	r3, #1
 800acc4:	e000      	b.n	800acc8 <xQueueReceive+0x44>
 800acc6:	2300      	movs	r3, #0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10a      	bne.n	800ace2 <xQueueReceive+0x5e>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	61fb      	str	r3, [r7, #28]
}
 800acde:	bf00      	nop
 800ace0:	e7fe      	b.n	800ace0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ace2:	f001 f865 	bl	800bdb0 <xTaskGetSchedulerState>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d102      	bne.n	800acf2 <xQueueReceive+0x6e>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d101      	bne.n	800acf6 <xQueueReceive+0x72>
 800acf2:	2301      	movs	r3, #1
 800acf4:	e000      	b.n	800acf8 <xQueueReceive+0x74>
 800acf6:	2300      	movs	r3, #0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10a      	bne.n	800ad12 <xQueueReceive+0x8e>
	__asm volatile
 800acfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	61bb      	str	r3, [r7, #24]
}
 800ad0e:	bf00      	nop
 800ad10:	e7fe      	b.n	800ad10 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad12:	f7ff fbf7 	bl	800a504 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d01f      	beq.n	800ad62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad22:	68b9      	ldr	r1, [r7, #8]
 800ad24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad26:	f000 f8f7 	bl	800af18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2c:	1e5a      	subs	r2, r3, #1
 800ad2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00f      	beq.n	800ad5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3c:	3310      	adds	r3, #16
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f000 fe74 	bl	800ba2c <xTaskRemoveFromEventList>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d007      	beq.n	800ad5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad4a:	4b3d      	ldr	r3, [pc, #244]	; (800ae40 <xQueueReceive+0x1bc>)
 800ad4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad50:	601a      	str	r2, [r3, #0]
 800ad52:	f3bf 8f4f 	dsb	sy
 800ad56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad5a:	f7ff fc03 	bl	800a564 <vPortExitCritical>
				return pdPASS;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e069      	b.n	800ae36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d103      	bne.n	800ad70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad68:	f7ff fbfc 	bl	800a564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	e062      	b.n	800ae36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad76:	f107 0310 	add.w	r3, r7, #16
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 feba 	bl	800baf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad80:	2301      	movs	r3, #1
 800ad82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad84:	f7ff fbee 	bl	800a564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad88:	f000 fc26 	bl	800b5d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad8c:	f7ff fbba 	bl	800a504 <vPortEnterCritical>
 800ad90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad96:	b25b      	sxtb	r3, r3
 800ad98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9c:	d103      	bne.n	800ada6 <xQueueReceive+0x122>
 800ad9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ada6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adac:	b25b      	sxtb	r3, r3
 800adae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb2:	d103      	bne.n	800adbc <xQueueReceive+0x138>
 800adb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb6:	2200      	movs	r2, #0
 800adb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adbc:	f7ff fbd2 	bl	800a564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800adc0:	1d3a      	adds	r2, r7, #4
 800adc2:	f107 0310 	add.w	r3, r7, #16
 800adc6:	4611      	mov	r1, r2
 800adc8:	4618      	mov	r0, r3
 800adca:	f000 fea9 	bl	800bb20 <xTaskCheckForTimeOut>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d123      	bne.n	800ae1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800add4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800add6:	f000 f917 	bl	800b008 <prvIsQueueEmpty>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d017      	beq.n	800ae10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ade0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade2:	3324      	adds	r3, #36	; 0x24
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	4611      	mov	r1, r2
 800ade8:	4618      	mov	r0, r3
 800adea:	f000 fdcf 	bl	800b98c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800adee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adf0:	f000 f8b8 	bl	800af64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800adf4:	f000 fbfe 	bl	800b5f4 <xTaskResumeAll>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d189      	bne.n	800ad12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800adfe:	4b10      	ldr	r3, [pc, #64]	; (800ae40 <xQueueReceive+0x1bc>)
 800ae00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae04:	601a      	str	r2, [r3, #0]
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	f3bf 8f6f 	isb	sy
 800ae0e:	e780      	b.n	800ad12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae12:	f000 f8a7 	bl	800af64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae16:	f000 fbed 	bl	800b5f4 <xTaskResumeAll>
 800ae1a:	e77a      	b.n	800ad12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae1e:	f000 f8a1 	bl	800af64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae22:	f000 fbe7 	bl	800b5f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae28:	f000 f8ee 	bl	800b008 <prvIsQueueEmpty>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f43f af6f 	beq.w	800ad12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3730      	adds	r7, #48	; 0x30
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	e000ed04 	.word	0xe000ed04

0800ae44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae50:	2300      	movs	r3, #0
 800ae52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10d      	bne.n	800ae7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d14d      	bne.n	800af06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f000 ffbc 	bl	800bdec <xTaskPriorityDisinherit>
 800ae74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	609a      	str	r2, [r3, #8]
 800ae7c:	e043      	b.n	800af06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d119      	bne.n	800aeb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6858      	ldr	r0, [r3, #4]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	68b9      	ldr	r1, [r7, #8]
 800ae90:	f001 fcdf 	bl	800c852 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	685a      	ldr	r2, [r3, #4]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9c:	441a      	add	r2, r3
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	685a      	ldr	r2, [r3, #4]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d32b      	bcc.n	800af06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	605a      	str	r2, [r3, #4]
 800aeb6:	e026      	b.n	800af06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	68d8      	ldr	r0, [r3, #12]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec0:	461a      	mov	r2, r3
 800aec2:	68b9      	ldr	r1, [r7, #8]
 800aec4:	f001 fcc5 	bl	800c852 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	68da      	ldr	r2, [r3, #12]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed0:	425b      	negs	r3, r3
 800aed2:	441a      	add	r2, r3
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	68da      	ldr	r2, [r3, #12]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d207      	bcs.n	800aef4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	689a      	ldr	r2, [r3, #8]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeec:	425b      	negs	r3, r3
 800aeee:	441a      	add	r2, r3
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d105      	bne.n	800af06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	3b01      	subs	r3, #1
 800af04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	1c5a      	adds	r2, r3, #1
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800af0e:	697b      	ldr	r3, [r7, #20]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3718      	adds	r7, #24
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af26:	2b00      	cmp	r3, #0
 800af28:	d018      	beq.n	800af5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68da      	ldr	r2, [r3, #12]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af32:	441a      	add	r2, r3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	68da      	ldr	r2, [r3, #12]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	429a      	cmp	r2, r3
 800af42:	d303      	bcc.n	800af4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	68d9      	ldr	r1, [r3, #12]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af54:	461a      	mov	r2, r3
 800af56:	6838      	ldr	r0, [r7, #0]
 800af58:	f001 fc7b 	bl	800c852 <memcpy>
	}
}
 800af5c:	bf00      	nop
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af6c:	f7ff faca 	bl	800a504 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af78:	e011      	b.n	800af9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d012      	beq.n	800afa8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	3324      	adds	r3, #36	; 0x24
 800af86:	4618      	mov	r0, r3
 800af88:	f000 fd50 	bl	800ba2c <xTaskRemoveFromEventList>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d001      	beq.n	800af96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af92:	f000 fe27 	bl	800bbe4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af96:	7bfb      	ldrb	r3, [r7, #15]
 800af98:	3b01      	subs	r3, #1
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	dce9      	bgt.n	800af7a <prvUnlockQueue+0x16>
 800afa6:	e000      	b.n	800afaa <prvUnlockQueue+0x46>
					break;
 800afa8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	22ff      	movs	r2, #255	; 0xff
 800afae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800afb2:	f7ff fad7 	bl	800a564 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800afb6:	f7ff faa5 	bl	800a504 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afc2:	e011      	b.n	800afe8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d012      	beq.n	800aff2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	3310      	adds	r3, #16
 800afd0:	4618      	mov	r0, r3
 800afd2:	f000 fd2b 	bl	800ba2c <xTaskRemoveFromEventList>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800afdc:	f000 fe02 	bl	800bbe4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
 800afe2:	3b01      	subs	r3, #1
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afe8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afec:	2b00      	cmp	r3, #0
 800afee:	dce9      	bgt.n	800afc4 <prvUnlockQueue+0x60>
 800aff0:	e000      	b.n	800aff4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aff2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	22ff      	movs	r2, #255	; 0xff
 800aff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800affc:	f7ff fab2 	bl	800a564 <vPortExitCritical>
}
 800b000:	bf00      	nop
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b010:	f7ff fa78 	bl	800a504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d102      	bne.n	800b022 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b01c:	2301      	movs	r3, #1
 800b01e:	60fb      	str	r3, [r7, #12]
 800b020:	e001      	b.n	800b026 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b022:	2300      	movs	r3, #0
 800b024:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b026:	f7ff fa9d 	bl	800a564 <vPortExitCritical>

	return xReturn;
 800b02a:	68fb      	ldr	r3, [r7, #12]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b03c:	f7ff fa62 	bl	800a504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b048:	429a      	cmp	r2, r3
 800b04a:	d102      	bne.n	800b052 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b04c:	2301      	movs	r3, #1
 800b04e:	60fb      	str	r3, [r7, #12]
 800b050:	e001      	b.n	800b056 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b052:	2300      	movs	r3, #0
 800b054:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b056:	f7ff fa85 	bl	800a564 <vPortExitCritical>

	return xReturn;
 800b05a:	68fb      	ldr	r3, [r7, #12]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b06e:	2300      	movs	r3, #0
 800b070:	60fb      	str	r3, [r7, #12]
 800b072:	e014      	b.n	800b09e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b074:	4a0f      	ldr	r2, [pc, #60]	; (800b0b4 <vQueueAddToRegistry+0x50>)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d10b      	bne.n	800b098 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b080:	490c      	ldr	r1, [pc, #48]	; (800b0b4 <vQueueAddToRegistry+0x50>)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	683a      	ldr	r2, [r7, #0]
 800b086:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b08a:	4a0a      	ldr	r2, [pc, #40]	; (800b0b4 <vQueueAddToRegistry+0x50>)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	00db      	lsls	r3, r3, #3
 800b090:	4413      	add	r3, r2
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b096:	e006      	b.n	800b0a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3301      	adds	r3, #1
 800b09c:	60fb      	str	r3, [r7, #12]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2b07      	cmp	r3, #7
 800b0a2:	d9e7      	bls.n	800b074 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b0a4:	bf00      	nop
 800b0a6:	bf00      	nop
 800b0a8:	3714      	adds	r7, #20
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	24004a54 	.word	0x24004a54

0800b0b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0c8:	f7ff fa1c 	bl	800a504 <vPortEnterCritical>
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0d2:	b25b      	sxtb	r3, r3
 800b0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0d8:	d103      	bne.n	800b0e2 <vQueueWaitForMessageRestricted+0x2a>
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0e8:	b25b      	sxtb	r3, r3
 800b0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ee:	d103      	bne.n	800b0f8 <vQueueWaitForMessageRestricted+0x40>
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0f8:	f7ff fa34 	bl	800a564 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b100:	2b00      	cmp	r3, #0
 800b102:	d106      	bne.n	800b112 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	3324      	adds	r3, #36	; 0x24
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	68b9      	ldr	r1, [r7, #8]
 800b10c:	4618      	mov	r0, r3
 800b10e:	f000 fc61 	bl	800b9d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b112:	6978      	ldr	r0, [r7, #20]
 800b114:	f7ff ff26 	bl	800af64 <prvUnlockQueue>
	}
 800b118:	bf00      	nop
 800b11a:	3718      	adds	r7, #24
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b120:	b580      	push	{r7, lr}
 800b122:	b08e      	sub	sp, #56	; 0x38
 800b124:	af04      	add	r7, sp, #16
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b130:	2b00      	cmp	r3, #0
 800b132:	d10a      	bne.n	800b14a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b138:	f383 8811 	msr	BASEPRI, r3
 800b13c:	f3bf 8f6f 	isb	sy
 800b140:	f3bf 8f4f 	dsb	sy
 800b144:	623b      	str	r3, [r7, #32]
}
 800b146:	bf00      	nop
 800b148:	e7fe      	b.n	800b148 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d10a      	bne.n	800b166 <xTaskCreateStatic+0x46>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	61fb      	str	r3, [r7, #28]
}
 800b162:	bf00      	nop
 800b164:	e7fe      	b.n	800b164 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b166:	23bc      	movs	r3, #188	; 0xbc
 800b168:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	2bbc      	cmp	r3, #188	; 0xbc
 800b16e:	d00a      	beq.n	800b186 <xTaskCreateStatic+0x66>
	__asm volatile
 800b170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b174:	f383 8811 	msr	BASEPRI, r3
 800b178:	f3bf 8f6f 	isb	sy
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	61bb      	str	r3, [r7, #24]
}
 800b182:	bf00      	nop
 800b184:	e7fe      	b.n	800b184 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b186:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d01e      	beq.n	800b1cc <xTaskCreateStatic+0xac>
 800b18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b190:	2b00      	cmp	r3, #0
 800b192:	d01b      	beq.n	800b1cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b19c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a0:	2202      	movs	r2, #2
 800b1a2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	9303      	str	r3, [sp, #12]
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ac:	9302      	str	r3, [sp, #8]
 800b1ae:	f107 0314 	add.w	r3, r7, #20
 800b1b2:	9301      	str	r3, [sp, #4]
 800b1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	68b9      	ldr	r1, [r7, #8]
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	f000 f850 	bl	800b264 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1c6:	f000 f8f3 	bl	800b3b0 <prvAddNewTaskToReadyList>
 800b1ca:	e001      	b.n	800b1d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b1d0:	697b      	ldr	r3, [r7, #20]
	}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3728      	adds	r7, #40	; 0x28
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b08c      	sub	sp, #48	; 0x30
 800b1de:	af04      	add	r7, sp, #16
 800b1e0:	60f8      	str	r0, [r7, #12]
 800b1e2:	60b9      	str	r1, [r7, #8]
 800b1e4:	603b      	str	r3, [r7, #0]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b1ea:	88fb      	ldrh	r3, [r7, #6]
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fe fdbe 	bl	8009d70 <pvPortMalloc>
 800b1f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00e      	beq.n	800b21a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b1fc:	20bc      	movs	r0, #188	; 0xbc
 800b1fe:	f7fe fdb7 	bl	8009d70 <pvPortMalloc>
 800b202:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d003      	beq.n	800b212 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	697a      	ldr	r2, [r7, #20]
 800b20e:	631a      	str	r2, [r3, #48]	; 0x30
 800b210:	e005      	b.n	800b21e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b212:	6978      	ldr	r0, [r7, #20]
 800b214:	f7fe fe78 	bl	8009f08 <vPortFree>
 800b218:	e001      	b.n	800b21e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b21a:	2300      	movs	r3, #0
 800b21c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d017      	beq.n	800b254 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	2200      	movs	r2, #0
 800b228:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b22c:	88fa      	ldrh	r2, [r7, #6]
 800b22e:	2300      	movs	r3, #0
 800b230:	9303      	str	r3, [sp, #12]
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	9302      	str	r3, [sp, #8]
 800b236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b238:	9301      	str	r3, [sp, #4]
 800b23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	68b9      	ldr	r1, [r7, #8]
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f000 f80e 	bl	800b264 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b248:	69f8      	ldr	r0, [r7, #28]
 800b24a:	f000 f8b1 	bl	800b3b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b24e:	2301      	movs	r3, #1
 800b250:	61bb      	str	r3, [r7, #24]
 800b252:	e002      	b.n	800b25a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b254:	f04f 33ff 	mov.w	r3, #4294967295
 800b258:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b25a:	69bb      	ldr	r3, [r7, #24]
	}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3720      	adds	r7, #32
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b088      	sub	sp, #32
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	607a      	str	r2, [r7, #4]
 800b270:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b274:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	461a      	mov	r2, r3
 800b27c:	21a5      	movs	r1, #165	; 0xa5
 800b27e:	f001 faf6 	bl	800c86e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b286:	6879      	ldr	r1, [r7, #4]
 800b288:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b28c:	440b      	add	r3, r1
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	4413      	add	r3, r2
 800b292:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	f023 0307 	bic.w	r3, r3, #7
 800b29a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b29c:	69bb      	ldr	r3, [r7, #24]
 800b29e:	f003 0307 	and.w	r3, r3, #7
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00a      	beq.n	800b2bc <prvInitialiseNewTask+0x58>
	__asm volatile
 800b2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2aa:	f383 8811 	msr	BASEPRI, r3
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f3bf 8f4f 	dsb	sy
 800b2b6:	617b      	str	r3, [r7, #20]
}
 800b2b8:	bf00      	nop
 800b2ba:	e7fe      	b.n	800b2ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d01f      	beq.n	800b302 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	61fb      	str	r3, [r7, #28]
 800b2c6:	e012      	b.n	800b2ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2c8:	68ba      	ldr	r2, [r7, #8]
 800b2ca:	69fb      	ldr	r3, [r7, #28]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	7819      	ldrb	r1, [r3, #0]
 800b2d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	3334      	adds	r3, #52	; 0x34
 800b2d8:	460a      	mov	r2, r1
 800b2da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b2dc:	68ba      	ldr	r2, [r7, #8]
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d006      	beq.n	800b2f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	61fb      	str	r3, [r7, #28]
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	2b0f      	cmp	r3, #15
 800b2f2:	d9e9      	bls.n	800b2c8 <prvInitialiseNewTask+0x64>
 800b2f4:	e000      	b.n	800b2f8 <prvInitialiseNewTask+0x94>
			{
				break;
 800b2f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b300:	e003      	b.n	800b30a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b304:	2200      	movs	r2, #0
 800b306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30c:	2b37      	cmp	r3, #55	; 0x37
 800b30e:	d901      	bls.n	800b314 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b310:	2337      	movs	r3, #55	; 0x37
 800b312:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b318:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b31e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b322:	2200      	movs	r2, #0
 800b324:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b328:	3304      	adds	r3, #4
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fe ff2a 	bl	800a184 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b332:	3318      	adds	r3, #24
 800b334:	4618      	mov	r0, r3
 800b336:	f7fe ff25 	bl	800a184 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b33e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b342:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b348:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b34e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b352:	2200      	movs	r2, #0
 800b354:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b362:	3354      	adds	r3, #84	; 0x54
 800b364:	2260      	movs	r2, #96	; 0x60
 800b366:	2100      	movs	r1, #0
 800b368:	4618      	mov	r0, r3
 800b36a:	f001 fa80 	bl	800c86e <memset>
 800b36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b370:	4a0c      	ldr	r2, [pc, #48]	; (800b3a4 <prvInitialiseNewTask+0x140>)
 800b372:	659a      	str	r2, [r3, #88]	; 0x58
 800b374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b376:	4a0c      	ldr	r2, [pc, #48]	; (800b3a8 <prvInitialiseNewTask+0x144>)
 800b378:	65da      	str	r2, [r3, #92]	; 0x5c
 800b37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37c:	4a0b      	ldr	r2, [pc, #44]	; (800b3ac <prvInitialiseNewTask+0x148>)
 800b37e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	68f9      	ldr	r1, [r7, #12]
 800b384:	69b8      	ldr	r0, [r7, #24]
 800b386:	f7fe ff91 	bl	800a2ac <pxPortInitialiseStack>
 800b38a:	4602      	mov	r2, r0
 800b38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b392:	2b00      	cmp	r3, #0
 800b394:	d002      	beq.n	800b39c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b39a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b39c:	bf00      	nop
 800b39e:	3720      	adds	r7, #32
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	08010198 	.word	0x08010198
 800b3a8:	080101b8 	.word	0x080101b8
 800b3ac:	08010178 	.word	0x08010178

0800b3b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3b8:	f7ff f8a4 	bl	800a504 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3bc:	4b2d      	ldr	r3, [pc, #180]	; (800b474 <prvAddNewTaskToReadyList+0xc4>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	4a2c      	ldr	r2, [pc, #176]	; (800b474 <prvAddNewTaskToReadyList+0xc4>)
 800b3c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b3c6:	4b2c      	ldr	r3, [pc, #176]	; (800b478 <prvAddNewTaskToReadyList+0xc8>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d109      	bne.n	800b3e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3ce:	4a2a      	ldr	r2, [pc, #168]	; (800b478 <prvAddNewTaskToReadyList+0xc8>)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3d4:	4b27      	ldr	r3, [pc, #156]	; (800b474 <prvAddNewTaskToReadyList+0xc4>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d110      	bne.n	800b3fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3dc:	f000 fc26 	bl	800bc2c <prvInitialiseTaskLists>
 800b3e0:	e00d      	b.n	800b3fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3e2:	4b26      	ldr	r3, [pc, #152]	; (800b47c <prvAddNewTaskToReadyList+0xcc>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d109      	bne.n	800b3fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3ea:	4b23      	ldr	r3, [pc, #140]	; (800b478 <prvAddNewTaskToReadyList+0xc8>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d802      	bhi.n	800b3fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b3f8:	4a1f      	ldr	r2, [pc, #124]	; (800b478 <prvAddNewTaskToReadyList+0xc8>)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b3fe:	4b20      	ldr	r3, [pc, #128]	; (800b480 <prvAddNewTaskToReadyList+0xd0>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	3301      	adds	r3, #1
 800b404:	4a1e      	ldr	r2, [pc, #120]	; (800b480 <prvAddNewTaskToReadyList+0xd0>)
 800b406:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b408:	4b1d      	ldr	r3, [pc, #116]	; (800b480 <prvAddNewTaskToReadyList+0xd0>)
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b414:	4b1b      	ldr	r3, [pc, #108]	; (800b484 <prvAddNewTaskToReadyList+0xd4>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	429a      	cmp	r2, r3
 800b41a:	d903      	bls.n	800b424 <prvAddNewTaskToReadyList+0x74>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b420:	4a18      	ldr	r2, [pc, #96]	; (800b484 <prvAddNewTaskToReadyList+0xd4>)
 800b422:	6013      	str	r3, [r2, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b428:	4613      	mov	r3, r2
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	4413      	add	r3, r2
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	4a15      	ldr	r2, [pc, #84]	; (800b488 <prvAddNewTaskToReadyList+0xd8>)
 800b432:	441a      	add	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	3304      	adds	r3, #4
 800b438:	4619      	mov	r1, r3
 800b43a:	4610      	mov	r0, r2
 800b43c:	f7fe feaf 	bl	800a19e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b440:	f7ff f890 	bl	800a564 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b444:	4b0d      	ldr	r3, [pc, #52]	; (800b47c <prvAddNewTaskToReadyList+0xcc>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00e      	beq.n	800b46a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b44c:	4b0a      	ldr	r3, [pc, #40]	; (800b478 <prvAddNewTaskToReadyList+0xc8>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b456:	429a      	cmp	r2, r3
 800b458:	d207      	bcs.n	800b46a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b45a:	4b0c      	ldr	r3, [pc, #48]	; (800b48c <prvAddNewTaskToReadyList+0xdc>)
 800b45c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b460:	601a      	str	r2, [r3, #0]
 800b462:	f3bf 8f4f 	dsb	sy
 800b466:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b46a:	bf00      	nop
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	24004f68 	.word	0x24004f68
 800b478:	24004a94 	.word	0x24004a94
 800b47c:	24004f74 	.word	0x24004f74
 800b480:	24004f84 	.word	0x24004f84
 800b484:	24004f70 	.word	0x24004f70
 800b488:	24004a98 	.word	0x24004a98
 800b48c:	e000ed04 	.word	0xe000ed04

0800b490 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b498:	2300      	movs	r3, #0
 800b49a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d017      	beq.n	800b4d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b4a2:	4b13      	ldr	r3, [pc, #76]	; (800b4f0 <vTaskDelay+0x60>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00a      	beq.n	800b4c0 <vTaskDelay+0x30>
	__asm volatile
 800b4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	60bb      	str	r3, [r7, #8]
}
 800b4bc:	bf00      	nop
 800b4be:	e7fe      	b.n	800b4be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b4c0:	f000 f88a 	bl	800b5d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 fcfe 	bl	800bec8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4cc:	f000 f892 	bl	800b5f4 <xTaskResumeAll>
 800b4d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d107      	bne.n	800b4e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b4d8:	4b06      	ldr	r3, [pc, #24]	; (800b4f4 <vTaskDelay+0x64>)
 800b4da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4de:	601a      	str	r2, [r3, #0]
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4e8:	bf00      	nop
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	24004f90 	.word	0x24004f90
 800b4f4:	e000ed04 	.word	0xe000ed04

0800b4f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b08a      	sub	sp, #40	; 0x28
 800b4fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4fe:	2300      	movs	r3, #0
 800b500:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b502:	2300      	movs	r3, #0
 800b504:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b506:	463a      	mov	r2, r7
 800b508:	1d39      	adds	r1, r7, #4
 800b50a:	f107 0308 	add.w	r3, r7, #8
 800b50e:	4618      	mov	r0, r3
 800b510:	f7fe fbfa 	bl	8009d08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b514:	6839      	ldr	r1, [r7, #0]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	68ba      	ldr	r2, [r7, #8]
 800b51a:	9202      	str	r2, [sp, #8]
 800b51c:	9301      	str	r3, [sp, #4]
 800b51e:	2300      	movs	r3, #0
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	2300      	movs	r3, #0
 800b524:	460a      	mov	r2, r1
 800b526:	4924      	ldr	r1, [pc, #144]	; (800b5b8 <vTaskStartScheduler+0xc0>)
 800b528:	4824      	ldr	r0, [pc, #144]	; (800b5bc <vTaskStartScheduler+0xc4>)
 800b52a:	f7ff fdf9 	bl	800b120 <xTaskCreateStatic>
 800b52e:	4603      	mov	r3, r0
 800b530:	4a23      	ldr	r2, [pc, #140]	; (800b5c0 <vTaskStartScheduler+0xc8>)
 800b532:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b534:	4b22      	ldr	r3, [pc, #136]	; (800b5c0 <vTaskStartScheduler+0xc8>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d002      	beq.n	800b542 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b53c:	2301      	movs	r3, #1
 800b53e:	617b      	str	r3, [r7, #20]
 800b540:	e001      	b.n	800b546 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b542:	2300      	movs	r3, #0
 800b544:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d102      	bne.n	800b552 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b54c:	f000 fd10 	bl	800bf70 <xTimerCreateTimerTask>
 800b550:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d11b      	bne.n	800b590 <vTaskStartScheduler+0x98>
	__asm volatile
 800b558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55c:	f383 8811 	msr	BASEPRI, r3
 800b560:	f3bf 8f6f 	isb	sy
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	613b      	str	r3, [r7, #16]
}
 800b56a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b56c:	4b15      	ldr	r3, [pc, #84]	; (800b5c4 <vTaskStartScheduler+0xcc>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	3354      	adds	r3, #84	; 0x54
 800b572:	4a15      	ldr	r2, [pc, #84]	; (800b5c8 <vTaskStartScheduler+0xd0>)
 800b574:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b576:	4b15      	ldr	r3, [pc, #84]	; (800b5cc <vTaskStartScheduler+0xd4>)
 800b578:	f04f 32ff 	mov.w	r2, #4294967295
 800b57c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b57e:	4b14      	ldr	r3, [pc, #80]	; (800b5d0 <vTaskStartScheduler+0xd8>)
 800b580:	2201      	movs	r2, #1
 800b582:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b584:	4b13      	ldr	r3, [pc, #76]	; (800b5d4 <vTaskStartScheduler+0xdc>)
 800b586:	2200      	movs	r2, #0
 800b588:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b58a:	f7fe ff19 	bl	800a3c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b58e:	e00e      	b.n	800b5ae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b596:	d10a      	bne.n	800b5ae <vTaskStartScheduler+0xb6>
	__asm volatile
 800b598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59c:	f383 8811 	msr	BASEPRI, r3
 800b5a0:	f3bf 8f6f 	isb	sy
 800b5a4:	f3bf 8f4f 	dsb	sy
 800b5a8:	60fb      	str	r3, [r7, #12]
}
 800b5aa:	bf00      	nop
 800b5ac:	e7fe      	b.n	800b5ac <vTaskStartScheduler+0xb4>
}
 800b5ae:	bf00      	nop
 800b5b0:	3718      	adds	r7, #24
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	08010088 	.word	0x08010088
 800b5bc:	0800bbfd 	.word	0x0800bbfd
 800b5c0:	24004f8c 	.word	0x24004f8c
 800b5c4:	24004a94 	.word	0x24004a94
 800b5c8:	2400002c 	.word	0x2400002c
 800b5cc:	24004f88 	.word	0x24004f88
 800b5d0:	24004f74 	.word	0x24004f74
 800b5d4:	24004f6c 	.word	0x24004f6c

0800b5d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5d8:	b480      	push	{r7}
 800b5da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b5dc:	4b04      	ldr	r3, [pc, #16]	; (800b5f0 <vTaskSuspendAll+0x18>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	4a03      	ldr	r2, [pc, #12]	; (800b5f0 <vTaskSuspendAll+0x18>)
 800b5e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b5e6:	bf00      	nop
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	24004f90 	.word	0x24004f90

0800b5f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5fe:	2300      	movs	r3, #0
 800b600:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b602:	4b42      	ldr	r3, [pc, #264]	; (800b70c <xTaskResumeAll+0x118>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d10a      	bne.n	800b620 <xTaskResumeAll+0x2c>
	__asm volatile
 800b60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60e:	f383 8811 	msr	BASEPRI, r3
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	603b      	str	r3, [r7, #0]
}
 800b61c:	bf00      	nop
 800b61e:	e7fe      	b.n	800b61e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b620:	f7fe ff70 	bl	800a504 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b624:	4b39      	ldr	r3, [pc, #228]	; (800b70c <xTaskResumeAll+0x118>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	3b01      	subs	r3, #1
 800b62a:	4a38      	ldr	r2, [pc, #224]	; (800b70c <xTaskResumeAll+0x118>)
 800b62c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b62e:	4b37      	ldr	r3, [pc, #220]	; (800b70c <xTaskResumeAll+0x118>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d162      	bne.n	800b6fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b636:	4b36      	ldr	r3, [pc, #216]	; (800b710 <xTaskResumeAll+0x11c>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d05e      	beq.n	800b6fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b63e:	e02f      	b.n	800b6a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b640:	4b34      	ldr	r3, [pc, #208]	; (800b714 <xTaskResumeAll+0x120>)
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	3318      	adds	r3, #24
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7fe fe03 	bl	800a258 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	3304      	adds	r3, #4
 800b656:	4618      	mov	r0, r3
 800b658:	f7fe fdfe 	bl	800a258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b660:	4b2d      	ldr	r3, [pc, #180]	; (800b718 <xTaskResumeAll+0x124>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	429a      	cmp	r2, r3
 800b666:	d903      	bls.n	800b670 <xTaskResumeAll+0x7c>
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66c:	4a2a      	ldr	r2, [pc, #168]	; (800b718 <xTaskResumeAll+0x124>)
 800b66e:	6013      	str	r3, [r2, #0]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b674:	4613      	mov	r3, r2
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	4413      	add	r3, r2
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	4a27      	ldr	r2, [pc, #156]	; (800b71c <xTaskResumeAll+0x128>)
 800b67e:	441a      	add	r2, r3
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	3304      	adds	r3, #4
 800b684:	4619      	mov	r1, r3
 800b686:	4610      	mov	r0, r2
 800b688:	f7fe fd89 	bl	800a19e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b690:	4b23      	ldr	r3, [pc, #140]	; (800b720 <xTaskResumeAll+0x12c>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b696:	429a      	cmp	r2, r3
 800b698:	d302      	bcc.n	800b6a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b69a:	4b22      	ldr	r3, [pc, #136]	; (800b724 <xTaskResumeAll+0x130>)
 800b69c:	2201      	movs	r2, #1
 800b69e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6a0:	4b1c      	ldr	r3, [pc, #112]	; (800b714 <xTaskResumeAll+0x120>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1cb      	bne.n	800b640 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d001      	beq.n	800b6b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b6ae:	f000 fb5f 	bl	800bd70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b6b2:	4b1d      	ldr	r3, [pc, #116]	; (800b728 <xTaskResumeAll+0x134>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d010      	beq.n	800b6e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b6be:	f000 f847 	bl	800b750 <xTaskIncrementTick>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d002      	beq.n	800b6ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b6c8:	4b16      	ldr	r3, [pc, #88]	; (800b724 <xTaskResumeAll+0x130>)
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d1f1      	bne.n	800b6be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b6da:	4b13      	ldr	r3, [pc, #76]	; (800b728 <xTaskResumeAll+0x134>)
 800b6dc:	2200      	movs	r2, #0
 800b6de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b6e0:	4b10      	ldr	r3, [pc, #64]	; (800b724 <xTaskResumeAll+0x130>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d009      	beq.n	800b6fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b6ec:	4b0f      	ldr	r3, [pc, #60]	; (800b72c <xTaskResumeAll+0x138>)
 800b6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6f2:	601a      	str	r2, [r3, #0]
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6fc:	f7fe ff32 	bl	800a564 <vPortExitCritical>

	return xAlreadyYielded;
 800b700:	68bb      	ldr	r3, [r7, #8]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	24004f90 	.word	0x24004f90
 800b710:	24004f68 	.word	0x24004f68
 800b714:	24004f28 	.word	0x24004f28
 800b718:	24004f70 	.word	0x24004f70
 800b71c:	24004a98 	.word	0x24004a98
 800b720:	24004a94 	.word	0x24004a94
 800b724:	24004f7c 	.word	0x24004f7c
 800b728:	24004f78 	.word	0x24004f78
 800b72c:	e000ed04 	.word	0xe000ed04

0800b730 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b736:	4b05      	ldr	r3, [pc, #20]	; (800b74c <xTaskGetTickCount+0x1c>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b73c:	687b      	ldr	r3, [r7, #4]
}
 800b73e:	4618      	mov	r0, r3
 800b740:	370c      	adds	r7, #12
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	24004f6c 	.word	0x24004f6c

0800b750 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b756:	2300      	movs	r3, #0
 800b758:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b75a:	4b4f      	ldr	r3, [pc, #316]	; (800b898 <xTaskIncrementTick+0x148>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f040 808f 	bne.w	800b882 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b764:	4b4d      	ldr	r3, [pc, #308]	; (800b89c <xTaskIncrementTick+0x14c>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	3301      	adds	r3, #1
 800b76a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b76c:	4a4b      	ldr	r2, [pc, #300]	; (800b89c <xTaskIncrementTick+0x14c>)
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d120      	bne.n	800b7ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b778:	4b49      	ldr	r3, [pc, #292]	; (800b8a0 <xTaskIncrementTick+0x150>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00a      	beq.n	800b798 <xTaskIncrementTick+0x48>
	__asm volatile
 800b782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b786:	f383 8811 	msr	BASEPRI, r3
 800b78a:	f3bf 8f6f 	isb	sy
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	603b      	str	r3, [r7, #0]
}
 800b794:	bf00      	nop
 800b796:	e7fe      	b.n	800b796 <xTaskIncrementTick+0x46>
 800b798:	4b41      	ldr	r3, [pc, #260]	; (800b8a0 <xTaskIncrementTick+0x150>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	60fb      	str	r3, [r7, #12]
 800b79e:	4b41      	ldr	r3, [pc, #260]	; (800b8a4 <xTaskIncrementTick+0x154>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4a3f      	ldr	r2, [pc, #252]	; (800b8a0 <xTaskIncrementTick+0x150>)
 800b7a4:	6013      	str	r3, [r2, #0]
 800b7a6:	4a3f      	ldr	r2, [pc, #252]	; (800b8a4 <xTaskIncrementTick+0x154>)
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6013      	str	r3, [r2, #0]
 800b7ac:	4b3e      	ldr	r3, [pc, #248]	; (800b8a8 <xTaskIncrementTick+0x158>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	4a3d      	ldr	r2, [pc, #244]	; (800b8a8 <xTaskIncrementTick+0x158>)
 800b7b4:	6013      	str	r3, [r2, #0]
 800b7b6:	f000 fadb 	bl	800bd70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b7ba:	4b3c      	ldr	r3, [pc, #240]	; (800b8ac <xTaskIncrementTick+0x15c>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	693a      	ldr	r2, [r7, #16]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d349      	bcc.n	800b858 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7c4:	4b36      	ldr	r3, [pc, #216]	; (800b8a0 <xTaskIncrementTick+0x150>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d104      	bne.n	800b7d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7ce:	4b37      	ldr	r3, [pc, #220]	; (800b8ac <xTaskIncrementTick+0x15c>)
 800b7d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d4:	601a      	str	r2, [r3, #0]
					break;
 800b7d6:	e03f      	b.n	800b858 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7d8:	4b31      	ldr	r3, [pc, #196]	; (800b8a0 <xTaskIncrementTick+0x150>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b7e8:	693a      	ldr	r2, [r7, #16]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d203      	bcs.n	800b7f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b7f0:	4a2e      	ldr	r2, [pc, #184]	; (800b8ac <xTaskIncrementTick+0x15c>)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b7f6:	e02f      	b.n	800b858 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	3304      	adds	r3, #4
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7fe fd2b 	bl	800a258 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b806:	2b00      	cmp	r3, #0
 800b808:	d004      	beq.n	800b814 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	3318      	adds	r3, #24
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fe fd22 	bl	800a258 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b818:	4b25      	ldr	r3, [pc, #148]	; (800b8b0 <xTaskIncrementTick+0x160>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d903      	bls.n	800b828 <xTaskIncrementTick+0xd8>
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b824:	4a22      	ldr	r2, [pc, #136]	; (800b8b0 <xTaskIncrementTick+0x160>)
 800b826:	6013      	str	r3, [r2, #0]
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b82c:	4613      	mov	r3, r2
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	4413      	add	r3, r2
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	4a1f      	ldr	r2, [pc, #124]	; (800b8b4 <xTaskIncrementTick+0x164>)
 800b836:	441a      	add	r2, r3
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	3304      	adds	r3, #4
 800b83c:	4619      	mov	r1, r3
 800b83e:	4610      	mov	r0, r2
 800b840:	f7fe fcad 	bl	800a19e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b848:	4b1b      	ldr	r3, [pc, #108]	; (800b8b8 <xTaskIncrementTick+0x168>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84e:	429a      	cmp	r2, r3
 800b850:	d3b8      	bcc.n	800b7c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b852:	2301      	movs	r3, #1
 800b854:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b856:	e7b5      	b.n	800b7c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b858:	4b17      	ldr	r3, [pc, #92]	; (800b8b8 <xTaskIncrementTick+0x168>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b85e:	4915      	ldr	r1, [pc, #84]	; (800b8b4 <xTaskIncrementTick+0x164>)
 800b860:	4613      	mov	r3, r2
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	4413      	add	r3, r2
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	440b      	add	r3, r1
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d901      	bls.n	800b874 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b870:	2301      	movs	r3, #1
 800b872:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b874:	4b11      	ldr	r3, [pc, #68]	; (800b8bc <xTaskIncrementTick+0x16c>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d007      	beq.n	800b88c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b87c:	2301      	movs	r3, #1
 800b87e:	617b      	str	r3, [r7, #20]
 800b880:	e004      	b.n	800b88c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b882:	4b0f      	ldr	r3, [pc, #60]	; (800b8c0 <xTaskIncrementTick+0x170>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	3301      	adds	r3, #1
 800b888:	4a0d      	ldr	r2, [pc, #52]	; (800b8c0 <xTaskIncrementTick+0x170>)
 800b88a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b88c:	697b      	ldr	r3, [r7, #20]
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3718      	adds	r7, #24
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	24004f90 	.word	0x24004f90
 800b89c:	24004f6c 	.word	0x24004f6c
 800b8a0:	24004f20 	.word	0x24004f20
 800b8a4:	24004f24 	.word	0x24004f24
 800b8a8:	24004f80 	.word	0x24004f80
 800b8ac:	24004f88 	.word	0x24004f88
 800b8b0:	24004f70 	.word	0x24004f70
 800b8b4:	24004a98 	.word	0x24004a98
 800b8b8:	24004a94 	.word	0x24004a94
 800b8bc:	24004f7c 	.word	0x24004f7c
 800b8c0:	24004f78 	.word	0x24004f78

0800b8c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b8ca:	4b2a      	ldr	r3, [pc, #168]	; (800b974 <vTaskSwitchContext+0xb0>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d003      	beq.n	800b8da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b8d2:	4b29      	ldr	r3, [pc, #164]	; (800b978 <vTaskSwitchContext+0xb4>)
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8d8:	e046      	b.n	800b968 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b8da:	4b27      	ldr	r3, [pc, #156]	; (800b978 <vTaskSwitchContext+0xb4>)
 800b8dc:	2200      	movs	r2, #0
 800b8de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8e0:	4b26      	ldr	r3, [pc, #152]	; (800b97c <vTaskSwitchContext+0xb8>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	60fb      	str	r3, [r7, #12]
 800b8e6:	e010      	b.n	800b90a <vTaskSwitchContext+0x46>
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d10a      	bne.n	800b904 <vTaskSwitchContext+0x40>
	__asm volatile
 800b8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	607b      	str	r3, [r7, #4]
}
 800b900:	bf00      	nop
 800b902:	e7fe      	b.n	800b902 <vTaskSwitchContext+0x3e>
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	3b01      	subs	r3, #1
 800b908:	60fb      	str	r3, [r7, #12]
 800b90a:	491d      	ldr	r1, [pc, #116]	; (800b980 <vTaskSwitchContext+0xbc>)
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	4613      	mov	r3, r2
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	4413      	add	r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	440b      	add	r3, r1
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d0e4      	beq.n	800b8e8 <vTaskSwitchContext+0x24>
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	4613      	mov	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	4413      	add	r3, r2
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	4a15      	ldr	r2, [pc, #84]	; (800b980 <vTaskSwitchContext+0xbc>)
 800b92a:	4413      	add	r3, r2
 800b92c:	60bb      	str	r3, [r7, #8]
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	685a      	ldr	r2, [r3, #4]
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	605a      	str	r2, [r3, #4]
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	685a      	ldr	r2, [r3, #4]
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	3308      	adds	r3, #8
 800b940:	429a      	cmp	r2, r3
 800b942:	d104      	bne.n	800b94e <vTaskSwitchContext+0x8a>
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	685a      	ldr	r2, [r3, #4]
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	605a      	str	r2, [r3, #4]
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	4a0b      	ldr	r2, [pc, #44]	; (800b984 <vTaskSwitchContext+0xc0>)
 800b956:	6013      	str	r3, [r2, #0]
 800b958:	4a08      	ldr	r2, [pc, #32]	; (800b97c <vTaskSwitchContext+0xb8>)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b95e:	4b09      	ldr	r3, [pc, #36]	; (800b984 <vTaskSwitchContext+0xc0>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	3354      	adds	r3, #84	; 0x54
 800b964:	4a08      	ldr	r2, [pc, #32]	; (800b988 <vTaskSwitchContext+0xc4>)
 800b966:	6013      	str	r3, [r2, #0]
}
 800b968:	bf00      	nop
 800b96a:	3714      	adds	r7, #20
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr
 800b974:	24004f90 	.word	0x24004f90
 800b978:	24004f7c 	.word	0x24004f7c
 800b97c:	24004f70 	.word	0x24004f70
 800b980:	24004a98 	.word	0x24004a98
 800b984:	24004a94 	.word	0x24004a94
 800b988:	2400002c 	.word	0x2400002c

0800b98c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d10a      	bne.n	800b9b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a0:	f383 8811 	msr	BASEPRI, r3
 800b9a4:	f3bf 8f6f 	isb	sy
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	60fb      	str	r3, [r7, #12]
}
 800b9ae:	bf00      	nop
 800b9b0:	e7fe      	b.n	800b9b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9b2:	4b07      	ldr	r3, [pc, #28]	; (800b9d0 <vTaskPlaceOnEventList+0x44>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	3318      	adds	r3, #24
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f7fe fc13 	bl	800a1e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b9c0:	2101      	movs	r1, #1
 800b9c2:	6838      	ldr	r0, [r7, #0]
 800b9c4:	f000 fa80 	bl	800bec8 <prvAddCurrentTaskToDelayedList>
}
 800b9c8:	bf00      	nop
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	24004a94 	.word	0x24004a94

0800b9d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d10a      	bne.n	800b9fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ea:	f383 8811 	msr	BASEPRI, r3
 800b9ee:	f3bf 8f6f 	isb	sy
 800b9f2:	f3bf 8f4f 	dsb	sy
 800b9f6:	617b      	str	r3, [r7, #20]
}
 800b9f8:	bf00      	nop
 800b9fa:	e7fe      	b.n	800b9fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ba28 <vTaskPlaceOnEventListRestricted+0x54>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	3318      	adds	r3, #24
 800ba02:	4619      	mov	r1, r3
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f7fe fbca 	bl	800a19e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d002      	beq.n	800ba16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ba10:	f04f 33ff 	mov.w	r3, #4294967295
 800ba14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ba16:	6879      	ldr	r1, [r7, #4]
 800ba18:	68b8      	ldr	r0, [r7, #8]
 800ba1a:	f000 fa55 	bl	800bec8 <prvAddCurrentTaskToDelayedList>
	}
 800ba1e:	bf00      	nop
 800ba20:	3718      	adds	r7, #24
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	24004a94 	.word	0x24004a94

0800ba2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d10a      	bne.n	800ba58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ba42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba46:	f383 8811 	msr	BASEPRI, r3
 800ba4a:	f3bf 8f6f 	isb	sy
 800ba4e:	f3bf 8f4f 	dsb	sy
 800ba52:	60fb      	str	r3, [r7, #12]
}
 800ba54:	bf00      	nop
 800ba56:	e7fe      	b.n	800ba56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	3318      	adds	r3, #24
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7fe fbfb 	bl	800a258 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba62:	4b1e      	ldr	r3, [pc, #120]	; (800badc <xTaskRemoveFromEventList+0xb0>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d11d      	bne.n	800baa6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	3304      	adds	r3, #4
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7fe fbf2 	bl	800a258 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba78:	4b19      	ldr	r3, [pc, #100]	; (800bae0 <xTaskRemoveFromEventList+0xb4>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d903      	bls.n	800ba88 <xTaskRemoveFromEventList+0x5c>
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba84:	4a16      	ldr	r2, [pc, #88]	; (800bae0 <xTaskRemoveFromEventList+0xb4>)
 800ba86:	6013      	str	r3, [r2, #0]
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	4413      	add	r3, r2
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	4a13      	ldr	r2, [pc, #76]	; (800bae4 <xTaskRemoveFromEventList+0xb8>)
 800ba96:	441a      	add	r2, r3
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	3304      	adds	r3, #4
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	4610      	mov	r0, r2
 800baa0:	f7fe fb7d 	bl	800a19e <vListInsertEnd>
 800baa4:	e005      	b.n	800bab2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	3318      	adds	r3, #24
 800baaa:	4619      	mov	r1, r3
 800baac:	480e      	ldr	r0, [pc, #56]	; (800bae8 <xTaskRemoveFromEventList+0xbc>)
 800baae:	f7fe fb76 	bl	800a19e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab6:	4b0d      	ldr	r3, [pc, #52]	; (800baec <xTaskRemoveFromEventList+0xc0>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800babc:	429a      	cmp	r2, r3
 800babe:	d905      	bls.n	800bacc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bac0:	2301      	movs	r3, #1
 800bac2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bac4:	4b0a      	ldr	r3, [pc, #40]	; (800baf0 <xTaskRemoveFromEventList+0xc4>)
 800bac6:	2201      	movs	r2, #1
 800bac8:	601a      	str	r2, [r3, #0]
 800baca:	e001      	b.n	800bad0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bacc:	2300      	movs	r3, #0
 800bace:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bad0:	697b      	ldr	r3, [r7, #20]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3718      	adds	r7, #24
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	24004f90 	.word	0x24004f90
 800bae0:	24004f70 	.word	0x24004f70
 800bae4:	24004a98 	.word	0x24004a98
 800bae8:	24004f28 	.word	0x24004f28
 800baec:	24004a94 	.word	0x24004a94
 800baf0:	24004f7c 	.word	0x24004f7c

0800baf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bafc:	4b06      	ldr	r3, [pc, #24]	; (800bb18 <vTaskInternalSetTimeOutState+0x24>)
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb04:	4b05      	ldr	r3, [pc, #20]	; (800bb1c <vTaskInternalSetTimeOutState+0x28>)
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	605a      	str	r2, [r3, #4]
}
 800bb0c:	bf00      	nop
 800bb0e:	370c      	adds	r7, #12
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr
 800bb18:	24004f80 	.word	0x24004f80
 800bb1c:	24004f6c 	.word	0x24004f6c

0800bb20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b088      	sub	sp, #32
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10a      	bne.n	800bb46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	613b      	str	r3, [r7, #16]
}
 800bb42:	bf00      	nop
 800bb44:	e7fe      	b.n	800bb44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10a      	bne.n	800bb62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb50:	f383 8811 	msr	BASEPRI, r3
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	60fb      	str	r3, [r7, #12]
}
 800bb5e:	bf00      	nop
 800bb60:	e7fe      	b.n	800bb60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bb62:	f7fe fccf 	bl	800a504 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bb66:	4b1d      	ldr	r3, [pc, #116]	; (800bbdc <xTaskCheckForTimeOut+0xbc>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	69ba      	ldr	r2, [r7, #24]
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb7e:	d102      	bne.n	800bb86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb80:	2300      	movs	r3, #0
 800bb82:	61fb      	str	r3, [r7, #28]
 800bb84:	e023      	b.n	800bbce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	4b15      	ldr	r3, [pc, #84]	; (800bbe0 <xTaskCheckForTimeOut+0xc0>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d007      	beq.n	800bba2 <xTaskCheckForTimeOut+0x82>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	69ba      	ldr	r2, [r7, #24]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d302      	bcc.n	800bba2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	61fb      	str	r3, [r7, #28]
 800bba0:	e015      	b.n	800bbce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	697a      	ldr	r2, [r7, #20]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d20b      	bcs.n	800bbc4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	1ad2      	subs	r2, r2, r3
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f7ff ff9b 	bl	800baf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	61fb      	str	r3, [r7, #28]
 800bbc2:	e004      	b.n	800bbce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bbce:	f7fe fcc9 	bl	800a564 <vPortExitCritical>

	return xReturn;
 800bbd2:	69fb      	ldr	r3, [r7, #28]
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3720      	adds	r7, #32
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	24004f6c 	.word	0x24004f6c
 800bbe0:	24004f80 	.word	0x24004f80

0800bbe4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bbe8:	4b03      	ldr	r3, [pc, #12]	; (800bbf8 <vTaskMissedYield+0x14>)
 800bbea:	2201      	movs	r2, #1
 800bbec:	601a      	str	r2, [r3, #0]
}
 800bbee:	bf00      	nop
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr
 800bbf8:	24004f7c 	.word	0x24004f7c

0800bbfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bc04:	f000 f852 	bl	800bcac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc08:	4b06      	ldr	r3, [pc, #24]	; (800bc24 <prvIdleTask+0x28>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d9f9      	bls.n	800bc04 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bc10:	4b05      	ldr	r3, [pc, #20]	; (800bc28 <prvIdleTask+0x2c>)
 800bc12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc16:	601a      	str	r2, [r3, #0]
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bc20:	e7f0      	b.n	800bc04 <prvIdleTask+0x8>
 800bc22:	bf00      	nop
 800bc24:	24004a98 	.word	0x24004a98
 800bc28:	e000ed04 	.word	0xe000ed04

0800bc2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc32:	2300      	movs	r3, #0
 800bc34:	607b      	str	r3, [r7, #4]
 800bc36:	e00c      	b.n	800bc52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	4413      	add	r3, r2
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	4a12      	ldr	r2, [pc, #72]	; (800bc8c <prvInitialiseTaskLists+0x60>)
 800bc44:	4413      	add	r3, r2
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fe fa7c 	bl	800a144 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	607b      	str	r3, [r7, #4]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2b37      	cmp	r3, #55	; 0x37
 800bc56:	d9ef      	bls.n	800bc38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bc58:	480d      	ldr	r0, [pc, #52]	; (800bc90 <prvInitialiseTaskLists+0x64>)
 800bc5a:	f7fe fa73 	bl	800a144 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bc5e:	480d      	ldr	r0, [pc, #52]	; (800bc94 <prvInitialiseTaskLists+0x68>)
 800bc60:	f7fe fa70 	bl	800a144 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bc64:	480c      	ldr	r0, [pc, #48]	; (800bc98 <prvInitialiseTaskLists+0x6c>)
 800bc66:	f7fe fa6d 	bl	800a144 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc6a:	480c      	ldr	r0, [pc, #48]	; (800bc9c <prvInitialiseTaskLists+0x70>)
 800bc6c:	f7fe fa6a 	bl	800a144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc70:	480b      	ldr	r0, [pc, #44]	; (800bca0 <prvInitialiseTaskLists+0x74>)
 800bc72:	f7fe fa67 	bl	800a144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc76:	4b0b      	ldr	r3, [pc, #44]	; (800bca4 <prvInitialiseTaskLists+0x78>)
 800bc78:	4a05      	ldr	r2, [pc, #20]	; (800bc90 <prvInitialiseTaskLists+0x64>)
 800bc7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc7c:	4b0a      	ldr	r3, [pc, #40]	; (800bca8 <prvInitialiseTaskLists+0x7c>)
 800bc7e:	4a05      	ldr	r2, [pc, #20]	; (800bc94 <prvInitialiseTaskLists+0x68>)
 800bc80:	601a      	str	r2, [r3, #0]
}
 800bc82:	bf00      	nop
 800bc84:	3708      	adds	r7, #8
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	24004a98 	.word	0x24004a98
 800bc90:	24004ef8 	.word	0x24004ef8
 800bc94:	24004f0c 	.word	0x24004f0c
 800bc98:	24004f28 	.word	0x24004f28
 800bc9c:	24004f3c 	.word	0x24004f3c
 800bca0:	24004f54 	.word	0x24004f54
 800bca4:	24004f20 	.word	0x24004f20
 800bca8:	24004f24 	.word	0x24004f24

0800bcac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bcb2:	e019      	b.n	800bce8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bcb4:	f7fe fc26 	bl	800a504 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcb8:	4b10      	ldr	r3, [pc, #64]	; (800bcfc <prvCheckTasksWaitingTermination+0x50>)
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	3304      	adds	r3, #4
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7fe fac7 	bl	800a258 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bcca:	4b0d      	ldr	r3, [pc, #52]	; (800bd00 <prvCheckTasksWaitingTermination+0x54>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	4a0b      	ldr	r2, [pc, #44]	; (800bd00 <prvCheckTasksWaitingTermination+0x54>)
 800bcd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bcd4:	4b0b      	ldr	r3, [pc, #44]	; (800bd04 <prvCheckTasksWaitingTermination+0x58>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	3b01      	subs	r3, #1
 800bcda:	4a0a      	ldr	r2, [pc, #40]	; (800bd04 <prvCheckTasksWaitingTermination+0x58>)
 800bcdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bcde:	f7fe fc41 	bl	800a564 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 f810 	bl	800bd08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bce8:	4b06      	ldr	r3, [pc, #24]	; (800bd04 <prvCheckTasksWaitingTermination+0x58>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d1e1      	bne.n	800bcb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bcf0:	bf00      	nop
 800bcf2:	bf00      	nop
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	24004f3c 	.word	0x24004f3c
 800bd00:	24004f68 	.word	0x24004f68
 800bd04:	24004f50 	.word	0x24004f50

0800bd08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	3354      	adds	r3, #84	; 0x54
 800bd14:	4618      	mov	r0, r3
 800bd16:	f001 faaf 	bl	800d278 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d108      	bne.n	800bd36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fe f8ed 	bl	8009f08 <vPortFree>
				vPortFree( pxTCB );
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f7fe f8ea 	bl	8009f08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bd34:	e018      	b.n	800bd68 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d103      	bne.n	800bd48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f7fe f8e1 	bl	8009f08 <vPortFree>
	}
 800bd46:	e00f      	b.n	800bd68 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	d00a      	beq.n	800bd68 <prvDeleteTCB+0x60>
	__asm volatile
 800bd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd56:	f383 8811 	msr	BASEPRI, r3
 800bd5a:	f3bf 8f6f 	isb	sy
 800bd5e:	f3bf 8f4f 	dsb	sy
 800bd62:	60fb      	str	r3, [r7, #12]
}
 800bd64:	bf00      	nop
 800bd66:	e7fe      	b.n	800bd66 <prvDeleteTCB+0x5e>
	}
 800bd68:	bf00      	nop
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd76:	4b0c      	ldr	r3, [pc, #48]	; (800bda8 <prvResetNextTaskUnblockTime+0x38>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d104      	bne.n	800bd8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd80:	4b0a      	ldr	r3, [pc, #40]	; (800bdac <prvResetNextTaskUnblockTime+0x3c>)
 800bd82:	f04f 32ff 	mov.w	r2, #4294967295
 800bd86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd88:	e008      	b.n	800bd9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd8a:	4b07      	ldr	r3, [pc, #28]	; (800bda8 <prvResetNextTaskUnblockTime+0x38>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	4a04      	ldr	r2, [pc, #16]	; (800bdac <prvResetNextTaskUnblockTime+0x3c>)
 800bd9a:	6013      	str	r3, [r2, #0]
}
 800bd9c:	bf00      	nop
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr
 800bda8:	24004f20 	.word	0x24004f20
 800bdac:	24004f88 	.word	0x24004f88

0800bdb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bdb6:	4b0b      	ldr	r3, [pc, #44]	; (800bde4 <xTaskGetSchedulerState+0x34>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d102      	bne.n	800bdc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	607b      	str	r3, [r7, #4]
 800bdc2:	e008      	b.n	800bdd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdc4:	4b08      	ldr	r3, [pc, #32]	; (800bde8 <xTaskGetSchedulerState+0x38>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d102      	bne.n	800bdd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bdcc:	2302      	movs	r3, #2
 800bdce:	607b      	str	r3, [r7, #4]
 800bdd0:	e001      	b.n	800bdd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bdd6:	687b      	ldr	r3, [r7, #4]
	}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr
 800bde4:	24004f74 	.word	0x24004f74
 800bde8:	24004f90 	.word	0x24004f90

0800bdec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b086      	sub	sp, #24
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d056      	beq.n	800beb0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be02:	4b2e      	ldr	r3, [pc, #184]	; (800bebc <xTaskPriorityDisinherit+0xd0>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	693a      	ldr	r2, [r7, #16]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d00a      	beq.n	800be22 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800be0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be10:	f383 8811 	msr	BASEPRI, r3
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	60fb      	str	r3, [r7, #12]
}
 800be1e:	bf00      	nop
 800be20:	e7fe      	b.n	800be20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be26:	2b00      	cmp	r3, #0
 800be28:	d10a      	bne.n	800be40 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800be2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2e:	f383 8811 	msr	BASEPRI, r3
 800be32:	f3bf 8f6f 	isb	sy
 800be36:	f3bf 8f4f 	dsb	sy
 800be3a:	60bb      	str	r3, [r7, #8]
}
 800be3c:	bf00      	nop
 800be3e:	e7fe      	b.n	800be3e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be44:	1e5a      	subs	r2, r3, #1
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be52:	429a      	cmp	r2, r3
 800be54:	d02c      	beq.n	800beb0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d128      	bne.n	800beb0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	3304      	adds	r3, #4
 800be62:	4618      	mov	r0, r3
 800be64:	f7fe f9f8 	bl	800a258 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be80:	4b0f      	ldr	r3, [pc, #60]	; (800bec0 <xTaskPriorityDisinherit+0xd4>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	429a      	cmp	r2, r3
 800be86:	d903      	bls.n	800be90 <xTaskPriorityDisinherit+0xa4>
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be8c:	4a0c      	ldr	r2, [pc, #48]	; (800bec0 <xTaskPriorityDisinherit+0xd4>)
 800be8e:	6013      	str	r3, [r2, #0]
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be94:	4613      	mov	r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	4413      	add	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	4a09      	ldr	r2, [pc, #36]	; (800bec4 <xTaskPriorityDisinherit+0xd8>)
 800be9e:	441a      	add	r2, r3
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	3304      	adds	r3, #4
 800bea4:	4619      	mov	r1, r3
 800bea6:	4610      	mov	r0, r2
 800bea8:	f7fe f979 	bl	800a19e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800beac:	2301      	movs	r3, #1
 800beae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800beb0:	697b      	ldr	r3, [r7, #20]
	}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3718      	adds	r7, #24
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	24004a94 	.word	0x24004a94
 800bec0:	24004f70 	.word	0x24004f70
 800bec4:	24004a98 	.word	0x24004a98

0800bec8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bed2:	4b21      	ldr	r3, [pc, #132]	; (800bf58 <prvAddCurrentTaskToDelayedList+0x90>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bed8:	4b20      	ldr	r3, [pc, #128]	; (800bf5c <prvAddCurrentTaskToDelayedList+0x94>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	3304      	adds	r3, #4
 800bede:	4618      	mov	r0, r3
 800bee0:	f7fe f9ba 	bl	800a258 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beea:	d10a      	bne.n	800bf02 <prvAddCurrentTaskToDelayedList+0x3a>
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d007      	beq.n	800bf02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bef2:	4b1a      	ldr	r3, [pc, #104]	; (800bf5c <prvAddCurrentTaskToDelayedList+0x94>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	3304      	adds	r3, #4
 800bef8:	4619      	mov	r1, r3
 800befa:	4819      	ldr	r0, [pc, #100]	; (800bf60 <prvAddCurrentTaskToDelayedList+0x98>)
 800befc:	f7fe f94f 	bl	800a19e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf00:	e026      	b.n	800bf50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf02:	68fa      	ldr	r2, [r7, #12]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4413      	add	r3, r2
 800bf08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf0a:	4b14      	ldr	r3, [pc, #80]	; (800bf5c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	68ba      	ldr	r2, [r7, #8]
 800bf10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf12:	68ba      	ldr	r2, [r7, #8]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d209      	bcs.n	800bf2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf1a:	4b12      	ldr	r3, [pc, #72]	; (800bf64 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	4b0f      	ldr	r3, [pc, #60]	; (800bf5c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	3304      	adds	r3, #4
 800bf24:	4619      	mov	r1, r3
 800bf26:	4610      	mov	r0, r2
 800bf28:	f7fe f95d 	bl	800a1e6 <vListInsert>
}
 800bf2c:	e010      	b.n	800bf50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf2e:	4b0e      	ldr	r3, [pc, #56]	; (800bf68 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	4b0a      	ldr	r3, [pc, #40]	; (800bf5c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	3304      	adds	r3, #4
 800bf38:	4619      	mov	r1, r3
 800bf3a:	4610      	mov	r0, r2
 800bf3c:	f7fe f953 	bl	800a1e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf40:	4b0a      	ldr	r3, [pc, #40]	; (800bf6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	68ba      	ldr	r2, [r7, #8]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d202      	bcs.n	800bf50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bf4a:	4a08      	ldr	r2, [pc, #32]	; (800bf6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	6013      	str	r3, [r2, #0]
}
 800bf50:	bf00      	nop
 800bf52:	3710      	adds	r7, #16
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	24004f6c 	.word	0x24004f6c
 800bf5c:	24004a94 	.word	0x24004a94
 800bf60:	24004f54 	.word	0x24004f54
 800bf64:	24004f24 	.word	0x24004f24
 800bf68:	24004f20 	.word	0x24004f20
 800bf6c:	24004f88 	.word	0x24004f88

0800bf70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b08a      	sub	sp, #40	; 0x28
 800bf74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf76:	2300      	movs	r3, #0
 800bf78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf7a:	f000 fb07 	bl	800c58c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf7e:	4b1c      	ldr	r3, [pc, #112]	; (800bff0 <xTimerCreateTimerTask+0x80>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d021      	beq.n	800bfca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bf86:	2300      	movs	r3, #0
 800bf88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf8e:	1d3a      	adds	r2, r7, #4
 800bf90:	f107 0108 	add.w	r1, r7, #8
 800bf94:	f107 030c 	add.w	r3, r7, #12
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7fd fecf 	bl	8009d3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bf9e:	6879      	ldr	r1, [r7, #4]
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	9202      	str	r2, [sp, #8]
 800bfa6:	9301      	str	r3, [sp, #4]
 800bfa8:	2302      	movs	r3, #2
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	2300      	movs	r3, #0
 800bfae:	460a      	mov	r2, r1
 800bfb0:	4910      	ldr	r1, [pc, #64]	; (800bff4 <xTimerCreateTimerTask+0x84>)
 800bfb2:	4811      	ldr	r0, [pc, #68]	; (800bff8 <xTimerCreateTimerTask+0x88>)
 800bfb4:	f7ff f8b4 	bl	800b120 <xTaskCreateStatic>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	4a10      	ldr	r2, [pc, #64]	; (800bffc <xTimerCreateTimerTask+0x8c>)
 800bfbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bfbe:	4b0f      	ldr	r3, [pc, #60]	; (800bffc <xTimerCreateTimerTask+0x8c>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d001      	beq.n	800bfca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d10a      	bne.n	800bfe6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd4:	f383 8811 	msr	BASEPRI, r3
 800bfd8:	f3bf 8f6f 	isb	sy
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	613b      	str	r3, [r7, #16]
}
 800bfe2:	bf00      	nop
 800bfe4:	e7fe      	b.n	800bfe4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bfe6:	697b      	ldr	r3, [r7, #20]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3718      	adds	r7, #24
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	24004fc4 	.word	0x24004fc4
 800bff4:	08010090 	.word	0x08010090
 800bff8:	0800c135 	.word	0x0800c135
 800bffc:	24004fc8 	.word	0x24004fc8

0800c000 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b08a      	sub	sp, #40	; 0x28
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	607a      	str	r2, [r7, #4]
 800c00c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c00e:	2300      	movs	r3, #0
 800c010:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d10a      	bne.n	800c02e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01c:	f383 8811 	msr	BASEPRI, r3
 800c020:	f3bf 8f6f 	isb	sy
 800c024:	f3bf 8f4f 	dsb	sy
 800c028:	623b      	str	r3, [r7, #32]
}
 800c02a:	bf00      	nop
 800c02c:	e7fe      	b.n	800c02c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c02e:	4b1a      	ldr	r3, [pc, #104]	; (800c098 <xTimerGenericCommand+0x98>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d02a      	beq.n	800c08c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	2b05      	cmp	r3, #5
 800c046:	dc18      	bgt.n	800c07a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c048:	f7ff feb2 	bl	800bdb0 <xTaskGetSchedulerState>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b02      	cmp	r3, #2
 800c050:	d109      	bne.n	800c066 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c052:	4b11      	ldr	r3, [pc, #68]	; (800c098 <xTimerGenericCommand+0x98>)
 800c054:	6818      	ldr	r0, [r3, #0]
 800c056:	f107 0110 	add.w	r1, r7, #16
 800c05a:	2300      	movs	r3, #0
 800c05c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c05e:	f7fe fc77 	bl	800a950 <xQueueGenericSend>
 800c062:	6278      	str	r0, [r7, #36]	; 0x24
 800c064:	e012      	b.n	800c08c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c066:	4b0c      	ldr	r3, [pc, #48]	; (800c098 <xTimerGenericCommand+0x98>)
 800c068:	6818      	ldr	r0, [r3, #0]
 800c06a:	f107 0110 	add.w	r1, r7, #16
 800c06e:	2300      	movs	r3, #0
 800c070:	2200      	movs	r2, #0
 800c072:	f7fe fc6d 	bl	800a950 <xQueueGenericSend>
 800c076:	6278      	str	r0, [r7, #36]	; 0x24
 800c078:	e008      	b.n	800c08c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c07a:	4b07      	ldr	r3, [pc, #28]	; (800c098 <xTimerGenericCommand+0x98>)
 800c07c:	6818      	ldr	r0, [r3, #0]
 800c07e:	f107 0110 	add.w	r1, r7, #16
 800c082:	2300      	movs	r3, #0
 800c084:	683a      	ldr	r2, [r7, #0]
 800c086:	f7fe fd61 	bl	800ab4c <xQueueGenericSendFromISR>
 800c08a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3728      	adds	r7, #40	; 0x28
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	24004fc4 	.word	0x24004fc4

0800c09c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b088      	sub	sp, #32
 800c0a0:	af02      	add	r7, sp, #8
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0a6:	4b22      	ldr	r3, [pc, #136]	; (800c130 <prvProcessExpiredTimer+0x94>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	3304      	adds	r3, #4
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7fe f8cf 	bl	800a258 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0c0:	f003 0304 	and.w	r3, r3, #4
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d022      	beq.n	800c10e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	699a      	ldr	r2, [r3, #24]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	18d1      	adds	r1, r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	683a      	ldr	r2, [r7, #0]
 800c0d4:	6978      	ldr	r0, [r7, #20]
 800c0d6:	f000 f8d1 	bl	800c27c <prvInsertTimerInActiveList>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d01f      	beq.n	800c120 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	2100      	movs	r1, #0
 800c0ea:	6978      	ldr	r0, [r7, #20]
 800c0ec:	f7ff ff88 	bl	800c000 <xTimerGenericCommand>
 800c0f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d113      	bne.n	800c120 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fc:	f383 8811 	msr	BASEPRI, r3
 800c100:	f3bf 8f6f 	isb	sy
 800c104:	f3bf 8f4f 	dsb	sy
 800c108:	60fb      	str	r3, [r7, #12]
}
 800c10a:	bf00      	nop
 800c10c:	e7fe      	b.n	800c10c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c114:	f023 0301 	bic.w	r3, r3, #1
 800c118:	b2da      	uxtb	r2, r3
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	6a1b      	ldr	r3, [r3, #32]
 800c124:	6978      	ldr	r0, [r7, #20]
 800c126:	4798      	blx	r3
}
 800c128:	bf00      	nop
 800c12a:	3718      	adds	r7, #24
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	24004fbc 	.word	0x24004fbc

0800c134 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c13c:	f107 0308 	add.w	r3, r7, #8
 800c140:	4618      	mov	r0, r3
 800c142:	f000 f857 	bl	800c1f4 <prvGetNextExpireTime>
 800c146:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	4619      	mov	r1, r3
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f000 f803 	bl	800c158 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c152:	f000 f8d5 	bl	800c300 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c156:	e7f1      	b.n	800c13c <prvTimerTask+0x8>

0800c158 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c162:	f7ff fa39 	bl	800b5d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c166:	f107 0308 	add.w	r3, r7, #8
 800c16a:	4618      	mov	r0, r3
 800c16c:	f000 f866 	bl	800c23c <prvSampleTimeNow>
 800c170:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d130      	bne.n	800c1da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d10a      	bne.n	800c194 <prvProcessTimerOrBlockTask+0x3c>
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	429a      	cmp	r2, r3
 800c184:	d806      	bhi.n	800c194 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c186:	f7ff fa35 	bl	800b5f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c18a:	68f9      	ldr	r1, [r7, #12]
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f7ff ff85 	bl	800c09c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c192:	e024      	b.n	800c1de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d008      	beq.n	800c1ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c19a:	4b13      	ldr	r3, [pc, #76]	; (800c1e8 <prvProcessTimerOrBlockTask+0x90>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d101      	bne.n	800c1a8 <prvProcessTimerOrBlockTask+0x50>
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	e000      	b.n	800c1aa <prvProcessTimerOrBlockTask+0x52>
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c1ac:	4b0f      	ldr	r3, [pc, #60]	; (800c1ec <prvProcessTimerOrBlockTask+0x94>)
 800c1ae:	6818      	ldr	r0, [r3, #0]
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	1ad3      	subs	r3, r2, r3
 800c1b6:	683a      	ldr	r2, [r7, #0]
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	f7fe ff7d 	bl	800b0b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c1be:	f7ff fa19 	bl	800b5f4 <xTaskResumeAll>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10a      	bne.n	800c1de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c1c8:	4b09      	ldr	r3, [pc, #36]	; (800c1f0 <prvProcessTimerOrBlockTask+0x98>)
 800c1ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1ce:	601a      	str	r2, [r3, #0]
 800c1d0:	f3bf 8f4f 	dsb	sy
 800c1d4:	f3bf 8f6f 	isb	sy
}
 800c1d8:	e001      	b.n	800c1de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c1da:	f7ff fa0b 	bl	800b5f4 <xTaskResumeAll>
}
 800c1de:	bf00      	nop
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	24004fc0 	.word	0x24004fc0
 800c1ec:	24004fc4 	.word	0x24004fc4
 800c1f0:	e000ed04 	.word	0xe000ed04

0800c1f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b085      	sub	sp, #20
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c1fc:	4b0e      	ldr	r3, [pc, #56]	; (800c238 <prvGetNextExpireTime+0x44>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d101      	bne.n	800c20a <prvGetNextExpireTime+0x16>
 800c206:	2201      	movs	r2, #1
 800c208:	e000      	b.n	800c20c <prvGetNextExpireTime+0x18>
 800c20a:	2200      	movs	r2, #0
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d105      	bne.n	800c224 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c218:	4b07      	ldr	r3, [pc, #28]	; (800c238 <prvGetNextExpireTime+0x44>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	60fb      	str	r3, [r7, #12]
 800c222:	e001      	b.n	800c228 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c224:	2300      	movs	r3, #0
 800c226:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c228:	68fb      	ldr	r3, [r7, #12]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3714      	adds	r7, #20
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr
 800c236:	bf00      	nop
 800c238:	24004fbc 	.word	0x24004fbc

0800c23c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c244:	f7ff fa74 	bl	800b730 <xTaskGetTickCount>
 800c248:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c24a:	4b0b      	ldr	r3, [pc, #44]	; (800c278 <prvSampleTimeNow+0x3c>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	429a      	cmp	r2, r3
 800c252:	d205      	bcs.n	800c260 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c254:	f000 f936 	bl	800c4c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2201      	movs	r2, #1
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	e002      	b.n	800c266 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c266:	4a04      	ldr	r2, [pc, #16]	; (800c278 <prvSampleTimeNow+0x3c>)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c26c:	68fb      	ldr	r3, [r7, #12]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	24004fcc 	.word	0x24004fcc

0800c27c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b086      	sub	sp, #24
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	607a      	str	r2, [r7, #4]
 800c288:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c28a:	2300      	movs	r3, #0
 800c28c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	68ba      	ldr	r2, [r7, #8]
 800c292:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	68fa      	ldr	r2, [r7, #12]
 800c298:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c29a:	68ba      	ldr	r2, [r7, #8]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d812      	bhi.n	800c2c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	1ad2      	subs	r2, r2, r3
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	699b      	ldr	r3, [r3, #24]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d302      	bcc.n	800c2b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	617b      	str	r3, [r7, #20]
 800c2b4:	e01b      	b.n	800c2ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c2b6:	4b10      	ldr	r3, [pc, #64]	; (800c2f8 <prvInsertTimerInActiveList+0x7c>)
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	3304      	adds	r3, #4
 800c2be:	4619      	mov	r1, r3
 800c2c0:	4610      	mov	r0, r2
 800c2c2:	f7fd ff90 	bl	800a1e6 <vListInsert>
 800c2c6:	e012      	b.n	800c2ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d206      	bcs.n	800c2de <prvInsertTimerInActiveList+0x62>
 800c2d0:	68ba      	ldr	r2, [r7, #8]
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d302      	bcc.n	800c2de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	617b      	str	r3, [r7, #20]
 800c2dc:	e007      	b.n	800c2ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2de:	4b07      	ldr	r3, [pc, #28]	; (800c2fc <prvInsertTimerInActiveList+0x80>)
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	f7fd ff7c 	bl	800a1e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c2ee:	697b      	ldr	r3, [r7, #20]
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3718      	adds	r7, #24
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	24004fc0 	.word	0x24004fc0
 800c2fc:	24004fbc 	.word	0x24004fbc

0800c300 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b08e      	sub	sp, #56	; 0x38
 800c304:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c306:	e0ca      	b.n	800c49e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	da18      	bge.n	800c340 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c30e:	1d3b      	adds	r3, r7, #4
 800c310:	3304      	adds	r3, #4
 800c312:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c316:	2b00      	cmp	r3, #0
 800c318:	d10a      	bne.n	800c330 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31e:	f383 8811 	msr	BASEPRI, r3
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	f3bf 8f4f 	dsb	sy
 800c32a:	61fb      	str	r3, [r7, #28]
}
 800c32c:	bf00      	nop
 800c32e:	e7fe      	b.n	800c32e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c336:	6850      	ldr	r0, [r2, #4]
 800c338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c33a:	6892      	ldr	r2, [r2, #8]
 800c33c:	4611      	mov	r1, r2
 800c33e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	f2c0 80aa 	blt.w	800c49c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34e:	695b      	ldr	r3, [r3, #20]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d004      	beq.n	800c35e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c356:	3304      	adds	r3, #4
 800c358:	4618      	mov	r0, r3
 800c35a:	f7fd ff7d 	bl	800a258 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c35e:	463b      	mov	r3, r7
 800c360:	4618      	mov	r0, r3
 800c362:	f7ff ff6b 	bl	800c23c <prvSampleTimeNow>
 800c366:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2b09      	cmp	r3, #9
 800c36c:	f200 8097 	bhi.w	800c49e <prvProcessReceivedCommands+0x19e>
 800c370:	a201      	add	r2, pc, #4	; (adr r2, 800c378 <prvProcessReceivedCommands+0x78>)
 800c372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c376:	bf00      	nop
 800c378:	0800c3a1 	.word	0x0800c3a1
 800c37c:	0800c3a1 	.word	0x0800c3a1
 800c380:	0800c3a1 	.word	0x0800c3a1
 800c384:	0800c415 	.word	0x0800c415
 800c388:	0800c429 	.word	0x0800c429
 800c38c:	0800c473 	.word	0x0800c473
 800c390:	0800c3a1 	.word	0x0800c3a1
 800c394:	0800c3a1 	.word	0x0800c3a1
 800c398:	0800c415 	.word	0x0800c415
 800c39c:	0800c429 	.word	0x0800c429
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3a6:	f043 0301 	orr.w	r3, r3, #1
 800c3aa:	b2da      	uxtb	r2, r3
 800c3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c3b2:	68ba      	ldr	r2, [r7, #8]
 800c3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	18d1      	adds	r1, r2, r3
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3c0:	f7ff ff5c 	bl	800c27c <prvInsertTimerInActiveList>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d069      	beq.n	800c49e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3cc:	6a1b      	ldr	r3, [r3, #32]
 800c3ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3d8:	f003 0304 	and.w	r3, r3, #4
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d05e      	beq.n	800c49e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c3e0:	68ba      	ldr	r2, [r7, #8]
 800c3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e4:	699b      	ldr	r3, [r3, #24]
 800c3e6:	441a      	add	r2, r3
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3f2:	f7ff fe05 	bl	800c000 <xTimerGenericCommand>
 800c3f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c3f8:	6a3b      	ldr	r3, [r7, #32]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d14f      	bne.n	800c49e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	61bb      	str	r3, [r7, #24]
}
 800c410:	bf00      	nop
 800c412:	e7fe      	b.n	800c412 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c41a:	f023 0301 	bic.w	r3, r3, #1
 800c41e:	b2da      	uxtb	r2, r3
 800c420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c426:	e03a      	b.n	800c49e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c42e:	f043 0301 	orr.w	r3, r3, #1
 800c432:	b2da      	uxtb	r2, r3
 800c434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c43a:	68ba      	ldr	r2, [r7, #8]
 800c43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c442:	699b      	ldr	r3, [r3, #24]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d10a      	bne.n	800c45e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44c:	f383 8811 	msr	BASEPRI, r3
 800c450:	f3bf 8f6f 	isb	sy
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	617b      	str	r3, [r7, #20]
}
 800c45a:	bf00      	nop
 800c45c:	e7fe      	b.n	800c45c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c460:	699a      	ldr	r2, [r3, #24]
 800c462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c464:	18d1      	adds	r1, r2, r3
 800c466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c46a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c46c:	f7ff ff06 	bl	800c27c <prvInsertTimerInActiveList>
					break;
 800c470:	e015      	b.n	800c49e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c478:	f003 0302 	and.w	r3, r3, #2
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d103      	bne.n	800c488 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c482:	f7fd fd41 	bl	8009f08 <vPortFree>
 800c486:	e00a      	b.n	800c49e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c48e:	f023 0301 	bic.w	r3, r3, #1
 800c492:	b2da      	uxtb	r2, r3
 800c494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c496:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c49a:	e000      	b.n	800c49e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c49c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c49e:	4b08      	ldr	r3, [pc, #32]	; (800c4c0 <prvProcessReceivedCommands+0x1c0>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	1d39      	adds	r1, r7, #4
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7fe fbec 	bl	800ac84 <xQueueReceive>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	f47f af2a 	bne.w	800c308 <prvProcessReceivedCommands+0x8>
	}
}
 800c4b4:	bf00      	nop
 800c4b6:	bf00      	nop
 800c4b8:	3730      	adds	r7, #48	; 0x30
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	24004fc4 	.word	0x24004fc4

0800c4c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b088      	sub	sp, #32
 800c4c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4ca:	e048      	b.n	800c55e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4cc:	4b2d      	ldr	r3, [pc, #180]	; (800c584 <prvSwitchTimerLists+0xc0>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4d6:	4b2b      	ldr	r3, [pc, #172]	; (800c584 <prvSwitchTimerLists+0xc0>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	68db      	ldr	r3, [r3, #12]
 800c4dc:	68db      	ldr	r3, [r3, #12]
 800c4de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	3304      	adds	r3, #4
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7fd feb7 	bl	800a258 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	6a1b      	ldr	r3, [r3, #32]
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4f8:	f003 0304 	and.w	r3, r3, #4
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d02e      	beq.n	800c55e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	699b      	ldr	r3, [r3, #24]
 800c504:	693a      	ldr	r2, [r7, #16]
 800c506:	4413      	add	r3, r2
 800c508:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c50a:	68ba      	ldr	r2, [r7, #8]
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d90e      	bls.n	800c530 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	68ba      	ldr	r2, [r7, #8]
 800c516:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c51e:	4b19      	ldr	r3, [pc, #100]	; (800c584 <prvSwitchTimerLists+0xc0>)
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	3304      	adds	r3, #4
 800c526:	4619      	mov	r1, r3
 800c528:	4610      	mov	r0, r2
 800c52a:	f7fd fe5c 	bl	800a1e6 <vListInsert>
 800c52e:	e016      	b.n	800c55e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c530:	2300      	movs	r3, #0
 800c532:	9300      	str	r3, [sp, #0]
 800c534:	2300      	movs	r3, #0
 800c536:	693a      	ldr	r2, [r7, #16]
 800c538:	2100      	movs	r1, #0
 800c53a:	68f8      	ldr	r0, [r7, #12]
 800c53c:	f7ff fd60 	bl	800c000 <xTimerGenericCommand>
 800c540:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10a      	bne.n	800c55e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54c:	f383 8811 	msr	BASEPRI, r3
 800c550:	f3bf 8f6f 	isb	sy
 800c554:	f3bf 8f4f 	dsb	sy
 800c558:	603b      	str	r3, [r7, #0]
}
 800c55a:	bf00      	nop
 800c55c:	e7fe      	b.n	800c55c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c55e:	4b09      	ldr	r3, [pc, #36]	; (800c584 <prvSwitchTimerLists+0xc0>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d1b1      	bne.n	800c4cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c568:	4b06      	ldr	r3, [pc, #24]	; (800c584 <prvSwitchTimerLists+0xc0>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c56e:	4b06      	ldr	r3, [pc, #24]	; (800c588 <prvSwitchTimerLists+0xc4>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a04      	ldr	r2, [pc, #16]	; (800c584 <prvSwitchTimerLists+0xc0>)
 800c574:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c576:	4a04      	ldr	r2, [pc, #16]	; (800c588 <prvSwitchTimerLists+0xc4>)
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	6013      	str	r3, [r2, #0]
}
 800c57c:	bf00      	nop
 800c57e:	3718      	adds	r7, #24
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	24004fbc 	.word	0x24004fbc
 800c588:	24004fc0 	.word	0x24004fc0

0800c58c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c592:	f7fd ffb7 	bl	800a504 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c596:	4b15      	ldr	r3, [pc, #84]	; (800c5ec <prvCheckForValidListAndQueue+0x60>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d120      	bne.n	800c5e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c59e:	4814      	ldr	r0, [pc, #80]	; (800c5f0 <prvCheckForValidListAndQueue+0x64>)
 800c5a0:	f7fd fdd0 	bl	800a144 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c5a4:	4813      	ldr	r0, [pc, #76]	; (800c5f4 <prvCheckForValidListAndQueue+0x68>)
 800c5a6:	f7fd fdcd 	bl	800a144 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c5aa:	4b13      	ldr	r3, [pc, #76]	; (800c5f8 <prvCheckForValidListAndQueue+0x6c>)
 800c5ac:	4a10      	ldr	r2, [pc, #64]	; (800c5f0 <prvCheckForValidListAndQueue+0x64>)
 800c5ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c5b0:	4b12      	ldr	r3, [pc, #72]	; (800c5fc <prvCheckForValidListAndQueue+0x70>)
 800c5b2:	4a10      	ldr	r2, [pc, #64]	; (800c5f4 <prvCheckForValidListAndQueue+0x68>)
 800c5b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	9300      	str	r3, [sp, #0]
 800c5ba:	4b11      	ldr	r3, [pc, #68]	; (800c600 <prvCheckForValidListAndQueue+0x74>)
 800c5bc:	4a11      	ldr	r2, [pc, #68]	; (800c604 <prvCheckForValidListAndQueue+0x78>)
 800c5be:	2110      	movs	r1, #16
 800c5c0:	200a      	movs	r0, #10
 800c5c2:	f7fe f929 	bl	800a818 <xQueueGenericCreateStatic>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	4a08      	ldr	r2, [pc, #32]	; (800c5ec <prvCheckForValidListAndQueue+0x60>)
 800c5ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c5cc:	4b07      	ldr	r3, [pc, #28]	; (800c5ec <prvCheckForValidListAndQueue+0x60>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d005      	beq.n	800c5e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c5d4:	4b05      	ldr	r3, [pc, #20]	; (800c5ec <prvCheckForValidListAndQueue+0x60>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	490b      	ldr	r1, [pc, #44]	; (800c608 <prvCheckForValidListAndQueue+0x7c>)
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7fe fd42 	bl	800b064 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5e0:	f7fd ffc0 	bl	800a564 <vPortExitCritical>
}
 800c5e4:	bf00      	nop
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	24004fc4 	.word	0x24004fc4
 800c5f0:	24004f94 	.word	0x24004f94
 800c5f4:	24004fa8 	.word	0x24004fa8
 800c5f8:	24004fbc 	.word	0x24004fbc
 800c5fc:	24004fc0 	.word	0x24004fc0
 800c600:	24005070 	.word	0x24005070
 800c604:	24004fd0 	.word	0x24004fd0
 800c608:	08010098 	.word	0x08010098

0800c60c <__errno>:
 800c60c:	4b01      	ldr	r3, [pc, #4]	; (800c614 <__errno+0x8>)
 800c60e:	6818      	ldr	r0, [r3, #0]
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	2400002c 	.word	0x2400002c

0800c618 <std>:
 800c618:	2300      	movs	r3, #0
 800c61a:	b510      	push	{r4, lr}
 800c61c:	4604      	mov	r4, r0
 800c61e:	e9c0 3300 	strd	r3, r3, [r0]
 800c622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c626:	6083      	str	r3, [r0, #8]
 800c628:	8181      	strh	r1, [r0, #12]
 800c62a:	6643      	str	r3, [r0, #100]	; 0x64
 800c62c:	81c2      	strh	r2, [r0, #14]
 800c62e:	6183      	str	r3, [r0, #24]
 800c630:	4619      	mov	r1, r3
 800c632:	2208      	movs	r2, #8
 800c634:	305c      	adds	r0, #92	; 0x5c
 800c636:	f000 f91a 	bl	800c86e <memset>
 800c63a:	4b05      	ldr	r3, [pc, #20]	; (800c650 <std+0x38>)
 800c63c:	6263      	str	r3, [r4, #36]	; 0x24
 800c63e:	4b05      	ldr	r3, [pc, #20]	; (800c654 <std+0x3c>)
 800c640:	62a3      	str	r3, [r4, #40]	; 0x28
 800c642:	4b05      	ldr	r3, [pc, #20]	; (800c658 <std+0x40>)
 800c644:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c646:	4b05      	ldr	r3, [pc, #20]	; (800c65c <std+0x44>)
 800c648:	6224      	str	r4, [r4, #32]
 800c64a:	6323      	str	r3, [r4, #48]	; 0x30
 800c64c:	bd10      	pop	{r4, pc}
 800c64e:	bf00      	nop
 800c650:	0800d391 	.word	0x0800d391
 800c654:	0800d3b3 	.word	0x0800d3b3
 800c658:	0800d3eb 	.word	0x0800d3eb
 800c65c:	0800d40f 	.word	0x0800d40f

0800c660 <_cleanup_r>:
 800c660:	4901      	ldr	r1, [pc, #4]	; (800c668 <_cleanup_r+0x8>)
 800c662:	f000 b8af 	b.w	800c7c4 <_fwalk_reent>
 800c666:	bf00      	nop
 800c668:	0800e161 	.word	0x0800e161

0800c66c <__sfmoreglue>:
 800c66c:	b570      	push	{r4, r5, r6, lr}
 800c66e:	2268      	movs	r2, #104	; 0x68
 800c670:	1e4d      	subs	r5, r1, #1
 800c672:	4355      	muls	r5, r2
 800c674:	460e      	mov	r6, r1
 800c676:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c67a:	f000 f921 	bl	800c8c0 <_malloc_r>
 800c67e:	4604      	mov	r4, r0
 800c680:	b140      	cbz	r0, 800c694 <__sfmoreglue+0x28>
 800c682:	2100      	movs	r1, #0
 800c684:	e9c0 1600 	strd	r1, r6, [r0]
 800c688:	300c      	adds	r0, #12
 800c68a:	60a0      	str	r0, [r4, #8]
 800c68c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c690:	f000 f8ed 	bl	800c86e <memset>
 800c694:	4620      	mov	r0, r4
 800c696:	bd70      	pop	{r4, r5, r6, pc}

0800c698 <__sfp_lock_acquire>:
 800c698:	4801      	ldr	r0, [pc, #4]	; (800c6a0 <__sfp_lock_acquire+0x8>)
 800c69a:	f000 b8d8 	b.w	800c84e <__retarget_lock_acquire_recursive>
 800c69e:	bf00      	nop
 800c6a0:	240050c1 	.word	0x240050c1

0800c6a4 <__sfp_lock_release>:
 800c6a4:	4801      	ldr	r0, [pc, #4]	; (800c6ac <__sfp_lock_release+0x8>)
 800c6a6:	f000 b8d3 	b.w	800c850 <__retarget_lock_release_recursive>
 800c6aa:	bf00      	nop
 800c6ac:	240050c1 	.word	0x240050c1

0800c6b0 <__sinit_lock_acquire>:
 800c6b0:	4801      	ldr	r0, [pc, #4]	; (800c6b8 <__sinit_lock_acquire+0x8>)
 800c6b2:	f000 b8cc 	b.w	800c84e <__retarget_lock_acquire_recursive>
 800c6b6:	bf00      	nop
 800c6b8:	240050c2 	.word	0x240050c2

0800c6bc <__sinit_lock_release>:
 800c6bc:	4801      	ldr	r0, [pc, #4]	; (800c6c4 <__sinit_lock_release+0x8>)
 800c6be:	f000 b8c7 	b.w	800c850 <__retarget_lock_release_recursive>
 800c6c2:	bf00      	nop
 800c6c4:	240050c2 	.word	0x240050c2

0800c6c8 <__sinit>:
 800c6c8:	b510      	push	{r4, lr}
 800c6ca:	4604      	mov	r4, r0
 800c6cc:	f7ff fff0 	bl	800c6b0 <__sinit_lock_acquire>
 800c6d0:	69a3      	ldr	r3, [r4, #24]
 800c6d2:	b11b      	cbz	r3, 800c6dc <__sinit+0x14>
 800c6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6d8:	f7ff bff0 	b.w	800c6bc <__sinit_lock_release>
 800c6dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c6e0:	6523      	str	r3, [r4, #80]	; 0x50
 800c6e2:	4b13      	ldr	r3, [pc, #76]	; (800c730 <__sinit+0x68>)
 800c6e4:	4a13      	ldr	r2, [pc, #76]	; (800c734 <__sinit+0x6c>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c6ea:	42a3      	cmp	r3, r4
 800c6ec:	bf04      	itt	eq
 800c6ee:	2301      	moveq	r3, #1
 800c6f0:	61a3      	streq	r3, [r4, #24]
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	f000 f820 	bl	800c738 <__sfp>
 800c6f8:	6060      	str	r0, [r4, #4]
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	f000 f81c 	bl	800c738 <__sfp>
 800c700:	60a0      	str	r0, [r4, #8]
 800c702:	4620      	mov	r0, r4
 800c704:	f000 f818 	bl	800c738 <__sfp>
 800c708:	2200      	movs	r2, #0
 800c70a:	60e0      	str	r0, [r4, #12]
 800c70c:	2104      	movs	r1, #4
 800c70e:	6860      	ldr	r0, [r4, #4]
 800c710:	f7ff ff82 	bl	800c618 <std>
 800c714:	68a0      	ldr	r0, [r4, #8]
 800c716:	2201      	movs	r2, #1
 800c718:	2109      	movs	r1, #9
 800c71a:	f7ff ff7d 	bl	800c618 <std>
 800c71e:	68e0      	ldr	r0, [r4, #12]
 800c720:	2202      	movs	r2, #2
 800c722:	2112      	movs	r1, #18
 800c724:	f7ff ff78 	bl	800c618 <std>
 800c728:	2301      	movs	r3, #1
 800c72a:	61a3      	str	r3, [r4, #24]
 800c72c:	e7d2      	b.n	800c6d4 <__sinit+0xc>
 800c72e:	bf00      	nop
 800c730:	080101d8 	.word	0x080101d8
 800c734:	0800c661 	.word	0x0800c661

0800c738 <__sfp>:
 800c738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c73a:	4607      	mov	r7, r0
 800c73c:	f7ff ffac 	bl	800c698 <__sfp_lock_acquire>
 800c740:	4b1e      	ldr	r3, [pc, #120]	; (800c7bc <__sfp+0x84>)
 800c742:	681e      	ldr	r6, [r3, #0]
 800c744:	69b3      	ldr	r3, [r6, #24]
 800c746:	b913      	cbnz	r3, 800c74e <__sfp+0x16>
 800c748:	4630      	mov	r0, r6
 800c74a:	f7ff ffbd 	bl	800c6c8 <__sinit>
 800c74e:	3648      	adds	r6, #72	; 0x48
 800c750:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c754:	3b01      	subs	r3, #1
 800c756:	d503      	bpl.n	800c760 <__sfp+0x28>
 800c758:	6833      	ldr	r3, [r6, #0]
 800c75a:	b30b      	cbz	r3, 800c7a0 <__sfp+0x68>
 800c75c:	6836      	ldr	r6, [r6, #0]
 800c75e:	e7f7      	b.n	800c750 <__sfp+0x18>
 800c760:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c764:	b9d5      	cbnz	r5, 800c79c <__sfp+0x64>
 800c766:	4b16      	ldr	r3, [pc, #88]	; (800c7c0 <__sfp+0x88>)
 800c768:	60e3      	str	r3, [r4, #12]
 800c76a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c76e:	6665      	str	r5, [r4, #100]	; 0x64
 800c770:	f000 f86c 	bl	800c84c <__retarget_lock_init_recursive>
 800c774:	f7ff ff96 	bl	800c6a4 <__sfp_lock_release>
 800c778:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c77c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c780:	6025      	str	r5, [r4, #0]
 800c782:	61a5      	str	r5, [r4, #24]
 800c784:	2208      	movs	r2, #8
 800c786:	4629      	mov	r1, r5
 800c788:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c78c:	f000 f86f 	bl	800c86e <memset>
 800c790:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c794:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c798:	4620      	mov	r0, r4
 800c79a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c79c:	3468      	adds	r4, #104	; 0x68
 800c79e:	e7d9      	b.n	800c754 <__sfp+0x1c>
 800c7a0:	2104      	movs	r1, #4
 800c7a2:	4638      	mov	r0, r7
 800c7a4:	f7ff ff62 	bl	800c66c <__sfmoreglue>
 800c7a8:	4604      	mov	r4, r0
 800c7aa:	6030      	str	r0, [r6, #0]
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	d1d5      	bne.n	800c75c <__sfp+0x24>
 800c7b0:	f7ff ff78 	bl	800c6a4 <__sfp_lock_release>
 800c7b4:	230c      	movs	r3, #12
 800c7b6:	603b      	str	r3, [r7, #0]
 800c7b8:	e7ee      	b.n	800c798 <__sfp+0x60>
 800c7ba:	bf00      	nop
 800c7bc:	080101d8 	.word	0x080101d8
 800c7c0:	ffff0001 	.word	0xffff0001

0800c7c4 <_fwalk_reent>:
 800c7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7c8:	4606      	mov	r6, r0
 800c7ca:	4688      	mov	r8, r1
 800c7cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c7d0:	2700      	movs	r7, #0
 800c7d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7d6:	f1b9 0901 	subs.w	r9, r9, #1
 800c7da:	d505      	bpl.n	800c7e8 <_fwalk_reent+0x24>
 800c7dc:	6824      	ldr	r4, [r4, #0]
 800c7de:	2c00      	cmp	r4, #0
 800c7e0:	d1f7      	bne.n	800c7d2 <_fwalk_reent+0xe>
 800c7e2:	4638      	mov	r0, r7
 800c7e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7e8:	89ab      	ldrh	r3, [r5, #12]
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	d907      	bls.n	800c7fe <_fwalk_reent+0x3a>
 800c7ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	d003      	beq.n	800c7fe <_fwalk_reent+0x3a>
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	47c0      	blx	r8
 800c7fc:	4307      	orrs	r7, r0
 800c7fe:	3568      	adds	r5, #104	; 0x68
 800c800:	e7e9      	b.n	800c7d6 <_fwalk_reent+0x12>
	...

0800c804 <__libc_init_array>:
 800c804:	b570      	push	{r4, r5, r6, lr}
 800c806:	4d0d      	ldr	r5, [pc, #52]	; (800c83c <__libc_init_array+0x38>)
 800c808:	4c0d      	ldr	r4, [pc, #52]	; (800c840 <__libc_init_array+0x3c>)
 800c80a:	1b64      	subs	r4, r4, r5
 800c80c:	10a4      	asrs	r4, r4, #2
 800c80e:	2600      	movs	r6, #0
 800c810:	42a6      	cmp	r6, r4
 800c812:	d109      	bne.n	800c828 <__libc_init_array+0x24>
 800c814:	4d0b      	ldr	r5, [pc, #44]	; (800c844 <__libc_init_array+0x40>)
 800c816:	4c0c      	ldr	r4, [pc, #48]	; (800c848 <__libc_init_array+0x44>)
 800c818:	f003 f8ea 	bl	800f9f0 <_init>
 800c81c:	1b64      	subs	r4, r4, r5
 800c81e:	10a4      	asrs	r4, r4, #2
 800c820:	2600      	movs	r6, #0
 800c822:	42a6      	cmp	r6, r4
 800c824:	d105      	bne.n	800c832 <__libc_init_array+0x2e>
 800c826:	bd70      	pop	{r4, r5, r6, pc}
 800c828:	f855 3b04 	ldr.w	r3, [r5], #4
 800c82c:	4798      	blx	r3
 800c82e:	3601      	adds	r6, #1
 800c830:	e7ee      	b.n	800c810 <__libc_init_array+0xc>
 800c832:	f855 3b04 	ldr.w	r3, [r5], #4
 800c836:	4798      	blx	r3
 800c838:	3601      	adds	r6, #1
 800c83a:	e7f2      	b.n	800c822 <__libc_init_array+0x1e>
 800c83c:	080105e0 	.word	0x080105e0
 800c840:	080105e0 	.word	0x080105e0
 800c844:	080105e0 	.word	0x080105e0
 800c848:	080105e4 	.word	0x080105e4

0800c84c <__retarget_lock_init_recursive>:
 800c84c:	4770      	bx	lr

0800c84e <__retarget_lock_acquire_recursive>:
 800c84e:	4770      	bx	lr

0800c850 <__retarget_lock_release_recursive>:
 800c850:	4770      	bx	lr

0800c852 <memcpy>:
 800c852:	440a      	add	r2, r1
 800c854:	4291      	cmp	r1, r2
 800c856:	f100 33ff 	add.w	r3, r0, #4294967295
 800c85a:	d100      	bne.n	800c85e <memcpy+0xc>
 800c85c:	4770      	bx	lr
 800c85e:	b510      	push	{r4, lr}
 800c860:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c864:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c868:	4291      	cmp	r1, r2
 800c86a:	d1f9      	bne.n	800c860 <memcpy+0xe>
 800c86c:	bd10      	pop	{r4, pc}

0800c86e <memset>:
 800c86e:	4402      	add	r2, r0
 800c870:	4603      	mov	r3, r0
 800c872:	4293      	cmp	r3, r2
 800c874:	d100      	bne.n	800c878 <memset+0xa>
 800c876:	4770      	bx	lr
 800c878:	f803 1b01 	strb.w	r1, [r3], #1
 800c87c:	e7f9      	b.n	800c872 <memset+0x4>
	...

0800c880 <sbrk_aligned>:
 800c880:	b570      	push	{r4, r5, r6, lr}
 800c882:	4e0e      	ldr	r6, [pc, #56]	; (800c8bc <sbrk_aligned+0x3c>)
 800c884:	460c      	mov	r4, r1
 800c886:	6831      	ldr	r1, [r6, #0]
 800c888:	4605      	mov	r5, r0
 800c88a:	b911      	cbnz	r1, 800c892 <sbrk_aligned+0x12>
 800c88c:	f000 fd50 	bl	800d330 <_sbrk_r>
 800c890:	6030      	str	r0, [r6, #0]
 800c892:	4621      	mov	r1, r4
 800c894:	4628      	mov	r0, r5
 800c896:	f000 fd4b 	bl	800d330 <_sbrk_r>
 800c89a:	1c43      	adds	r3, r0, #1
 800c89c:	d00a      	beq.n	800c8b4 <sbrk_aligned+0x34>
 800c89e:	1cc4      	adds	r4, r0, #3
 800c8a0:	f024 0403 	bic.w	r4, r4, #3
 800c8a4:	42a0      	cmp	r0, r4
 800c8a6:	d007      	beq.n	800c8b8 <sbrk_aligned+0x38>
 800c8a8:	1a21      	subs	r1, r4, r0
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	f000 fd40 	bl	800d330 <_sbrk_r>
 800c8b0:	3001      	adds	r0, #1
 800c8b2:	d101      	bne.n	800c8b8 <sbrk_aligned+0x38>
 800c8b4:	f04f 34ff 	mov.w	r4, #4294967295
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	bd70      	pop	{r4, r5, r6, pc}
 800c8bc:	240050c8 	.word	0x240050c8

0800c8c0 <_malloc_r>:
 800c8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c4:	1ccd      	adds	r5, r1, #3
 800c8c6:	f025 0503 	bic.w	r5, r5, #3
 800c8ca:	3508      	adds	r5, #8
 800c8cc:	2d0c      	cmp	r5, #12
 800c8ce:	bf38      	it	cc
 800c8d0:	250c      	movcc	r5, #12
 800c8d2:	2d00      	cmp	r5, #0
 800c8d4:	4607      	mov	r7, r0
 800c8d6:	db01      	blt.n	800c8dc <_malloc_r+0x1c>
 800c8d8:	42a9      	cmp	r1, r5
 800c8da:	d905      	bls.n	800c8e8 <_malloc_r+0x28>
 800c8dc:	230c      	movs	r3, #12
 800c8de:	603b      	str	r3, [r7, #0]
 800c8e0:	2600      	movs	r6, #0
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8e8:	4e2e      	ldr	r6, [pc, #184]	; (800c9a4 <_malloc_r+0xe4>)
 800c8ea:	f001 fc93 	bl	800e214 <__malloc_lock>
 800c8ee:	6833      	ldr	r3, [r6, #0]
 800c8f0:	461c      	mov	r4, r3
 800c8f2:	bb34      	cbnz	r4, 800c942 <_malloc_r+0x82>
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	4638      	mov	r0, r7
 800c8f8:	f7ff ffc2 	bl	800c880 <sbrk_aligned>
 800c8fc:	1c43      	adds	r3, r0, #1
 800c8fe:	4604      	mov	r4, r0
 800c900:	d14d      	bne.n	800c99e <_malloc_r+0xde>
 800c902:	6834      	ldr	r4, [r6, #0]
 800c904:	4626      	mov	r6, r4
 800c906:	2e00      	cmp	r6, #0
 800c908:	d140      	bne.n	800c98c <_malloc_r+0xcc>
 800c90a:	6823      	ldr	r3, [r4, #0]
 800c90c:	4631      	mov	r1, r6
 800c90e:	4638      	mov	r0, r7
 800c910:	eb04 0803 	add.w	r8, r4, r3
 800c914:	f000 fd0c 	bl	800d330 <_sbrk_r>
 800c918:	4580      	cmp	r8, r0
 800c91a:	d13a      	bne.n	800c992 <_malloc_r+0xd2>
 800c91c:	6821      	ldr	r1, [r4, #0]
 800c91e:	3503      	adds	r5, #3
 800c920:	1a6d      	subs	r5, r5, r1
 800c922:	f025 0503 	bic.w	r5, r5, #3
 800c926:	3508      	adds	r5, #8
 800c928:	2d0c      	cmp	r5, #12
 800c92a:	bf38      	it	cc
 800c92c:	250c      	movcc	r5, #12
 800c92e:	4629      	mov	r1, r5
 800c930:	4638      	mov	r0, r7
 800c932:	f7ff ffa5 	bl	800c880 <sbrk_aligned>
 800c936:	3001      	adds	r0, #1
 800c938:	d02b      	beq.n	800c992 <_malloc_r+0xd2>
 800c93a:	6823      	ldr	r3, [r4, #0]
 800c93c:	442b      	add	r3, r5
 800c93e:	6023      	str	r3, [r4, #0]
 800c940:	e00e      	b.n	800c960 <_malloc_r+0xa0>
 800c942:	6822      	ldr	r2, [r4, #0]
 800c944:	1b52      	subs	r2, r2, r5
 800c946:	d41e      	bmi.n	800c986 <_malloc_r+0xc6>
 800c948:	2a0b      	cmp	r2, #11
 800c94a:	d916      	bls.n	800c97a <_malloc_r+0xba>
 800c94c:	1961      	adds	r1, r4, r5
 800c94e:	42a3      	cmp	r3, r4
 800c950:	6025      	str	r5, [r4, #0]
 800c952:	bf18      	it	ne
 800c954:	6059      	strne	r1, [r3, #4]
 800c956:	6863      	ldr	r3, [r4, #4]
 800c958:	bf08      	it	eq
 800c95a:	6031      	streq	r1, [r6, #0]
 800c95c:	5162      	str	r2, [r4, r5]
 800c95e:	604b      	str	r3, [r1, #4]
 800c960:	4638      	mov	r0, r7
 800c962:	f104 060b 	add.w	r6, r4, #11
 800c966:	f001 fc5b 	bl	800e220 <__malloc_unlock>
 800c96a:	f026 0607 	bic.w	r6, r6, #7
 800c96e:	1d23      	adds	r3, r4, #4
 800c970:	1af2      	subs	r2, r6, r3
 800c972:	d0b6      	beq.n	800c8e2 <_malloc_r+0x22>
 800c974:	1b9b      	subs	r3, r3, r6
 800c976:	50a3      	str	r3, [r4, r2]
 800c978:	e7b3      	b.n	800c8e2 <_malloc_r+0x22>
 800c97a:	6862      	ldr	r2, [r4, #4]
 800c97c:	42a3      	cmp	r3, r4
 800c97e:	bf0c      	ite	eq
 800c980:	6032      	streq	r2, [r6, #0]
 800c982:	605a      	strne	r2, [r3, #4]
 800c984:	e7ec      	b.n	800c960 <_malloc_r+0xa0>
 800c986:	4623      	mov	r3, r4
 800c988:	6864      	ldr	r4, [r4, #4]
 800c98a:	e7b2      	b.n	800c8f2 <_malloc_r+0x32>
 800c98c:	4634      	mov	r4, r6
 800c98e:	6876      	ldr	r6, [r6, #4]
 800c990:	e7b9      	b.n	800c906 <_malloc_r+0x46>
 800c992:	230c      	movs	r3, #12
 800c994:	603b      	str	r3, [r7, #0]
 800c996:	4638      	mov	r0, r7
 800c998:	f001 fc42 	bl	800e220 <__malloc_unlock>
 800c99c:	e7a1      	b.n	800c8e2 <_malloc_r+0x22>
 800c99e:	6025      	str	r5, [r4, #0]
 800c9a0:	e7de      	b.n	800c960 <_malloc_r+0xa0>
 800c9a2:	bf00      	nop
 800c9a4:	240050c4 	.word	0x240050c4

0800c9a8 <__cvt>:
 800c9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9aa:	ed2d 8b02 	vpush	{d8}
 800c9ae:	eeb0 8b40 	vmov.f64	d8, d0
 800c9b2:	b085      	sub	sp, #20
 800c9b4:	4617      	mov	r7, r2
 800c9b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c9b8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c9ba:	ee18 2a90 	vmov	r2, s17
 800c9be:	f025 0520 	bic.w	r5, r5, #32
 800c9c2:	2a00      	cmp	r2, #0
 800c9c4:	bfb6      	itet	lt
 800c9c6:	222d      	movlt	r2, #45	; 0x2d
 800c9c8:	2200      	movge	r2, #0
 800c9ca:	eeb1 8b40 	vneglt.f64	d8, d0
 800c9ce:	2d46      	cmp	r5, #70	; 0x46
 800c9d0:	460c      	mov	r4, r1
 800c9d2:	701a      	strb	r2, [r3, #0]
 800c9d4:	d004      	beq.n	800c9e0 <__cvt+0x38>
 800c9d6:	2d45      	cmp	r5, #69	; 0x45
 800c9d8:	d100      	bne.n	800c9dc <__cvt+0x34>
 800c9da:	3401      	adds	r4, #1
 800c9dc:	2102      	movs	r1, #2
 800c9de:	e000      	b.n	800c9e2 <__cvt+0x3a>
 800c9e0:	2103      	movs	r1, #3
 800c9e2:	ab03      	add	r3, sp, #12
 800c9e4:	9301      	str	r3, [sp, #4]
 800c9e6:	ab02      	add	r3, sp, #8
 800c9e8:	9300      	str	r3, [sp, #0]
 800c9ea:	4622      	mov	r2, r4
 800c9ec:	4633      	mov	r3, r6
 800c9ee:	eeb0 0b48 	vmov.f64	d0, d8
 800c9f2:	f000 fdc1 	bl	800d578 <_dtoa_r>
 800c9f6:	2d47      	cmp	r5, #71	; 0x47
 800c9f8:	d101      	bne.n	800c9fe <__cvt+0x56>
 800c9fa:	07fb      	lsls	r3, r7, #31
 800c9fc:	d51a      	bpl.n	800ca34 <__cvt+0x8c>
 800c9fe:	2d46      	cmp	r5, #70	; 0x46
 800ca00:	eb00 0204 	add.w	r2, r0, r4
 800ca04:	d10c      	bne.n	800ca20 <__cvt+0x78>
 800ca06:	7803      	ldrb	r3, [r0, #0]
 800ca08:	2b30      	cmp	r3, #48	; 0x30
 800ca0a:	d107      	bne.n	800ca1c <__cvt+0x74>
 800ca0c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ca10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca14:	bf1c      	itt	ne
 800ca16:	f1c4 0401 	rsbne	r4, r4, #1
 800ca1a:	6034      	strne	r4, [r6, #0]
 800ca1c:	6833      	ldr	r3, [r6, #0]
 800ca1e:	441a      	add	r2, r3
 800ca20:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ca24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca28:	bf08      	it	eq
 800ca2a:	9203      	streq	r2, [sp, #12]
 800ca2c:	2130      	movs	r1, #48	; 0x30
 800ca2e:	9b03      	ldr	r3, [sp, #12]
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d307      	bcc.n	800ca44 <__cvt+0x9c>
 800ca34:	9b03      	ldr	r3, [sp, #12]
 800ca36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca38:	1a1b      	subs	r3, r3, r0
 800ca3a:	6013      	str	r3, [r2, #0]
 800ca3c:	b005      	add	sp, #20
 800ca3e:	ecbd 8b02 	vpop	{d8}
 800ca42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca44:	1c5c      	adds	r4, r3, #1
 800ca46:	9403      	str	r4, [sp, #12]
 800ca48:	7019      	strb	r1, [r3, #0]
 800ca4a:	e7f0      	b.n	800ca2e <__cvt+0x86>

0800ca4c <__exponent>:
 800ca4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca4e:	4603      	mov	r3, r0
 800ca50:	2900      	cmp	r1, #0
 800ca52:	bfb8      	it	lt
 800ca54:	4249      	neglt	r1, r1
 800ca56:	f803 2b02 	strb.w	r2, [r3], #2
 800ca5a:	bfb4      	ite	lt
 800ca5c:	222d      	movlt	r2, #45	; 0x2d
 800ca5e:	222b      	movge	r2, #43	; 0x2b
 800ca60:	2909      	cmp	r1, #9
 800ca62:	7042      	strb	r2, [r0, #1]
 800ca64:	dd2a      	ble.n	800cabc <__exponent+0x70>
 800ca66:	f10d 0407 	add.w	r4, sp, #7
 800ca6a:	46a4      	mov	ip, r4
 800ca6c:	270a      	movs	r7, #10
 800ca6e:	46a6      	mov	lr, r4
 800ca70:	460a      	mov	r2, r1
 800ca72:	fb91 f6f7 	sdiv	r6, r1, r7
 800ca76:	fb07 1516 	mls	r5, r7, r6, r1
 800ca7a:	3530      	adds	r5, #48	; 0x30
 800ca7c:	2a63      	cmp	r2, #99	; 0x63
 800ca7e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ca82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ca86:	4631      	mov	r1, r6
 800ca88:	dcf1      	bgt.n	800ca6e <__exponent+0x22>
 800ca8a:	3130      	adds	r1, #48	; 0x30
 800ca8c:	f1ae 0502 	sub.w	r5, lr, #2
 800ca90:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ca94:	1c44      	adds	r4, r0, #1
 800ca96:	4629      	mov	r1, r5
 800ca98:	4561      	cmp	r1, ip
 800ca9a:	d30a      	bcc.n	800cab2 <__exponent+0x66>
 800ca9c:	f10d 0209 	add.w	r2, sp, #9
 800caa0:	eba2 020e 	sub.w	r2, r2, lr
 800caa4:	4565      	cmp	r5, ip
 800caa6:	bf88      	it	hi
 800caa8:	2200      	movhi	r2, #0
 800caaa:	4413      	add	r3, r2
 800caac:	1a18      	subs	r0, r3, r0
 800caae:	b003      	add	sp, #12
 800cab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cab6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800caba:	e7ed      	b.n	800ca98 <__exponent+0x4c>
 800cabc:	2330      	movs	r3, #48	; 0x30
 800cabe:	3130      	adds	r1, #48	; 0x30
 800cac0:	7083      	strb	r3, [r0, #2]
 800cac2:	70c1      	strb	r1, [r0, #3]
 800cac4:	1d03      	adds	r3, r0, #4
 800cac6:	e7f1      	b.n	800caac <__exponent+0x60>

0800cac8 <_printf_float>:
 800cac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cacc:	b08b      	sub	sp, #44	; 0x2c
 800cace:	460c      	mov	r4, r1
 800cad0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800cad4:	4616      	mov	r6, r2
 800cad6:	461f      	mov	r7, r3
 800cad8:	4605      	mov	r5, r0
 800cada:	f001 fb7d 	bl	800e1d8 <_localeconv_r>
 800cade:	f8d0 b000 	ldr.w	fp, [r0]
 800cae2:	4658      	mov	r0, fp
 800cae4:	f7f3 fbfc 	bl	80002e0 <strlen>
 800cae8:	2300      	movs	r3, #0
 800caea:	9308      	str	r3, [sp, #32]
 800caec:	f8d8 3000 	ldr.w	r3, [r8]
 800caf0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800caf4:	6822      	ldr	r2, [r4, #0]
 800caf6:	3307      	adds	r3, #7
 800caf8:	f023 0307 	bic.w	r3, r3, #7
 800cafc:	f103 0108 	add.w	r1, r3, #8
 800cb00:	f8c8 1000 	str.w	r1, [r8]
 800cb04:	4682      	mov	sl, r0
 800cb06:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cb0a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800cb0e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800cd70 <_printf_float+0x2a8>
 800cb12:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800cb16:	eeb0 6bc0 	vabs.f64	d6, d0
 800cb1a:	eeb4 6b47 	vcmp.f64	d6, d7
 800cb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb22:	dd24      	ble.n	800cb6e <_printf_float+0xa6>
 800cb24:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cb28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb2c:	d502      	bpl.n	800cb34 <_printf_float+0x6c>
 800cb2e:	232d      	movs	r3, #45	; 0x2d
 800cb30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb34:	4b90      	ldr	r3, [pc, #576]	; (800cd78 <_printf_float+0x2b0>)
 800cb36:	4891      	ldr	r0, [pc, #580]	; (800cd7c <_printf_float+0x2b4>)
 800cb38:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cb3c:	bf94      	ite	ls
 800cb3e:	4698      	movls	r8, r3
 800cb40:	4680      	movhi	r8, r0
 800cb42:	2303      	movs	r3, #3
 800cb44:	6123      	str	r3, [r4, #16]
 800cb46:	f022 0204 	bic.w	r2, r2, #4
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	6022      	str	r2, [r4, #0]
 800cb4e:	9304      	str	r3, [sp, #16]
 800cb50:	9700      	str	r7, [sp, #0]
 800cb52:	4633      	mov	r3, r6
 800cb54:	aa09      	add	r2, sp, #36	; 0x24
 800cb56:	4621      	mov	r1, r4
 800cb58:	4628      	mov	r0, r5
 800cb5a:	f000 f9d3 	bl	800cf04 <_printf_common>
 800cb5e:	3001      	adds	r0, #1
 800cb60:	f040 808a 	bne.w	800cc78 <_printf_float+0x1b0>
 800cb64:	f04f 30ff 	mov.w	r0, #4294967295
 800cb68:	b00b      	add	sp, #44	; 0x2c
 800cb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb6e:	eeb4 0b40 	vcmp.f64	d0, d0
 800cb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb76:	d709      	bvc.n	800cb8c <_printf_float+0xc4>
 800cb78:	ee10 3a90 	vmov	r3, s1
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	bfbc      	itt	lt
 800cb80:	232d      	movlt	r3, #45	; 0x2d
 800cb82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cb86:	487e      	ldr	r0, [pc, #504]	; (800cd80 <_printf_float+0x2b8>)
 800cb88:	4b7e      	ldr	r3, [pc, #504]	; (800cd84 <_printf_float+0x2bc>)
 800cb8a:	e7d5      	b.n	800cb38 <_printf_float+0x70>
 800cb8c:	6863      	ldr	r3, [r4, #4]
 800cb8e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800cb92:	9104      	str	r1, [sp, #16]
 800cb94:	1c59      	adds	r1, r3, #1
 800cb96:	d13c      	bne.n	800cc12 <_printf_float+0x14a>
 800cb98:	2306      	movs	r3, #6
 800cb9a:	6063      	str	r3, [r4, #4]
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	9303      	str	r3, [sp, #12]
 800cba0:	ab08      	add	r3, sp, #32
 800cba2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800cba6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cbaa:	ab07      	add	r3, sp, #28
 800cbac:	6861      	ldr	r1, [r4, #4]
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	6022      	str	r2, [r4, #0]
 800cbb2:	f10d 031b 	add.w	r3, sp, #27
 800cbb6:	4628      	mov	r0, r5
 800cbb8:	f7ff fef6 	bl	800c9a8 <__cvt>
 800cbbc:	9b04      	ldr	r3, [sp, #16]
 800cbbe:	9907      	ldr	r1, [sp, #28]
 800cbc0:	2b47      	cmp	r3, #71	; 0x47
 800cbc2:	4680      	mov	r8, r0
 800cbc4:	d108      	bne.n	800cbd8 <_printf_float+0x110>
 800cbc6:	1cc8      	adds	r0, r1, #3
 800cbc8:	db02      	blt.n	800cbd0 <_printf_float+0x108>
 800cbca:	6863      	ldr	r3, [r4, #4]
 800cbcc:	4299      	cmp	r1, r3
 800cbce:	dd41      	ble.n	800cc54 <_printf_float+0x18c>
 800cbd0:	f1a9 0902 	sub.w	r9, r9, #2
 800cbd4:	fa5f f989 	uxtb.w	r9, r9
 800cbd8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cbdc:	d820      	bhi.n	800cc20 <_printf_float+0x158>
 800cbde:	3901      	subs	r1, #1
 800cbe0:	464a      	mov	r2, r9
 800cbe2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cbe6:	9107      	str	r1, [sp, #28]
 800cbe8:	f7ff ff30 	bl	800ca4c <__exponent>
 800cbec:	9a08      	ldr	r2, [sp, #32]
 800cbee:	9004      	str	r0, [sp, #16]
 800cbf0:	1813      	adds	r3, r2, r0
 800cbf2:	2a01      	cmp	r2, #1
 800cbf4:	6123      	str	r3, [r4, #16]
 800cbf6:	dc02      	bgt.n	800cbfe <_printf_float+0x136>
 800cbf8:	6822      	ldr	r2, [r4, #0]
 800cbfa:	07d2      	lsls	r2, r2, #31
 800cbfc:	d501      	bpl.n	800cc02 <_printf_float+0x13a>
 800cbfe:	3301      	adds	r3, #1
 800cc00:	6123      	str	r3, [r4, #16]
 800cc02:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d0a2      	beq.n	800cb50 <_printf_float+0x88>
 800cc0a:	232d      	movs	r3, #45	; 0x2d
 800cc0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc10:	e79e      	b.n	800cb50 <_printf_float+0x88>
 800cc12:	9904      	ldr	r1, [sp, #16]
 800cc14:	2947      	cmp	r1, #71	; 0x47
 800cc16:	d1c1      	bne.n	800cb9c <_printf_float+0xd4>
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d1bf      	bne.n	800cb9c <_printf_float+0xd4>
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	e7bc      	b.n	800cb9a <_printf_float+0xd2>
 800cc20:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cc24:	d118      	bne.n	800cc58 <_printf_float+0x190>
 800cc26:	2900      	cmp	r1, #0
 800cc28:	6863      	ldr	r3, [r4, #4]
 800cc2a:	dd0b      	ble.n	800cc44 <_printf_float+0x17c>
 800cc2c:	6121      	str	r1, [r4, #16]
 800cc2e:	b913      	cbnz	r3, 800cc36 <_printf_float+0x16e>
 800cc30:	6822      	ldr	r2, [r4, #0]
 800cc32:	07d0      	lsls	r0, r2, #31
 800cc34:	d502      	bpl.n	800cc3c <_printf_float+0x174>
 800cc36:	3301      	adds	r3, #1
 800cc38:	440b      	add	r3, r1
 800cc3a:	6123      	str	r3, [r4, #16]
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	65a1      	str	r1, [r4, #88]	; 0x58
 800cc40:	9304      	str	r3, [sp, #16]
 800cc42:	e7de      	b.n	800cc02 <_printf_float+0x13a>
 800cc44:	b913      	cbnz	r3, 800cc4c <_printf_float+0x184>
 800cc46:	6822      	ldr	r2, [r4, #0]
 800cc48:	07d2      	lsls	r2, r2, #31
 800cc4a:	d501      	bpl.n	800cc50 <_printf_float+0x188>
 800cc4c:	3302      	adds	r3, #2
 800cc4e:	e7f4      	b.n	800cc3a <_printf_float+0x172>
 800cc50:	2301      	movs	r3, #1
 800cc52:	e7f2      	b.n	800cc3a <_printf_float+0x172>
 800cc54:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cc58:	9b08      	ldr	r3, [sp, #32]
 800cc5a:	4299      	cmp	r1, r3
 800cc5c:	db05      	blt.n	800cc6a <_printf_float+0x1a2>
 800cc5e:	6823      	ldr	r3, [r4, #0]
 800cc60:	6121      	str	r1, [r4, #16]
 800cc62:	07d8      	lsls	r0, r3, #31
 800cc64:	d5ea      	bpl.n	800cc3c <_printf_float+0x174>
 800cc66:	1c4b      	adds	r3, r1, #1
 800cc68:	e7e7      	b.n	800cc3a <_printf_float+0x172>
 800cc6a:	2900      	cmp	r1, #0
 800cc6c:	bfd4      	ite	le
 800cc6e:	f1c1 0202 	rsble	r2, r1, #2
 800cc72:	2201      	movgt	r2, #1
 800cc74:	4413      	add	r3, r2
 800cc76:	e7e0      	b.n	800cc3a <_printf_float+0x172>
 800cc78:	6823      	ldr	r3, [r4, #0]
 800cc7a:	055a      	lsls	r2, r3, #21
 800cc7c:	d407      	bmi.n	800cc8e <_printf_float+0x1c6>
 800cc7e:	6923      	ldr	r3, [r4, #16]
 800cc80:	4642      	mov	r2, r8
 800cc82:	4631      	mov	r1, r6
 800cc84:	4628      	mov	r0, r5
 800cc86:	47b8      	blx	r7
 800cc88:	3001      	adds	r0, #1
 800cc8a:	d12a      	bne.n	800cce2 <_printf_float+0x21a>
 800cc8c:	e76a      	b.n	800cb64 <_printf_float+0x9c>
 800cc8e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cc92:	f240 80e2 	bls.w	800ce5a <_printf_float+0x392>
 800cc96:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cc9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cca2:	d133      	bne.n	800cd0c <_printf_float+0x244>
 800cca4:	4a38      	ldr	r2, [pc, #224]	; (800cd88 <_printf_float+0x2c0>)
 800cca6:	2301      	movs	r3, #1
 800cca8:	4631      	mov	r1, r6
 800ccaa:	4628      	mov	r0, r5
 800ccac:	47b8      	blx	r7
 800ccae:	3001      	adds	r0, #1
 800ccb0:	f43f af58 	beq.w	800cb64 <_printf_float+0x9c>
 800ccb4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	db02      	blt.n	800ccc2 <_printf_float+0x1fa>
 800ccbc:	6823      	ldr	r3, [r4, #0]
 800ccbe:	07d8      	lsls	r0, r3, #31
 800ccc0:	d50f      	bpl.n	800cce2 <_printf_float+0x21a>
 800ccc2:	4653      	mov	r3, sl
 800ccc4:	465a      	mov	r2, fp
 800ccc6:	4631      	mov	r1, r6
 800ccc8:	4628      	mov	r0, r5
 800ccca:	47b8      	blx	r7
 800cccc:	3001      	adds	r0, #1
 800ccce:	f43f af49 	beq.w	800cb64 <_printf_float+0x9c>
 800ccd2:	f04f 0800 	mov.w	r8, #0
 800ccd6:	f104 091a 	add.w	r9, r4, #26
 800ccda:	9b08      	ldr	r3, [sp, #32]
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	4543      	cmp	r3, r8
 800cce0:	dc09      	bgt.n	800ccf6 <_printf_float+0x22e>
 800cce2:	6823      	ldr	r3, [r4, #0]
 800cce4:	079b      	lsls	r3, r3, #30
 800cce6:	f100 8108 	bmi.w	800cefa <_printf_float+0x432>
 800ccea:	68e0      	ldr	r0, [r4, #12]
 800ccec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccee:	4298      	cmp	r0, r3
 800ccf0:	bfb8      	it	lt
 800ccf2:	4618      	movlt	r0, r3
 800ccf4:	e738      	b.n	800cb68 <_printf_float+0xa0>
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	464a      	mov	r2, r9
 800ccfa:	4631      	mov	r1, r6
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	47b8      	blx	r7
 800cd00:	3001      	adds	r0, #1
 800cd02:	f43f af2f 	beq.w	800cb64 <_printf_float+0x9c>
 800cd06:	f108 0801 	add.w	r8, r8, #1
 800cd0a:	e7e6      	b.n	800ccda <_printf_float+0x212>
 800cd0c:	9b07      	ldr	r3, [sp, #28]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	dc3c      	bgt.n	800cd8c <_printf_float+0x2c4>
 800cd12:	4a1d      	ldr	r2, [pc, #116]	; (800cd88 <_printf_float+0x2c0>)
 800cd14:	2301      	movs	r3, #1
 800cd16:	4631      	mov	r1, r6
 800cd18:	4628      	mov	r0, r5
 800cd1a:	47b8      	blx	r7
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	f43f af21 	beq.w	800cb64 <_printf_float+0x9c>
 800cd22:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cd26:	4313      	orrs	r3, r2
 800cd28:	d102      	bne.n	800cd30 <_printf_float+0x268>
 800cd2a:	6823      	ldr	r3, [r4, #0]
 800cd2c:	07d9      	lsls	r1, r3, #31
 800cd2e:	d5d8      	bpl.n	800cce2 <_printf_float+0x21a>
 800cd30:	4653      	mov	r3, sl
 800cd32:	465a      	mov	r2, fp
 800cd34:	4631      	mov	r1, r6
 800cd36:	4628      	mov	r0, r5
 800cd38:	47b8      	blx	r7
 800cd3a:	3001      	adds	r0, #1
 800cd3c:	f43f af12 	beq.w	800cb64 <_printf_float+0x9c>
 800cd40:	f04f 0900 	mov.w	r9, #0
 800cd44:	f104 0a1a 	add.w	sl, r4, #26
 800cd48:	9b07      	ldr	r3, [sp, #28]
 800cd4a:	425b      	negs	r3, r3
 800cd4c:	454b      	cmp	r3, r9
 800cd4e:	dc01      	bgt.n	800cd54 <_printf_float+0x28c>
 800cd50:	9b08      	ldr	r3, [sp, #32]
 800cd52:	e795      	b.n	800cc80 <_printf_float+0x1b8>
 800cd54:	2301      	movs	r3, #1
 800cd56:	4652      	mov	r2, sl
 800cd58:	4631      	mov	r1, r6
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	47b8      	blx	r7
 800cd5e:	3001      	adds	r0, #1
 800cd60:	f43f af00 	beq.w	800cb64 <_printf_float+0x9c>
 800cd64:	f109 0901 	add.w	r9, r9, #1
 800cd68:	e7ee      	b.n	800cd48 <_printf_float+0x280>
 800cd6a:	bf00      	nop
 800cd6c:	f3af 8000 	nop.w
 800cd70:	ffffffff 	.word	0xffffffff
 800cd74:	7fefffff 	.word	0x7fefffff
 800cd78:	080101dc 	.word	0x080101dc
 800cd7c:	080101e0 	.word	0x080101e0
 800cd80:	080101e8 	.word	0x080101e8
 800cd84:	080101e4 	.word	0x080101e4
 800cd88:	080101ec 	.word	0x080101ec
 800cd8c:	9a08      	ldr	r2, [sp, #32]
 800cd8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd90:	429a      	cmp	r2, r3
 800cd92:	bfa8      	it	ge
 800cd94:	461a      	movge	r2, r3
 800cd96:	2a00      	cmp	r2, #0
 800cd98:	4691      	mov	r9, r2
 800cd9a:	dc38      	bgt.n	800ce0e <_printf_float+0x346>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	9305      	str	r3, [sp, #20]
 800cda0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cda4:	f104 021a 	add.w	r2, r4, #26
 800cda8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cdaa:	9905      	ldr	r1, [sp, #20]
 800cdac:	9304      	str	r3, [sp, #16]
 800cdae:	eba3 0309 	sub.w	r3, r3, r9
 800cdb2:	428b      	cmp	r3, r1
 800cdb4:	dc33      	bgt.n	800ce1e <_printf_float+0x356>
 800cdb6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	db3c      	blt.n	800ce38 <_printf_float+0x370>
 800cdbe:	6823      	ldr	r3, [r4, #0]
 800cdc0:	07da      	lsls	r2, r3, #31
 800cdc2:	d439      	bmi.n	800ce38 <_printf_float+0x370>
 800cdc4:	9b08      	ldr	r3, [sp, #32]
 800cdc6:	9a04      	ldr	r2, [sp, #16]
 800cdc8:	9907      	ldr	r1, [sp, #28]
 800cdca:	1a9a      	subs	r2, r3, r2
 800cdcc:	eba3 0901 	sub.w	r9, r3, r1
 800cdd0:	4591      	cmp	r9, r2
 800cdd2:	bfa8      	it	ge
 800cdd4:	4691      	movge	r9, r2
 800cdd6:	f1b9 0f00 	cmp.w	r9, #0
 800cdda:	dc35      	bgt.n	800ce48 <_printf_float+0x380>
 800cddc:	f04f 0800 	mov.w	r8, #0
 800cde0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cde4:	f104 0a1a 	add.w	sl, r4, #26
 800cde8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cdec:	1a9b      	subs	r3, r3, r2
 800cdee:	eba3 0309 	sub.w	r3, r3, r9
 800cdf2:	4543      	cmp	r3, r8
 800cdf4:	f77f af75 	ble.w	800cce2 <_printf_float+0x21a>
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	4652      	mov	r2, sl
 800cdfc:	4631      	mov	r1, r6
 800cdfe:	4628      	mov	r0, r5
 800ce00:	47b8      	blx	r7
 800ce02:	3001      	adds	r0, #1
 800ce04:	f43f aeae 	beq.w	800cb64 <_printf_float+0x9c>
 800ce08:	f108 0801 	add.w	r8, r8, #1
 800ce0c:	e7ec      	b.n	800cde8 <_printf_float+0x320>
 800ce0e:	4613      	mov	r3, r2
 800ce10:	4631      	mov	r1, r6
 800ce12:	4642      	mov	r2, r8
 800ce14:	4628      	mov	r0, r5
 800ce16:	47b8      	blx	r7
 800ce18:	3001      	adds	r0, #1
 800ce1a:	d1bf      	bne.n	800cd9c <_printf_float+0x2d4>
 800ce1c:	e6a2      	b.n	800cb64 <_printf_float+0x9c>
 800ce1e:	2301      	movs	r3, #1
 800ce20:	4631      	mov	r1, r6
 800ce22:	4628      	mov	r0, r5
 800ce24:	9204      	str	r2, [sp, #16]
 800ce26:	47b8      	blx	r7
 800ce28:	3001      	adds	r0, #1
 800ce2a:	f43f ae9b 	beq.w	800cb64 <_printf_float+0x9c>
 800ce2e:	9b05      	ldr	r3, [sp, #20]
 800ce30:	9a04      	ldr	r2, [sp, #16]
 800ce32:	3301      	adds	r3, #1
 800ce34:	9305      	str	r3, [sp, #20]
 800ce36:	e7b7      	b.n	800cda8 <_printf_float+0x2e0>
 800ce38:	4653      	mov	r3, sl
 800ce3a:	465a      	mov	r2, fp
 800ce3c:	4631      	mov	r1, r6
 800ce3e:	4628      	mov	r0, r5
 800ce40:	47b8      	blx	r7
 800ce42:	3001      	adds	r0, #1
 800ce44:	d1be      	bne.n	800cdc4 <_printf_float+0x2fc>
 800ce46:	e68d      	b.n	800cb64 <_printf_float+0x9c>
 800ce48:	9a04      	ldr	r2, [sp, #16]
 800ce4a:	464b      	mov	r3, r9
 800ce4c:	4442      	add	r2, r8
 800ce4e:	4631      	mov	r1, r6
 800ce50:	4628      	mov	r0, r5
 800ce52:	47b8      	blx	r7
 800ce54:	3001      	adds	r0, #1
 800ce56:	d1c1      	bne.n	800cddc <_printf_float+0x314>
 800ce58:	e684      	b.n	800cb64 <_printf_float+0x9c>
 800ce5a:	9a08      	ldr	r2, [sp, #32]
 800ce5c:	2a01      	cmp	r2, #1
 800ce5e:	dc01      	bgt.n	800ce64 <_printf_float+0x39c>
 800ce60:	07db      	lsls	r3, r3, #31
 800ce62:	d537      	bpl.n	800ced4 <_printf_float+0x40c>
 800ce64:	2301      	movs	r3, #1
 800ce66:	4642      	mov	r2, r8
 800ce68:	4631      	mov	r1, r6
 800ce6a:	4628      	mov	r0, r5
 800ce6c:	47b8      	blx	r7
 800ce6e:	3001      	adds	r0, #1
 800ce70:	f43f ae78 	beq.w	800cb64 <_printf_float+0x9c>
 800ce74:	4653      	mov	r3, sl
 800ce76:	465a      	mov	r2, fp
 800ce78:	4631      	mov	r1, r6
 800ce7a:	4628      	mov	r0, r5
 800ce7c:	47b8      	blx	r7
 800ce7e:	3001      	adds	r0, #1
 800ce80:	f43f ae70 	beq.w	800cb64 <_printf_float+0x9c>
 800ce84:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ce88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ce8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce90:	d01b      	beq.n	800ceca <_printf_float+0x402>
 800ce92:	9b08      	ldr	r3, [sp, #32]
 800ce94:	f108 0201 	add.w	r2, r8, #1
 800ce98:	3b01      	subs	r3, #1
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	47b8      	blx	r7
 800cea0:	3001      	adds	r0, #1
 800cea2:	d10e      	bne.n	800cec2 <_printf_float+0x3fa>
 800cea4:	e65e      	b.n	800cb64 <_printf_float+0x9c>
 800cea6:	2301      	movs	r3, #1
 800cea8:	464a      	mov	r2, r9
 800ceaa:	4631      	mov	r1, r6
 800ceac:	4628      	mov	r0, r5
 800ceae:	47b8      	blx	r7
 800ceb0:	3001      	adds	r0, #1
 800ceb2:	f43f ae57 	beq.w	800cb64 <_printf_float+0x9c>
 800ceb6:	f108 0801 	add.w	r8, r8, #1
 800ceba:	9b08      	ldr	r3, [sp, #32]
 800cebc:	3b01      	subs	r3, #1
 800cebe:	4543      	cmp	r3, r8
 800cec0:	dcf1      	bgt.n	800cea6 <_printf_float+0x3de>
 800cec2:	9b04      	ldr	r3, [sp, #16]
 800cec4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cec8:	e6db      	b.n	800cc82 <_printf_float+0x1ba>
 800ceca:	f04f 0800 	mov.w	r8, #0
 800cece:	f104 091a 	add.w	r9, r4, #26
 800ced2:	e7f2      	b.n	800ceba <_printf_float+0x3f2>
 800ced4:	2301      	movs	r3, #1
 800ced6:	4642      	mov	r2, r8
 800ced8:	e7df      	b.n	800ce9a <_printf_float+0x3d2>
 800ceda:	2301      	movs	r3, #1
 800cedc:	464a      	mov	r2, r9
 800cede:	4631      	mov	r1, r6
 800cee0:	4628      	mov	r0, r5
 800cee2:	47b8      	blx	r7
 800cee4:	3001      	adds	r0, #1
 800cee6:	f43f ae3d 	beq.w	800cb64 <_printf_float+0x9c>
 800ceea:	f108 0801 	add.w	r8, r8, #1
 800ceee:	68e3      	ldr	r3, [r4, #12]
 800cef0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cef2:	1a5b      	subs	r3, r3, r1
 800cef4:	4543      	cmp	r3, r8
 800cef6:	dcf0      	bgt.n	800ceda <_printf_float+0x412>
 800cef8:	e6f7      	b.n	800ccea <_printf_float+0x222>
 800cefa:	f04f 0800 	mov.w	r8, #0
 800cefe:	f104 0919 	add.w	r9, r4, #25
 800cf02:	e7f4      	b.n	800ceee <_printf_float+0x426>

0800cf04 <_printf_common>:
 800cf04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf08:	4616      	mov	r6, r2
 800cf0a:	4699      	mov	r9, r3
 800cf0c:	688a      	ldr	r2, [r1, #8]
 800cf0e:	690b      	ldr	r3, [r1, #16]
 800cf10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf14:	4293      	cmp	r3, r2
 800cf16:	bfb8      	it	lt
 800cf18:	4613      	movlt	r3, r2
 800cf1a:	6033      	str	r3, [r6, #0]
 800cf1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf20:	4607      	mov	r7, r0
 800cf22:	460c      	mov	r4, r1
 800cf24:	b10a      	cbz	r2, 800cf2a <_printf_common+0x26>
 800cf26:	3301      	adds	r3, #1
 800cf28:	6033      	str	r3, [r6, #0]
 800cf2a:	6823      	ldr	r3, [r4, #0]
 800cf2c:	0699      	lsls	r1, r3, #26
 800cf2e:	bf42      	ittt	mi
 800cf30:	6833      	ldrmi	r3, [r6, #0]
 800cf32:	3302      	addmi	r3, #2
 800cf34:	6033      	strmi	r3, [r6, #0]
 800cf36:	6825      	ldr	r5, [r4, #0]
 800cf38:	f015 0506 	ands.w	r5, r5, #6
 800cf3c:	d106      	bne.n	800cf4c <_printf_common+0x48>
 800cf3e:	f104 0a19 	add.w	sl, r4, #25
 800cf42:	68e3      	ldr	r3, [r4, #12]
 800cf44:	6832      	ldr	r2, [r6, #0]
 800cf46:	1a9b      	subs	r3, r3, r2
 800cf48:	42ab      	cmp	r3, r5
 800cf4a:	dc26      	bgt.n	800cf9a <_printf_common+0x96>
 800cf4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf50:	1e13      	subs	r3, r2, #0
 800cf52:	6822      	ldr	r2, [r4, #0]
 800cf54:	bf18      	it	ne
 800cf56:	2301      	movne	r3, #1
 800cf58:	0692      	lsls	r2, r2, #26
 800cf5a:	d42b      	bmi.n	800cfb4 <_printf_common+0xb0>
 800cf5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf60:	4649      	mov	r1, r9
 800cf62:	4638      	mov	r0, r7
 800cf64:	47c0      	blx	r8
 800cf66:	3001      	adds	r0, #1
 800cf68:	d01e      	beq.n	800cfa8 <_printf_common+0xa4>
 800cf6a:	6823      	ldr	r3, [r4, #0]
 800cf6c:	68e5      	ldr	r5, [r4, #12]
 800cf6e:	6832      	ldr	r2, [r6, #0]
 800cf70:	f003 0306 	and.w	r3, r3, #6
 800cf74:	2b04      	cmp	r3, #4
 800cf76:	bf08      	it	eq
 800cf78:	1aad      	subeq	r5, r5, r2
 800cf7a:	68a3      	ldr	r3, [r4, #8]
 800cf7c:	6922      	ldr	r2, [r4, #16]
 800cf7e:	bf0c      	ite	eq
 800cf80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf84:	2500      	movne	r5, #0
 800cf86:	4293      	cmp	r3, r2
 800cf88:	bfc4      	itt	gt
 800cf8a:	1a9b      	subgt	r3, r3, r2
 800cf8c:	18ed      	addgt	r5, r5, r3
 800cf8e:	2600      	movs	r6, #0
 800cf90:	341a      	adds	r4, #26
 800cf92:	42b5      	cmp	r5, r6
 800cf94:	d11a      	bne.n	800cfcc <_printf_common+0xc8>
 800cf96:	2000      	movs	r0, #0
 800cf98:	e008      	b.n	800cfac <_printf_common+0xa8>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	4652      	mov	r2, sl
 800cf9e:	4649      	mov	r1, r9
 800cfa0:	4638      	mov	r0, r7
 800cfa2:	47c0      	blx	r8
 800cfa4:	3001      	adds	r0, #1
 800cfa6:	d103      	bne.n	800cfb0 <_printf_common+0xac>
 800cfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfb0:	3501      	adds	r5, #1
 800cfb2:	e7c6      	b.n	800cf42 <_printf_common+0x3e>
 800cfb4:	18e1      	adds	r1, r4, r3
 800cfb6:	1c5a      	adds	r2, r3, #1
 800cfb8:	2030      	movs	r0, #48	; 0x30
 800cfba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cfbe:	4422      	add	r2, r4
 800cfc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cfc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cfc8:	3302      	adds	r3, #2
 800cfca:	e7c7      	b.n	800cf5c <_printf_common+0x58>
 800cfcc:	2301      	movs	r3, #1
 800cfce:	4622      	mov	r2, r4
 800cfd0:	4649      	mov	r1, r9
 800cfd2:	4638      	mov	r0, r7
 800cfd4:	47c0      	blx	r8
 800cfd6:	3001      	adds	r0, #1
 800cfd8:	d0e6      	beq.n	800cfa8 <_printf_common+0xa4>
 800cfda:	3601      	adds	r6, #1
 800cfdc:	e7d9      	b.n	800cf92 <_printf_common+0x8e>
	...

0800cfe0 <_printf_i>:
 800cfe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfe4:	7e0f      	ldrb	r7, [r1, #24]
 800cfe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cfe8:	2f78      	cmp	r7, #120	; 0x78
 800cfea:	4691      	mov	r9, r2
 800cfec:	4680      	mov	r8, r0
 800cfee:	460c      	mov	r4, r1
 800cff0:	469a      	mov	sl, r3
 800cff2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cff6:	d807      	bhi.n	800d008 <_printf_i+0x28>
 800cff8:	2f62      	cmp	r7, #98	; 0x62
 800cffa:	d80a      	bhi.n	800d012 <_printf_i+0x32>
 800cffc:	2f00      	cmp	r7, #0
 800cffe:	f000 80d8 	beq.w	800d1b2 <_printf_i+0x1d2>
 800d002:	2f58      	cmp	r7, #88	; 0x58
 800d004:	f000 80a3 	beq.w	800d14e <_printf_i+0x16e>
 800d008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d00c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d010:	e03a      	b.n	800d088 <_printf_i+0xa8>
 800d012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d016:	2b15      	cmp	r3, #21
 800d018:	d8f6      	bhi.n	800d008 <_printf_i+0x28>
 800d01a:	a101      	add	r1, pc, #4	; (adr r1, 800d020 <_printf_i+0x40>)
 800d01c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d020:	0800d079 	.word	0x0800d079
 800d024:	0800d08d 	.word	0x0800d08d
 800d028:	0800d009 	.word	0x0800d009
 800d02c:	0800d009 	.word	0x0800d009
 800d030:	0800d009 	.word	0x0800d009
 800d034:	0800d009 	.word	0x0800d009
 800d038:	0800d08d 	.word	0x0800d08d
 800d03c:	0800d009 	.word	0x0800d009
 800d040:	0800d009 	.word	0x0800d009
 800d044:	0800d009 	.word	0x0800d009
 800d048:	0800d009 	.word	0x0800d009
 800d04c:	0800d199 	.word	0x0800d199
 800d050:	0800d0bd 	.word	0x0800d0bd
 800d054:	0800d17b 	.word	0x0800d17b
 800d058:	0800d009 	.word	0x0800d009
 800d05c:	0800d009 	.word	0x0800d009
 800d060:	0800d1bb 	.word	0x0800d1bb
 800d064:	0800d009 	.word	0x0800d009
 800d068:	0800d0bd 	.word	0x0800d0bd
 800d06c:	0800d009 	.word	0x0800d009
 800d070:	0800d009 	.word	0x0800d009
 800d074:	0800d183 	.word	0x0800d183
 800d078:	682b      	ldr	r3, [r5, #0]
 800d07a:	1d1a      	adds	r2, r3, #4
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	602a      	str	r2, [r5, #0]
 800d080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d088:	2301      	movs	r3, #1
 800d08a:	e0a3      	b.n	800d1d4 <_printf_i+0x1f4>
 800d08c:	6820      	ldr	r0, [r4, #0]
 800d08e:	6829      	ldr	r1, [r5, #0]
 800d090:	0606      	lsls	r6, r0, #24
 800d092:	f101 0304 	add.w	r3, r1, #4
 800d096:	d50a      	bpl.n	800d0ae <_printf_i+0xce>
 800d098:	680e      	ldr	r6, [r1, #0]
 800d09a:	602b      	str	r3, [r5, #0]
 800d09c:	2e00      	cmp	r6, #0
 800d09e:	da03      	bge.n	800d0a8 <_printf_i+0xc8>
 800d0a0:	232d      	movs	r3, #45	; 0x2d
 800d0a2:	4276      	negs	r6, r6
 800d0a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0a8:	485e      	ldr	r0, [pc, #376]	; (800d224 <_printf_i+0x244>)
 800d0aa:	230a      	movs	r3, #10
 800d0ac:	e019      	b.n	800d0e2 <_printf_i+0x102>
 800d0ae:	680e      	ldr	r6, [r1, #0]
 800d0b0:	602b      	str	r3, [r5, #0]
 800d0b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d0b6:	bf18      	it	ne
 800d0b8:	b236      	sxthne	r6, r6
 800d0ba:	e7ef      	b.n	800d09c <_printf_i+0xbc>
 800d0bc:	682b      	ldr	r3, [r5, #0]
 800d0be:	6820      	ldr	r0, [r4, #0]
 800d0c0:	1d19      	adds	r1, r3, #4
 800d0c2:	6029      	str	r1, [r5, #0]
 800d0c4:	0601      	lsls	r1, r0, #24
 800d0c6:	d501      	bpl.n	800d0cc <_printf_i+0xec>
 800d0c8:	681e      	ldr	r6, [r3, #0]
 800d0ca:	e002      	b.n	800d0d2 <_printf_i+0xf2>
 800d0cc:	0646      	lsls	r6, r0, #25
 800d0ce:	d5fb      	bpl.n	800d0c8 <_printf_i+0xe8>
 800d0d0:	881e      	ldrh	r6, [r3, #0]
 800d0d2:	4854      	ldr	r0, [pc, #336]	; (800d224 <_printf_i+0x244>)
 800d0d4:	2f6f      	cmp	r7, #111	; 0x6f
 800d0d6:	bf0c      	ite	eq
 800d0d8:	2308      	moveq	r3, #8
 800d0da:	230a      	movne	r3, #10
 800d0dc:	2100      	movs	r1, #0
 800d0de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d0e2:	6865      	ldr	r5, [r4, #4]
 800d0e4:	60a5      	str	r5, [r4, #8]
 800d0e6:	2d00      	cmp	r5, #0
 800d0e8:	bfa2      	ittt	ge
 800d0ea:	6821      	ldrge	r1, [r4, #0]
 800d0ec:	f021 0104 	bicge.w	r1, r1, #4
 800d0f0:	6021      	strge	r1, [r4, #0]
 800d0f2:	b90e      	cbnz	r6, 800d0f8 <_printf_i+0x118>
 800d0f4:	2d00      	cmp	r5, #0
 800d0f6:	d04d      	beq.n	800d194 <_printf_i+0x1b4>
 800d0f8:	4615      	mov	r5, r2
 800d0fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800d0fe:	fb03 6711 	mls	r7, r3, r1, r6
 800d102:	5dc7      	ldrb	r7, [r0, r7]
 800d104:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d108:	4637      	mov	r7, r6
 800d10a:	42bb      	cmp	r3, r7
 800d10c:	460e      	mov	r6, r1
 800d10e:	d9f4      	bls.n	800d0fa <_printf_i+0x11a>
 800d110:	2b08      	cmp	r3, #8
 800d112:	d10b      	bne.n	800d12c <_printf_i+0x14c>
 800d114:	6823      	ldr	r3, [r4, #0]
 800d116:	07de      	lsls	r6, r3, #31
 800d118:	d508      	bpl.n	800d12c <_printf_i+0x14c>
 800d11a:	6923      	ldr	r3, [r4, #16]
 800d11c:	6861      	ldr	r1, [r4, #4]
 800d11e:	4299      	cmp	r1, r3
 800d120:	bfde      	ittt	le
 800d122:	2330      	movle	r3, #48	; 0x30
 800d124:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d128:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d12c:	1b52      	subs	r2, r2, r5
 800d12e:	6122      	str	r2, [r4, #16]
 800d130:	f8cd a000 	str.w	sl, [sp]
 800d134:	464b      	mov	r3, r9
 800d136:	aa03      	add	r2, sp, #12
 800d138:	4621      	mov	r1, r4
 800d13a:	4640      	mov	r0, r8
 800d13c:	f7ff fee2 	bl	800cf04 <_printf_common>
 800d140:	3001      	adds	r0, #1
 800d142:	d14c      	bne.n	800d1de <_printf_i+0x1fe>
 800d144:	f04f 30ff 	mov.w	r0, #4294967295
 800d148:	b004      	add	sp, #16
 800d14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d14e:	4835      	ldr	r0, [pc, #212]	; (800d224 <_printf_i+0x244>)
 800d150:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d154:	6829      	ldr	r1, [r5, #0]
 800d156:	6823      	ldr	r3, [r4, #0]
 800d158:	f851 6b04 	ldr.w	r6, [r1], #4
 800d15c:	6029      	str	r1, [r5, #0]
 800d15e:	061d      	lsls	r5, r3, #24
 800d160:	d514      	bpl.n	800d18c <_printf_i+0x1ac>
 800d162:	07df      	lsls	r7, r3, #31
 800d164:	bf44      	itt	mi
 800d166:	f043 0320 	orrmi.w	r3, r3, #32
 800d16a:	6023      	strmi	r3, [r4, #0]
 800d16c:	b91e      	cbnz	r6, 800d176 <_printf_i+0x196>
 800d16e:	6823      	ldr	r3, [r4, #0]
 800d170:	f023 0320 	bic.w	r3, r3, #32
 800d174:	6023      	str	r3, [r4, #0]
 800d176:	2310      	movs	r3, #16
 800d178:	e7b0      	b.n	800d0dc <_printf_i+0xfc>
 800d17a:	6823      	ldr	r3, [r4, #0]
 800d17c:	f043 0320 	orr.w	r3, r3, #32
 800d180:	6023      	str	r3, [r4, #0]
 800d182:	2378      	movs	r3, #120	; 0x78
 800d184:	4828      	ldr	r0, [pc, #160]	; (800d228 <_printf_i+0x248>)
 800d186:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d18a:	e7e3      	b.n	800d154 <_printf_i+0x174>
 800d18c:	0659      	lsls	r1, r3, #25
 800d18e:	bf48      	it	mi
 800d190:	b2b6      	uxthmi	r6, r6
 800d192:	e7e6      	b.n	800d162 <_printf_i+0x182>
 800d194:	4615      	mov	r5, r2
 800d196:	e7bb      	b.n	800d110 <_printf_i+0x130>
 800d198:	682b      	ldr	r3, [r5, #0]
 800d19a:	6826      	ldr	r6, [r4, #0]
 800d19c:	6961      	ldr	r1, [r4, #20]
 800d19e:	1d18      	adds	r0, r3, #4
 800d1a0:	6028      	str	r0, [r5, #0]
 800d1a2:	0635      	lsls	r5, r6, #24
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	d501      	bpl.n	800d1ac <_printf_i+0x1cc>
 800d1a8:	6019      	str	r1, [r3, #0]
 800d1aa:	e002      	b.n	800d1b2 <_printf_i+0x1d2>
 800d1ac:	0670      	lsls	r0, r6, #25
 800d1ae:	d5fb      	bpl.n	800d1a8 <_printf_i+0x1c8>
 800d1b0:	8019      	strh	r1, [r3, #0]
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	6123      	str	r3, [r4, #16]
 800d1b6:	4615      	mov	r5, r2
 800d1b8:	e7ba      	b.n	800d130 <_printf_i+0x150>
 800d1ba:	682b      	ldr	r3, [r5, #0]
 800d1bc:	1d1a      	adds	r2, r3, #4
 800d1be:	602a      	str	r2, [r5, #0]
 800d1c0:	681d      	ldr	r5, [r3, #0]
 800d1c2:	6862      	ldr	r2, [r4, #4]
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	f7f3 f892 	bl	80002f0 <memchr>
 800d1cc:	b108      	cbz	r0, 800d1d2 <_printf_i+0x1f2>
 800d1ce:	1b40      	subs	r0, r0, r5
 800d1d0:	6060      	str	r0, [r4, #4]
 800d1d2:	6863      	ldr	r3, [r4, #4]
 800d1d4:	6123      	str	r3, [r4, #16]
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1dc:	e7a8      	b.n	800d130 <_printf_i+0x150>
 800d1de:	6923      	ldr	r3, [r4, #16]
 800d1e0:	462a      	mov	r2, r5
 800d1e2:	4649      	mov	r1, r9
 800d1e4:	4640      	mov	r0, r8
 800d1e6:	47d0      	blx	sl
 800d1e8:	3001      	adds	r0, #1
 800d1ea:	d0ab      	beq.n	800d144 <_printf_i+0x164>
 800d1ec:	6823      	ldr	r3, [r4, #0]
 800d1ee:	079b      	lsls	r3, r3, #30
 800d1f0:	d413      	bmi.n	800d21a <_printf_i+0x23a>
 800d1f2:	68e0      	ldr	r0, [r4, #12]
 800d1f4:	9b03      	ldr	r3, [sp, #12]
 800d1f6:	4298      	cmp	r0, r3
 800d1f8:	bfb8      	it	lt
 800d1fa:	4618      	movlt	r0, r3
 800d1fc:	e7a4      	b.n	800d148 <_printf_i+0x168>
 800d1fe:	2301      	movs	r3, #1
 800d200:	4632      	mov	r2, r6
 800d202:	4649      	mov	r1, r9
 800d204:	4640      	mov	r0, r8
 800d206:	47d0      	blx	sl
 800d208:	3001      	adds	r0, #1
 800d20a:	d09b      	beq.n	800d144 <_printf_i+0x164>
 800d20c:	3501      	adds	r5, #1
 800d20e:	68e3      	ldr	r3, [r4, #12]
 800d210:	9903      	ldr	r1, [sp, #12]
 800d212:	1a5b      	subs	r3, r3, r1
 800d214:	42ab      	cmp	r3, r5
 800d216:	dcf2      	bgt.n	800d1fe <_printf_i+0x21e>
 800d218:	e7eb      	b.n	800d1f2 <_printf_i+0x212>
 800d21a:	2500      	movs	r5, #0
 800d21c:	f104 0619 	add.w	r6, r4, #25
 800d220:	e7f5      	b.n	800d20e <_printf_i+0x22e>
 800d222:	bf00      	nop
 800d224:	080101ee 	.word	0x080101ee
 800d228:	080101ff 	.word	0x080101ff

0800d22c <iprintf>:
 800d22c:	b40f      	push	{r0, r1, r2, r3}
 800d22e:	4b0a      	ldr	r3, [pc, #40]	; (800d258 <iprintf+0x2c>)
 800d230:	b513      	push	{r0, r1, r4, lr}
 800d232:	681c      	ldr	r4, [r3, #0]
 800d234:	b124      	cbz	r4, 800d240 <iprintf+0x14>
 800d236:	69a3      	ldr	r3, [r4, #24]
 800d238:	b913      	cbnz	r3, 800d240 <iprintf+0x14>
 800d23a:	4620      	mov	r0, r4
 800d23c:	f7ff fa44 	bl	800c6c8 <__sinit>
 800d240:	ab05      	add	r3, sp, #20
 800d242:	9a04      	ldr	r2, [sp, #16]
 800d244:	68a1      	ldr	r1, [r4, #8]
 800d246:	9301      	str	r3, [sp, #4]
 800d248:	4620      	mov	r0, r4
 800d24a:	f001 fd5b 	bl	800ed04 <_vfiprintf_r>
 800d24e:	b002      	add	sp, #8
 800d250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d254:	b004      	add	sp, #16
 800d256:	4770      	bx	lr
 800d258:	2400002c 	.word	0x2400002c

0800d25c <cleanup_glue>:
 800d25c:	b538      	push	{r3, r4, r5, lr}
 800d25e:	460c      	mov	r4, r1
 800d260:	6809      	ldr	r1, [r1, #0]
 800d262:	4605      	mov	r5, r0
 800d264:	b109      	cbz	r1, 800d26a <cleanup_glue+0xe>
 800d266:	f7ff fff9 	bl	800d25c <cleanup_glue>
 800d26a:	4621      	mov	r1, r4
 800d26c:	4628      	mov	r0, r5
 800d26e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d272:	f001 bb75 	b.w	800e960 <_free_r>
	...

0800d278 <_reclaim_reent>:
 800d278:	4b2c      	ldr	r3, [pc, #176]	; (800d32c <_reclaim_reent+0xb4>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4283      	cmp	r3, r0
 800d27e:	b570      	push	{r4, r5, r6, lr}
 800d280:	4604      	mov	r4, r0
 800d282:	d051      	beq.n	800d328 <_reclaim_reent+0xb0>
 800d284:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d286:	b143      	cbz	r3, 800d29a <_reclaim_reent+0x22>
 800d288:	68db      	ldr	r3, [r3, #12]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d14a      	bne.n	800d324 <_reclaim_reent+0xac>
 800d28e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d290:	6819      	ldr	r1, [r3, #0]
 800d292:	b111      	cbz	r1, 800d29a <_reclaim_reent+0x22>
 800d294:	4620      	mov	r0, r4
 800d296:	f001 fb63 	bl	800e960 <_free_r>
 800d29a:	6961      	ldr	r1, [r4, #20]
 800d29c:	b111      	cbz	r1, 800d2a4 <_reclaim_reent+0x2c>
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f001 fb5e 	bl	800e960 <_free_r>
 800d2a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d2a6:	b111      	cbz	r1, 800d2ae <_reclaim_reent+0x36>
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	f001 fb59 	bl	800e960 <_free_r>
 800d2ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d2b0:	b111      	cbz	r1, 800d2b8 <_reclaim_reent+0x40>
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	f001 fb54 	bl	800e960 <_free_r>
 800d2b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d2ba:	b111      	cbz	r1, 800d2c2 <_reclaim_reent+0x4a>
 800d2bc:	4620      	mov	r0, r4
 800d2be:	f001 fb4f 	bl	800e960 <_free_r>
 800d2c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d2c4:	b111      	cbz	r1, 800d2cc <_reclaim_reent+0x54>
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	f001 fb4a 	bl	800e960 <_free_r>
 800d2cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d2ce:	b111      	cbz	r1, 800d2d6 <_reclaim_reent+0x5e>
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f001 fb45 	bl	800e960 <_free_r>
 800d2d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d2d8:	b111      	cbz	r1, 800d2e0 <_reclaim_reent+0x68>
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f001 fb40 	bl	800e960 <_free_r>
 800d2e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2e2:	b111      	cbz	r1, 800d2ea <_reclaim_reent+0x72>
 800d2e4:	4620      	mov	r0, r4
 800d2e6:	f001 fb3b 	bl	800e960 <_free_r>
 800d2ea:	69a3      	ldr	r3, [r4, #24]
 800d2ec:	b1e3      	cbz	r3, 800d328 <_reclaim_reent+0xb0>
 800d2ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	4798      	blx	r3
 800d2f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d2f6:	b1b9      	cbz	r1, 800d328 <_reclaim_reent+0xb0>
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d2fe:	f7ff bfad 	b.w	800d25c <cleanup_glue>
 800d302:	5949      	ldr	r1, [r1, r5]
 800d304:	b941      	cbnz	r1, 800d318 <_reclaim_reent+0xa0>
 800d306:	3504      	adds	r5, #4
 800d308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d30a:	2d80      	cmp	r5, #128	; 0x80
 800d30c:	68d9      	ldr	r1, [r3, #12]
 800d30e:	d1f8      	bne.n	800d302 <_reclaim_reent+0x8a>
 800d310:	4620      	mov	r0, r4
 800d312:	f001 fb25 	bl	800e960 <_free_r>
 800d316:	e7ba      	b.n	800d28e <_reclaim_reent+0x16>
 800d318:	680e      	ldr	r6, [r1, #0]
 800d31a:	4620      	mov	r0, r4
 800d31c:	f001 fb20 	bl	800e960 <_free_r>
 800d320:	4631      	mov	r1, r6
 800d322:	e7ef      	b.n	800d304 <_reclaim_reent+0x8c>
 800d324:	2500      	movs	r5, #0
 800d326:	e7ef      	b.n	800d308 <_reclaim_reent+0x90>
 800d328:	bd70      	pop	{r4, r5, r6, pc}
 800d32a:	bf00      	nop
 800d32c:	2400002c 	.word	0x2400002c

0800d330 <_sbrk_r>:
 800d330:	b538      	push	{r3, r4, r5, lr}
 800d332:	4d06      	ldr	r5, [pc, #24]	; (800d34c <_sbrk_r+0x1c>)
 800d334:	2300      	movs	r3, #0
 800d336:	4604      	mov	r4, r0
 800d338:	4608      	mov	r0, r1
 800d33a:	602b      	str	r3, [r5, #0]
 800d33c:	f7f5 fda4 	bl	8002e88 <_sbrk>
 800d340:	1c43      	adds	r3, r0, #1
 800d342:	d102      	bne.n	800d34a <_sbrk_r+0x1a>
 800d344:	682b      	ldr	r3, [r5, #0]
 800d346:	b103      	cbz	r3, 800d34a <_sbrk_r+0x1a>
 800d348:	6023      	str	r3, [r4, #0]
 800d34a:	bd38      	pop	{r3, r4, r5, pc}
 800d34c:	240050cc 	.word	0x240050cc

0800d350 <siprintf>:
 800d350:	b40e      	push	{r1, r2, r3}
 800d352:	b500      	push	{lr}
 800d354:	b09c      	sub	sp, #112	; 0x70
 800d356:	ab1d      	add	r3, sp, #116	; 0x74
 800d358:	9002      	str	r0, [sp, #8]
 800d35a:	9006      	str	r0, [sp, #24]
 800d35c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d360:	4809      	ldr	r0, [pc, #36]	; (800d388 <siprintf+0x38>)
 800d362:	9107      	str	r1, [sp, #28]
 800d364:	9104      	str	r1, [sp, #16]
 800d366:	4909      	ldr	r1, [pc, #36]	; (800d38c <siprintf+0x3c>)
 800d368:	f853 2b04 	ldr.w	r2, [r3], #4
 800d36c:	9105      	str	r1, [sp, #20]
 800d36e:	6800      	ldr	r0, [r0, #0]
 800d370:	9301      	str	r3, [sp, #4]
 800d372:	a902      	add	r1, sp, #8
 800d374:	f001 fb9c 	bl	800eab0 <_svfiprintf_r>
 800d378:	9b02      	ldr	r3, [sp, #8]
 800d37a:	2200      	movs	r2, #0
 800d37c:	701a      	strb	r2, [r3, #0]
 800d37e:	b01c      	add	sp, #112	; 0x70
 800d380:	f85d eb04 	ldr.w	lr, [sp], #4
 800d384:	b003      	add	sp, #12
 800d386:	4770      	bx	lr
 800d388:	2400002c 	.word	0x2400002c
 800d38c:	ffff0208 	.word	0xffff0208

0800d390 <__sread>:
 800d390:	b510      	push	{r4, lr}
 800d392:	460c      	mov	r4, r1
 800d394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d398:	f001 fde4 	bl	800ef64 <_read_r>
 800d39c:	2800      	cmp	r0, #0
 800d39e:	bfab      	itete	ge
 800d3a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d3a2:	89a3      	ldrhlt	r3, [r4, #12]
 800d3a4:	181b      	addge	r3, r3, r0
 800d3a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d3aa:	bfac      	ite	ge
 800d3ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800d3ae:	81a3      	strhlt	r3, [r4, #12]
 800d3b0:	bd10      	pop	{r4, pc}

0800d3b2 <__swrite>:
 800d3b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3b6:	461f      	mov	r7, r3
 800d3b8:	898b      	ldrh	r3, [r1, #12]
 800d3ba:	05db      	lsls	r3, r3, #23
 800d3bc:	4605      	mov	r5, r0
 800d3be:	460c      	mov	r4, r1
 800d3c0:	4616      	mov	r6, r2
 800d3c2:	d505      	bpl.n	800d3d0 <__swrite+0x1e>
 800d3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3c8:	2302      	movs	r3, #2
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f000 ff08 	bl	800e1e0 <_lseek_r>
 800d3d0:	89a3      	ldrh	r3, [r4, #12]
 800d3d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3da:	81a3      	strh	r3, [r4, #12]
 800d3dc:	4632      	mov	r2, r6
 800d3de:	463b      	mov	r3, r7
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e6:	f000 b817 	b.w	800d418 <_write_r>

0800d3ea <__sseek>:
 800d3ea:	b510      	push	{r4, lr}
 800d3ec:	460c      	mov	r4, r1
 800d3ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3f2:	f000 fef5 	bl	800e1e0 <_lseek_r>
 800d3f6:	1c43      	adds	r3, r0, #1
 800d3f8:	89a3      	ldrh	r3, [r4, #12]
 800d3fa:	bf15      	itete	ne
 800d3fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d3fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d406:	81a3      	strheq	r3, [r4, #12]
 800d408:	bf18      	it	ne
 800d40a:	81a3      	strhne	r3, [r4, #12]
 800d40c:	bd10      	pop	{r4, pc}

0800d40e <__sclose>:
 800d40e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d412:	f000 b813 	b.w	800d43c <_close_r>
	...

0800d418 <_write_r>:
 800d418:	b538      	push	{r3, r4, r5, lr}
 800d41a:	4d07      	ldr	r5, [pc, #28]	; (800d438 <_write_r+0x20>)
 800d41c:	4604      	mov	r4, r0
 800d41e:	4608      	mov	r0, r1
 800d420:	4611      	mov	r1, r2
 800d422:	2200      	movs	r2, #0
 800d424:	602a      	str	r2, [r5, #0]
 800d426:	461a      	mov	r2, r3
 800d428:	f7f5 fcdd 	bl	8002de6 <_write>
 800d42c:	1c43      	adds	r3, r0, #1
 800d42e:	d102      	bne.n	800d436 <_write_r+0x1e>
 800d430:	682b      	ldr	r3, [r5, #0]
 800d432:	b103      	cbz	r3, 800d436 <_write_r+0x1e>
 800d434:	6023      	str	r3, [r4, #0]
 800d436:	bd38      	pop	{r3, r4, r5, pc}
 800d438:	240050cc 	.word	0x240050cc

0800d43c <_close_r>:
 800d43c:	b538      	push	{r3, r4, r5, lr}
 800d43e:	4d06      	ldr	r5, [pc, #24]	; (800d458 <_close_r+0x1c>)
 800d440:	2300      	movs	r3, #0
 800d442:	4604      	mov	r4, r0
 800d444:	4608      	mov	r0, r1
 800d446:	602b      	str	r3, [r5, #0]
 800d448:	f7f5 fce9 	bl	8002e1e <_close>
 800d44c:	1c43      	adds	r3, r0, #1
 800d44e:	d102      	bne.n	800d456 <_close_r+0x1a>
 800d450:	682b      	ldr	r3, [r5, #0]
 800d452:	b103      	cbz	r3, 800d456 <_close_r+0x1a>
 800d454:	6023      	str	r3, [r4, #0]
 800d456:	bd38      	pop	{r3, r4, r5, pc}
 800d458:	240050cc 	.word	0x240050cc

0800d45c <quorem>:
 800d45c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d460:	6903      	ldr	r3, [r0, #16]
 800d462:	690c      	ldr	r4, [r1, #16]
 800d464:	42a3      	cmp	r3, r4
 800d466:	4607      	mov	r7, r0
 800d468:	f2c0 8081 	blt.w	800d56e <quorem+0x112>
 800d46c:	3c01      	subs	r4, #1
 800d46e:	f101 0814 	add.w	r8, r1, #20
 800d472:	f100 0514 	add.w	r5, r0, #20
 800d476:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d47a:	9301      	str	r3, [sp, #4]
 800d47c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d480:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d484:	3301      	adds	r3, #1
 800d486:	429a      	cmp	r2, r3
 800d488:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d48c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d490:	fbb2 f6f3 	udiv	r6, r2, r3
 800d494:	d331      	bcc.n	800d4fa <quorem+0x9e>
 800d496:	f04f 0e00 	mov.w	lr, #0
 800d49a:	4640      	mov	r0, r8
 800d49c:	46ac      	mov	ip, r5
 800d49e:	46f2      	mov	sl, lr
 800d4a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800d4a4:	b293      	uxth	r3, r2
 800d4a6:	fb06 e303 	mla	r3, r6, r3, lr
 800d4aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	ebaa 0303 	sub.w	r3, sl, r3
 800d4b4:	f8dc a000 	ldr.w	sl, [ip]
 800d4b8:	0c12      	lsrs	r2, r2, #16
 800d4ba:	fa13 f38a 	uxtah	r3, r3, sl
 800d4be:	fb06 e202 	mla	r2, r6, r2, lr
 800d4c2:	9300      	str	r3, [sp, #0]
 800d4c4:	9b00      	ldr	r3, [sp, #0]
 800d4c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d4ca:	b292      	uxth	r2, r2
 800d4cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d4d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d4d4:	f8bd 3000 	ldrh.w	r3, [sp]
 800d4d8:	4581      	cmp	r9, r0
 800d4da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4de:	f84c 3b04 	str.w	r3, [ip], #4
 800d4e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d4e6:	d2db      	bcs.n	800d4a0 <quorem+0x44>
 800d4e8:	f855 300b 	ldr.w	r3, [r5, fp]
 800d4ec:	b92b      	cbnz	r3, 800d4fa <quorem+0x9e>
 800d4ee:	9b01      	ldr	r3, [sp, #4]
 800d4f0:	3b04      	subs	r3, #4
 800d4f2:	429d      	cmp	r5, r3
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	d32e      	bcc.n	800d556 <quorem+0xfa>
 800d4f8:	613c      	str	r4, [r7, #16]
 800d4fa:	4638      	mov	r0, r7
 800d4fc:	f001 f918 	bl	800e730 <__mcmp>
 800d500:	2800      	cmp	r0, #0
 800d502:	db24      	blt.n	800d54e <quorem+0xf2>
 800d504:	3601      	adds	r6, #1
 800d506:	4628      	mov	r0, r5
 800d508:	f04f 0c00 	mov.w	ip, #0
 800d50c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d510:	f8d0 e000 	ldr.w	lr, [r0]
 800d514:	b293      	uxth	r3, r2
 800d516:	ebac 0303 	sub.w	r3, ip, r3
 800d51a:	0c12      	lsrs	r2, r2, #16
 800d51c:	fa13 f38e 	uxtah	r3, r3, lr
 800d520:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d524:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d528:	b29b      	uxth	r3, r3
 800d52a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d52e:	45c1      	cmp	r9, r8
 800d530:	f840 3b04 	str.w	r3, [r0], #4
 800d534:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d538:	d2e8      	bcs.n	800d50c <quorem+0xb0>
 800d53a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d53e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d542:	b922      	cbnz	r2, 800d54e <quorem+0xf2>
 800d544:	3b04      	subs	r3, #4
 800d546:	429d      	cmp	r5, r3
 800d548:	461a      	mov	r2, r3
 800d54a:	d30a      	bcc.n	800d562 <quorem+0x106>
 800d54c:	613c      	str	r4, [r7, #16]
 800d54e:	4630      	mov	r0, r6
 800d550:	b003      	add	sp, #12
 800d552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d556:	6812      	ldr	r2, [r2, #0]
 800d558:	3b04      	subs	r3, #4
 800d55a:	2a00      	cmp	r2, #0
 800d55c:	d1cc      	bne.n	800d4f8 <quorem+0x9c>
 800d55e:	3c01      	subs	r4, #1
 800d560:	e7c7      	b.n	800d4f2 <quorem+0x96>
 800d562:	6812      	ldr	r2, [r2, #0]
 800d564:	3b04      	subs	r3, #4
 800d566:	2a00      	cmp	r2, #0
 800d568:	d1f0      	bne.n	800d54c <quorem+0xf0>
 800d56a:	3c01      	subs	r4, #1
 800d56c:	e7eb      	b.n	800d546 <quorem+0xea>
 800d56e:	2000      	movs	r0, #0
 800d570:	e7ee      	b.n	800d550 <quorem+0xf4>
 800d572:	0000      	movs	r0, r0
 800d574:	0000      	movs	r0, r0
	...

0800d578 <_dtoa_r>:
 800d578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d57c:	ed2d 8b02 	vpush	{d8}
 800d580:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d582:	b091      	sub	sp, #68	; 0x44
 800d584:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d588:	ec59 8b10 	vmov	r8, r9, d0
 800d58c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800d58e:	9106      	str	r1, [sp, #24]
 800d590:	4606      	mov	r6, r0
 800d592:	9208      	str	r2, [sp, #32]
 800d594:	930c      	str	r3, [sp, #48]	; 0x30
 800d596:	b975      	cbnz	r5, 800d5b6 <_dtoa_r+0x3e>
 800d598:	2010      	movs	r0, #16
 800d59a:	f000 fe33 	bl	800e204 <malloc>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	6270      	str	r0, [r6, #36]	; 0x24
 800d5a2:	b920      	cbnz	r0, 800d5ae <_dtoa_r+0x36>
 800d5a4:	4baa      	ldr	r3, [pc, #680]	; (800d850 <_dtoa_r+0x2d8>)
 800d5a6:	21ea      	movs	r1, #234	; 0xea
 800d5a8:	48aa      	ldr	r0, [pc, #680]	; (800d854 <_dtoa_r+0x2dc>)
 800d5aa:	f001 fdad 	bl	800f108 <__assert_func>
 800d5ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d5b2:	6005      	str	r5, [r0, #0]
 800d5b4:	60c5      	str	r5, [r0, #12]
 800d5b6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d5b8:	6819      	ldr	r1, [r3, #0]
 800d5ba:	b151      	cbz	r1, 800d5d2 <_dtoa_r+0x5a>
 800d5bc:	685a      	ldr	r2, [r3, #4]
 800d5be:	604a      	str	r2, [r1, #4]
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	4093      	lsls	r3, r2
 800d5c4:	608b      	str	r3, [r1, #8]
 800d5c6:	4630      	mov	r0, r6
 800d5c8:	f000 fe70 	bl	800e2ac <_Bfree>
 800d5cc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	601a      	str	r2, [r3, #0]
 800d5d2:	f1b9 0300 	subs.w	r3, r9, #0
 800d5d6:	bfbb      	ittet	lt
 800d5d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d5dc:	9303      	strlt	r3, [sp, #12]
 800d5de:	2300      	movge	r3, #0
 800d5e0:	2201      	movlt	r2, #1
 800d5e2:	bfac      	ite	ge
 800d5e4:	6023      	strge	r3, [r4, #0]
 800d5e6:	6022      	strlt	r2, [r4, #0]
 800d5e8:	4b9b      	ldr	r3, [pc, #620]	; (800d858 <_dtoa_r+0x2e0>)
 800d5ea:	9c03      	ldr	r4, [sp, #12]
 800d5ec:	43a3      	bics	r3, r4
 800d5ee:	d11c      	bne.n	800d62a <_dtoa_r+0xb2>
 800d5f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d5f2:	f242 730f 	movw	r3, #9999	; 0x270f
 800d5f6:	6013      	str	r3, [r2, #0]
 800d5f8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d5fc:	ea53 0308 	orrs.w	r3, r3, r8
 800d600:	f000 84fd 	beq.w	800dffe <_dtoa_r+0xa86>
 800d604:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d606:	b963      	cbnz	r3, 800d622 <_dtoa_r+0xaa>
 800d608:	4b94      	ldr	r3, [pc, #592]	; (800d85c <_dtoa_r+0x2e4>)
 800d60a:	e01f      	b.n	800d64c <_dtoa_r+0xd4>
 800d60c:	4b94      	ldr	r3, [pc, #592]	; (800d860 <_dtoa_r+0x2e8>)
 800d60e:	9301      	str	r3, [sp, #4]
 800d610:	3308      	adds	r3, #8
 800d612:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d614:	6013      	str	r3, [r2, #0]
 800d616:	9801      	ldr	r0, [sp, #4]
 800d618:	b011      	add	sp, #68	; 0x44
 800d61a:	ecbd 8b02 	vpop	{d8}
 800d61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d622:	4b8e      	ldr	r3, [pc, #568]	; (800d85c <_dtoa_r+0x2e4>)
 800d624:	9301      	str	r3, [sp, #4]
 800d626:	3303      	adds	r3, #3
 800d628:	e7f3      	b.n	800d612 <_dtoa_r+0x9a>
 800d62a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d62e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d636:	d10b      	bne.n	800d650 <_dtoa_r+0xd8>
 800d638:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d63a:	2301      	movs	r3, #1
 800d63c:	6013      	str	r3, [r2, #0]
 800d63e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d640:	2b00      	cmp	r3, #0
 800d642:	f000 84d9 	beq.w	800dff8 <_dtoa_r+0xa80>
 800d646:	4887      	ldr	r0, [pc, #540]	; (800d864 <_dtoa_r+0x2ec>)
 800d648:	6018      	str	r0, [r3, #0]
 800d64a:	1e43      	subs	r3, r0, #1
 800d64c:	9301      	str	r3, [sp, #4]
 800d64e:	e7e2      	b.n	800d616 <_dtoa_r+0x9e>
 800d650:	a90f      	add	r1, sp, #60	; 0x3c
 800d652:	aa0e      	add	r2, sp, #56	; 0x38
 800d654:	4630      	mov	r0, r6
 800d656:	eeb0 0b48 	vmov.f64	d0, d8
 800d65a:	f001 f90f 	bl	800e87c <__d2b>
 800d65e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d662:	4605      	mov	r5, r0
 800d664:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d666:	2900      	cmp	r1, #0
 800d668:	d046      	beq.n	800d6f8 <_dtoa_r+0x180>
 800d66a:	ee18 4a90 	vmov	r4, s17
 800d66e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d672:	ec53 2b18 	vmov	r2, r3, d8
 800d676:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d67a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d67e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d682:	2400      	movs	r4, #0
 800d684:	ec43 2b16 	vmov	d6, r2, r3
 800d688:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d68c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800d838 <_dtoa_r+0x2c0>
 800d690:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d694:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800d840 <_dtoa_r+0x2c8>
 800d698:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d69c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800d848 <_dtoa_r+0x2d0>
 800d6a0:	ee07 1a90 	vmov	s15, r1
 800d6a4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d6a8:	eeb0 7b46 	vmov.f64	d7, d6
 800d6ac:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d6b0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d6b4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6bc:	ee16 ba90 	vmov	fp, s13
 800d6c0:	940a      	str	r4, [sp, #40]	; 0x28
 800d6c2:	d508      	bpl.n	800d6d6 <_dtoa_r+0x15e>
 800d6c4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d6c8:	eeb4 6b47 	vcmp.f64	d6, d7
 800d6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d0:	bf18      	it	ne
 800d6d2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d6d6:	f1bb 0f16 	cmp.w	fp, #22
 800d6da:	d82f      	bhi.n	800d73c <_dtoa_r+0x1c4>
 800d6dc:	4b62      	ldr	r3, [pc, #392]	; (800d868 <_dtoa_r+0x2f0>)
 800d6de:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d6e2:	ed93 7b00 	vldr	d7, [r3]
 800d6e6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ee:	d501      	bpl.n	800d6f4 <_dtoa_r+0x17c>
 800d6f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	e022      	b.n	800d73e <_dtoa_r+0x1c6>
 800d6f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d6fa:	4401      	add	r1, r0
 800d6fc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d700:	2b20      	cmp	r3, #32
 800d702:	bfc1      	itttt	gt
 800d704:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d708:	fa04 f303 	lslgt.w	r3, r4, r3
 800d70c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d710:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d714:	bfd6      	itet	le
 800d716:	f1c3 0320 	rsble	r3, r3, #32
 800d71a:	ea43 0808 	orrgt.w	r8, r3, r8
 800d71e:	fa08 f803 	lslle.w	r8, r8, r3
 800d722:	ee07 8a90 	vmov	s15, r8
 800d726:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d72a:	3901      	subs	r1, #1
 800d72c:	ee17 4a90 	vmov	r4, s15
 800d730:	ec53 2b17 	vmov	r2, r3, d7
 800d734:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d738:	2401      	movs	r4, #1
 800d73a:	e7a3      	b.n	800d684 <_dtoa_r+0x10c>
 800d73c:	2301      	movs	r3, #1
 800d73e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d740:	1a43      	subs	r3, r0, r1
 800d742:	1e5a      	subs	r2, r3, #1
 800d744:	bf45      	ittet	mi
 800d746:	f1c3 0301 	rsbmi	r3, r3, #1
 800d74a:	9304      	strmi	r3, [sp, #16]
 800d74c:	2300      	movpl	r3, #0
 800d74e:	2300      	movmi	r3, #0
 800d750:	9205      	str	r2, [sp, #20]
 800d752:	bf54      	ite	pl
 800d754:	9304      	strpl	r3, [sp, #16]
 800d756:	9305      	strmi	r3, [sp, #20]
 800d758:	f1bb 0f00 	cmp.w	fp, #0
 800d75c:	db18      	blt.n	800d790 <_dtoa_r+0x218>
 800d75e:	9b05      	ldr	r3, [sp, #20]
 800d760:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800d764:	445b      	add	r3, fp
 800d766:	9305      	str	r3, [sp, #20]
 800d768:	2300      	movs	r3, #0
 800d76a:	9a06      	ldr	r2, [sp, #24]
 800d76c:	2a09      	cmp	r2, #9
 800d76e:	d849      	bhi.n	800d804 <_dtoa_r+0x28c>
 800d770:	2a05      	cmp	r2, #5
 800d772:	bfc4      	itt	gt
 800d774:	3a04      	subgt	r2, #4
 800d776:	9206      	strgt	r2, [sp, #24]
 800d778:	9a06      	ldr	r2, [sp, #24]
 800d77a:	f1a2 0202 	sub.w	r2, r2, #2
 800d77e:	bfcc      	ite	gt
 800d780:	2400      	movgt	r4, #0
 800d782:	2401      	movle	r4, #1
 800d784:	2a03      	cmp	r2, #3
 800d786:	d848      	bhi.n	800d81a <_dtoa_r+0x2a2>
 800d788:	e8df f002 	tbb	[pc, r2]
 800d78c:	3a2c2e0b 	.word	0x3a2c2e0b
 800d790:	9b04      	ldr	r3, [sp, #16]
 800d792:	2200      	movs	r2, #0
 800d794:	eba3 030b 	sub.w	r3, r3, fp
 800d798:	9304      	str	r3, [sp, #16]
 800d79a:	9209      	str	r2, [sp, #36]	; 0x24
 800d79c:	f1cb 0300 	rsb	r3, fp, #0
 800d7a0:	e7e3      	b.n	800d76a <_dtoa_r+0x1f2>
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	9207      	str	r2, [sp, #28]
 800d7a6:	9a08      	ldr	r2, [sp, #32]
 800d7a8:	2a00      	cmp	r2, #0
 800d7aa:	dc39      	bgt.n	800d820 <_dtoa_r+0x2a8>
 800d7ac:	f04f 0a01 	mov.w	sl, #1
 800d7b0:	46d1      	mov	r9, sl
 800d7b2:	4652      	mov	r2, sl
 800d7b4:	f8cd a020 	str.w	sl, [sp, #32]
 800d7b8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d7ba:	2100      	movs	r1, #0
 800d7bc:	6079      	str	r1, [r7, #4]
 800d7be:	2004      	movs	r0, #4
 800d7c0:	f100 0c14 	add.w	ip, r0, #20
 800d7c4:	4594      	cmp	ip, r2
 800d7c6:	6879      	ldr	r1, [r7, #4]
 800d7c8:	d92f      	bls.n	800d82a <_dtoa_r+0x2b2>
 800d7ca:	4630      	mov	r0, r6
 800d7cc:	930d      	str	r3, [sp, #52]	; 0x34
 800d7ce:	f000 fd2d 	bl	800e22c <_Balloc>
 800d7d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7d4:	9001      	str	r0, [sp, #4]
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	2800      	cmp	r0, #0
 800d7da:	d149      	bne.n	800d870 <_dtoa_r+0x2f8>
 800d7dc:	4b23      	ldr	r3, [pc, #140]	; (800d86c <_dtoa_r+0x2f4>)
 800d7de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d7e2:	e6e1      	b.n	800d5a8 <_dtoa_r+0x30>
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	e7dd      	b.n	800d7a4 <_dtoa_r+0x22c>
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	9207      	str	r2, [sp, #28]
 800d7ec:	9a08      	ldr	r2, [sp, #32]
 800d7ee:	eb0b 0a02 	add.w	sl, fp, r2
 800d7f2:	f10a 0901 	add.w	r9, sl, #1
 800d7f6:	464a      	mov	r2, r9
 800d7f8:	2a01      	cmp	r2, #1
 800d7fa:	bfb8      	it	lt
 800d7fc:	2201      	movlt	r2, #1
 800d7fe:	e7db      	b.n	800d7b8 <_dtoa_r+0x240>
 800d800:	2201      	movs	r2, #1
 800d802:	e7f2      	b.n	800d7ea <_dtoa_r+0x272>
 800d804:	2401      	movs	r4, #1
 800d806:	2200      	movs	r2, #0
 800d808:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800d80c:	f04f 3aff 	mov.w	sl, #4294967295
 800d810:	2100      	movs	r1, #0
 800d812:	46d1      	mov	r9, sl
 800d814:	2212      	movs	r2, #18
 800d816:	9108      	str	r1, [sp, #32]
 800d818:	e7ce      	b.n	800d7b8 <_dtoa_r+0x240>
 800d81a:	2201      	movs	r2, #1
 800d81c:	9207      	str	r2, [sp, #28]
 800d81e:	e7f5      	b.n	800d80c <_dtoa_r+0x294>
 800d820:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d824:	46d1      	mov	r9, sl
 800d826:	4652      	mov	r2, sl
 800d828:	e7c6      	b.n	800d7b8 <_dtoa_r+0x240>
 800d82a:	3101      	adds	r1, #1
 800d82c:	6079      	str	r1, [r7, #4]
 800d82e:	0040      	lsls	r0, r0, #1
 800d830:	e7c6      	b.n	800d7c0 <_dtoa_r+0x248>
 800d832:	bf00      	nop
 800d834:	f3af 8000 	nop.w
 800d838:	636f4361 	.word	0x636f4361
 800d83c:	3fd287a7 	.word	0x3fd287a7
 800d840:	8b60c8b3 	.word	0x8b60c8b3
 800d844:	3fc68a28 	.word	0x3fc68a28
 800d848:	509f79fb 	.word	0x509f79fb
 800d84c:	3fd34413 	.word	0x3fd34413
 800d850:	0801021d 	.word	0x0801021d
 800d854:	08010234 	.word	0x08010234
 800d858:	7ff00000 	.word	0x7ff00000
 800d85c:	08010219 	.word	0x08010219
 800d860:	08010210 	.word	0x08010210
 800d864:	080101ed 	.word	0x080101ed
 800d868:	08010328 	.word	0x08010328
 800d86c:	0801028f 	.word	0x0801028f
 800d870:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d872:	9901      	ldr	r1, [sp, #4]
 800d874:	6011      	str	r1, [r2, #0]
 800d876:	f1b9 0f0e 	cmp.w	r9, #14
 800d87a:	d86c      	bhi.n	800d956 <_dtoa_r+0x3de>
 800d87c:	2c00      	cmp	r4, #0
 800d87e:	d06a      	beq.n	800d956 <_dtoa_r+0x3de>
 800d880:	f1bb 0f00 	cmp.w	fp, #0
 800d884:	f340 80a0 	ble.w	800d9c8 <_dtoa_r+0x450>
 800d888:	49c1      	ldr	r1, [pc, #772]	; (800db90 <_dtoa_r+0x618>)
 800d88a:	f00b 020f 	and.w	r2, fp, #15
 800d88e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d892:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d896:	ed92 7b00 	vldr	d7, [r2]
 800d89a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d89e:	f000 8087 	beq.w	800d9b0 <_dtoa_r+0x438>
 800d8a2:	4abc      	ldr	r2, [pc, #752]	; (800db94 <_dtoa_r+0x61c>)
 800d8a4:	ed92 6b08 	vldr	d6, [r2, #32]
 800d8a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d8ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d8b0:	f001 010f 	and.w	r1, r1, #15
 800d8b4:	2203      	movs	r2, #3
 800d8b6:	48b7      	ldr	r0, [pc, #732]	; (800db94 <_dtoa_r+0x61c>)
 800d8b8:	2900      	cmp	r1, #0
 800d8ba:	d17b      	bne.n	800d9b4 <_dtoa_r+0x43c>
 800d8bc:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d8c0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d8c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d8c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d8ca:	2900      	cmp	r1, #0
 800d8cc:	f000 80a2 	beq.w	800da14 <_dtoa_r+0x49c>
 800d8d0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d8d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8e0:	f140 8098 	bpl.w	800da14 <_dtoa_r+0x49c>
 800d8e4:	f1b9 0f00 	cmp.w	r9, #0
 800d8e8:	f000 8094 	beq.w	800da14 <_dtoa_r+0x49c>
 800d8ec:	f1ba 0f00 	cmp.w	sl, #0
 800d8f0:	dd2f      	ble.n	800d952 <_dtoa_r+0x3da>
 800d8f2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d8f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d8fa:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d8fe:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d902:	3201      	adds	r2, #1
 800d904:	4650      	mov	r0, sl
 800d906:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d90a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d90e:	ee07 2a90 	vmov	s15, r2
 800d912:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d916:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d91a:	ee15 4a90 	vmov	r4, s11
 800d91e:	ec52 1b15 	vmov	r1, r2, d5
 800d922:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d926:	2800      	cmp	r0, #0
 800d928:	d177      	bne.n	800da1a <_dtoa_r+0x4a2>
 800d92a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d92e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d932:	ec42 1b17 	vmov	d7, r1, r2
 800d936:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d93e:	f300 8263 	bgt.w	800de08 <_dtoa_r+0x890>
 800d942:	eeb1 7b47 	vneg.f64	d7, d7
 800d946:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d94e:	f100 8258 	bmi.w	800de02 <_dtoa_r+0x88a>
 800d952:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d956:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d958:	2a00      	cmp	r2, #0
 800d95a:	f2c0 811d 	blt.w	800db98 <_dtoa_r+0x620>
 800d95e:	f1bb 0f0e 	cmp.w	fp, #14
 800d962:	f300 8119 	bgt.w	800db98 <_dtoa_r+0x620>
 800d966:	4b8a      	ldr	r3, [pc, #552]	; (800db90 <_dtoa_r+0x618>)
 800d968:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d96c:	ed93 6b00 	vldr	d6, [r3]
 800d970:	9b08      	ldr	r3, [sp, #32]
 800d972:	2b00      	cmp	r3, #0
 800d974:	f280 80b7 	bge.w	800dae6 <_dtoa_r+0x56e>
 800d978:	f1b9 0f00 	cmp.w	r9, #0
 800d97c:	f300 80b3 	bgt.w	800dae6 <_dtoa_r+0x56e>
 800d980:	f040 823f 	bne.w	800de02 <_dtoa_r+0x88a>
 800d984:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d988:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d98c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d990:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d998:	464c      	mov	r4, r9
 800d99a:	464f      	mov	r7, r9
 800d99c:	f280 8215 	bge.w	800ddca <_dtoa_r+0x852>
 800d9a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d9a4:	2331      	movs	r3, #49	; 0x31
 800d9a6:	f808 3b01 	strb.w	r3, [r8], #1
 800d9aa:	f10b 0b01 	add.w	fp, fp, #1
 800d9ae:	e211      	b.n	800ddd4 <_dtoa_r+0x85c>
 800d9b0:	2202      	movs	r2, #2
 800d9b2:	e780      	b.n	800d8b6 <_dtoa_r+0x33e>
 800d9b4:	07cc      	lsls	r4, r1, #31
 800d9b6:	d504      	bpl.n	800d9c2 <_dtoa_r+0x44a>
 800d9b8:	ed90 6b00 	vldr	d6, [r0]
 800d9bc:	3201      	adds	r2, #1
 800d9be:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d9c2:	1049      	asrs	r1, r1, #1
 800d9c4:	3008      	adds	r0, #8
 800d9c6:	e777      	b.n	800d8b8 <_dtoa_r+0x340>
 800d9c8:	d022      	beq.n	800da10 <_dtoa_r+0x498>
 800d9ca:	f1cb 0100 	rsb	r1, fp, #0
 800d9ce:	4a70      	ldr	r2, [pc, #448]	; (800db90 <_dtoa_r+0x618>)
 800d9d0:	f001 000f 	and.w	r0, r1, #15
 800d9d4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d9d8:	ed92 7b00 	vldr	d7, [r2]
 800d9dc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d9e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d9e4:	486b      	ldr	r0, [pc, #428]	; (800db94 <_dtoa_r+0x61c>)
 800d9e6:	1109      	asrs	r1, r1, #4
 800d9e8:	2400      	movs	r4, #0
 800d9ea:	2202      	movs	r2, #2
 800d9ec:	b929      	cbnz	r1, 800d9fa <_dtoa_r+0x482>
 800d9ee:	2c00      	cmp	r4, #0
 800d9f0:	f43f af6a 	beq.w	800d8c8 <_dtoa_r+0x350>
 800d9f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d9f8:	e766      	b.n	800d8c8 <_dtoa_r+0x350>
 800d9fa:	07cf      	lsls	r7, r1, #31
 800d9fc:	d505      	bpl.n	800da0a <_dtoa_r+0x492>
 800d9fe:	ed90 6b00 	vldr	d6, [r0]
 800da02:	3201      	adds	r2, #1
 800da04:	2401      	movs	r4, #1
 800da06:	ee27 7b06 	vmul.f64	d7, d7, d6
 800da0a:	1049      	asrs	r1, r1, #1
 800da0c:	3008      	adds	r0, #8
 800da0e:	e7ed      	b.n	800d9ec <_dtoa_r+0x474>
 800da10:	2202      	movs	r2, #2
 800da12:	e759      	b.n	800d8c8 <_dtoa_r+0x350>
 800da14:	465f      	mov	r7, fp
 800da16:	4648      	mov	r0, r9
 800da18:	e775      	b.n	800d906 <_dtoa_r+0x38e>
 800da1a:	ec42 1b17 	vmov	d7, r1, r2
 800da1e:	4a5c      	ldr	r2, [pc, #368]	; (800db90 <_dtoa_r+0x618>)
 800da20:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800da24:	ed12 4b02 	vldr	d4, [r2, #-8]
 800da28:	9a01      	ldr	r2, [sp, #4]
 800da2a:	1814      	adds	r4, r2, r0
 800da2c:	9a07      	ldr	r2, [sp, #28]
 800da2e:	b352      	cbz	r2, 800da86 <_dtoa_r+0x50e>
 800da30:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800da34:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800da38:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800da3c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800da40:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800da44:	ee35 7b47 	vsub.f64	d7, d5, d7
 800da48:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800da4c:	ee14 2a90 	vmov	r2, s9
 800da50:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800da54:	3230      	adds	r2, #48	; 0x30
 800da56:	ee36 6b45 	vsub.f64	d6, d6, d5
 800da5a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da62:	f808 2b01 	strb.w	r2, [r8], #1
 800da66:	d439      	bmi.n	800dadc <_dtoa_r+0x564>
 800da68:	ee32 5b46 	vsub.f64	d5, d2, d6
 800da6c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800da70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da74:	d472      	bmi.n	800db5c <_dtoa_r+0x5e4>
 800da76:	45a0      	cmp	r8, r4
 800da78:	f43f af6b 	beq.w	800d952 <_dtoa_r+0x3da>
 800da7c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800da80:	ee26 6b03 	vmul.f64	d6, d6, d3
 800da84:	e7e0      	b.n	800da48 <_dtoa_r+0x4d0>
 800da86:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800da8a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800da8e:	4621      	mov	r1, r4
 800da90:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800da94:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800da98:	ee14 2a90 	vmov	r2, s9
 800da9c:	3230      	adds	r2, #48	; 0x30
 800da9e:	f808 2b01 	strb.w	r2, [r8], #1
 800daa2:	45a0      	cmp	r8, r4
 800daa4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800daa8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800daac:	d118      	bne.n	800dae0 <_dtoa_r+0x568>
 800daae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800dab2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800dab6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800daba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dabe:	dc4d      	bgt.n	800db5c <_dtoa_r+0x5e4>
 800dac0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dac4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dacc:	f57f af41 	bpl.w	800d952 <_dtoa_r+0x3da>
 800dad0:	4688      	mov	r8, r1
 800dad2:	3901      	subs	r1, #1
 800dad4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800dad8:	2b30      	cmp	r3, #48	; 0x30
 800dada:	d0f9      	beq.n	800dad0 <_dtoa_r+0x558>
 800dadc:	46bb      	mov	fp, r7
 800dade:	e02a      	b.n	800db36 <_dtoa_r+0x5be>
 800dae0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800dae4:	e7d6      	b.n	800da94 <_dtoa_r+0x51c>
 800dae6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800daea:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800daee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800daf2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800daf6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800dafa:	ee15 3a10 	vmov	r3, s10
 800dafe:	3330      	adds	r3, #48	; 0x30
 800db00:	f808 3b01 	strb.w	r3, [r8], #1
 800db04:	9b01      	ldr	r3, [sp, #4]
 800db06:	eba8 0303 	sub.w	r3, r8, r3
 800db0a:	4599      	cmp	r9, r3
 800db0c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800db10:	eea3 7b46 	vfms.f64	d7, d3, d6
 800db14:	d133      	bne.n	800db7e <_dtoa_r+0x606>
 800db16:	ee37 7b07 	vadd.f64	d7, d7, d7
 800db1a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800db1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db22:	dc1a      	bgt.n	800db5a <_dtoa_r+0x5e2>
 800db24:	eeb4 7b46 	vcmp.f64	d7, d6
 800db28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db2c:	d103      	bne.n	800db36 <_dtoa_r+0x5be>
 800db2e:	ee15 3a10 	vmov	r3, s10
 800db32:	07d9      	lsls	r1, r3, #31
 800db34:	d411      	bmi.n	800db5a <_dtoa_r+0x5e2>
 800db36:	4629      	mov	r1, r5
 800db38:	4630      	mov	r0, r6
 800db3a:	f000 fbb7 	bl	800e2ac <_Bfree>
 800db3e:	2300      	movs	r3, #0
 800db40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db42:	f888 3000 	strb.w	r3, [r8]
 800db46:	f10b 0301 	add.w	r3, fp, #1
 800db4a:	6013      	str	r3, [r2, #0]
 800db4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800db4e:	2b00      	cmp	r3, #0
 800db50:	f43f ad61 	beq.w	800d616 <_dtoa_r+0x9e>
 800db54:	f8c3 8000 	str.w	r8, [r3]
 800db58:	e55d      	b.n	800d616 <_dtoa_r+0x9e>
 800db5a:	465f      	mov	r7, fp
 800db5c:	4643      	mov	r3, r8
 800db5e:	4698      	mov	r8, r3
 800db60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db64:	2a39      	cmp	r2, #57	; 0x39
 800db66:	d106      	bne.n	800db76 <_dtoa_r+0x5fe>
 800db68:	9a01      	ldr	r2, [sp, #4]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d1f7      	bne.n	800db5e <_dtoa_r+0x5e6>
 800db6e:	9901      	ldr	r1, [sp, #4]
 800db70:	2230      	movs	r2, #48	; 0x30
 800db72:	3701      	adds	r7, #1
 800db74:	700a      	strb	r2, [r1, #0]
 800db76:	781a      	ldrb	r2, [r3, #0]
 800db78:	3201      	adds	r2, #1
 800db7a:	701a      	strb	r2, [r3, #0]
 800db7c:	e7ae      	b.n	800dadc <_dtoa_r+0x564>
 800db7e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800db82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800db86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db8a:	d1b2      	bne.n	800daf2 <_dtoa_r+0x57a>
 800db8c:	e7d3      	b.n	800db36 <_dtoa_r+0x5be>
 800db8e:	bf00      	nop
 800db90:	08010328 	.word	0x08010328
 800db94:	08010300 	.word	0x08010300
 800db98:	9907      	ldr	r1, [sp, #28]
 800db9a:	2900      	cmp	r1, #0
 800db9c:	f000 80d0 	beq.w	800dd40 <_dtoa_r+0x7c8>
 800dba0:	9906      	ldr	r1, [sp, #24]
 800dba2:	2901      	cmp	r1, #1
 800dba4:	f300 80b4 	bgt.w	800dd10 <_dtoa_r+0x798>
 800dba8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dbaa:	2900      	cmp	r1, #0
 800dbac:	f000 80ac 	beq.w	800dd08 <_dtoa_r+0x790>
 800dbb0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dbb4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800dbb8:	461c      	mov	r4, r3
 800dbba:	930a      	str	r3, [sp, #40]	; 0x28
 800dbbc:	9b04      	ldr	r3, [sp, #16]
 800dbbe:	4413      	add	r3, r2
 800dbc0:	9304      	str	r3, [sp, #16]
 800dbc2:	9b05      	ldr	r3, [sp, #20]
 800dbc4:	2101      	movs	r1, #1
 800dbc6:	4413      	add	r3, r2
 800dbc8:	4630      	mov	r0, r6
 800dbca:	9305      	str	r3, [sp, #20]
 800dbcc:	f000 fc26 	bl	800e41c <__i2b>
 800dbd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbd2:	4607      	mov	r7, r0
 800dbd4:	f1b8 0f00 	cmp.w	r8, #0
 800dbd8:	dd0d      	ble.n	800dbf6 <_dtoa_r+0x67e>
 800dbda:	9a05      	ldr	r2, [sp, #20]
 800dbdc:	2a00      	cmp	r2, #0
 800dbde:	dd0a      	ble.n	800dbf6 <_dtoa_r+0x67e>
 800dbe0:	4542      	cmp	r2, r8
 800dbe2:	9904      	ldr	r1, [sp, #16]
 800dbe4:	bfa8      	it	ge
 800dbe6:	4642      	movge	r2, r8
 800dbe8:	1a89      	subs	r1, r1, r2
 800dbea:	9104      	str	r1, [sp, #16]
 800dbec:	9905      	ldr	r1, [sp, #20]
 800dbee:	eba8 0802 	sub.w	r8, r8, r2
 800dbf2:	1a8a      	subs	r2, r1, r2
 800dbf4:	9205      	str	r2, [sp, #20]
 800dbf6:	b303      	cbz	r3, 800dc3a <_dtoa_r+0x6c2>
 800dbf8:	9a07      	ldr	r2, [sp, #28]
 800dbfa:	2a00      	cmp	r2, #0
 800dbfc:	f000 80a5 	beq.w	800dd4a <_dtoa_r+0x7d2>
 800dc00:	2c00      	cmp	r4, #0
 800dc02:	dd13      	ble.n	800dc2c <_dtoa_r+0x6b4>
 800dc04:	4639      	mov	r1, r7
 800dc06:	4622      	mov	r2, r4
 800dc08:	4630      	mov	r0, r6
 800dc0a:	930d      	str	r3, [sp, #52]	; 0x34
 800dc0c:	f000 fcc6 	bl	800e59c <__pow5mult>
 800dc10:	462a      	mov	r2, r5
 800dc12:	4601      	mov	r1, r0
 800dc14:	4607      	mov	r7, r0
 800dc16:	4630      	mov	r0, r6
 800dc18:	f000 fc16 	bl	800e448 <__multiply>
 800dc1c:	4629      	mov	r1, r5
 800dc1e:	900a      	str	r0, [sp, #40]	; 0x28
 800dc20:	4630      	mov	r0, r6
 800dc22:	f000 fb43 	bl	800e2ac <_Bfree>
 800dc26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc2a:	4615      	mov	r5, r2
 800dc2c:	1b1a      	subs	r2, r3, r4
 800dc2e:	d004      	beq.n	800dc3a <_dtoa_r+0x6c2>
 800dc30:	4629      	mov	r1, r5
 800dc32:	4630      	mov	r0, r6
 800dc34:	f000 fcb2 	bl	800e59c <__pow5mult>
 800dc38:	4605      	mov	r5, r0
 800dc3a:	2101      	movs	r1, #1
 800dc3c:	4630      	mov	r0, r6
 800dc3e:	f000 fbed 	bl	800e41c <__i2b>
 800dc42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	4604      	mov	r4, r0
 800dc48:	f340 8081 	ble.w	800dd4e <_dtoa_r+0x7d6>
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	4601      	mov	r1, r0
 800dc50:	4630      	mov	r0, r6
 800dc52:	f000 fca3 	bl	800e59c <__pow5mult>
 800dc56:	9b06      	ldr	r3, [sp, #24]
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	4604      	mov	r4, r0
 800dc5c:	dd7a      	ble.n	800dd54 <_dtoa_r+0x7dc>
 800dc5e:	2300      	movs	r3, #0
 800dc60:	930a      	str	r3, [sp, #40]	; 0x28
 800dc62:	6922      	ldr	r2, [r4, #16]
 800dc64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dc68:	6910      	ldr	r0, [r2, #16]
 800dc6a:	f000 fb87 	bl	800e37c <__hi0bits>
 800dc6e:	f1c0 0020 	rsb	r0, r0, #32
 800dc72:	9b05      	ldr	r3, [sp, #20]
 800dc74:	4418      	add	r0, r3
 800dc76:	f010 001f 	ands.w	r0, r0, #31
 800dc7a:	f000 808c 	beq.w	800dd96 <_dtoa_r+0x81e>
 800dc7e:	f1c0 0220 	rsb	r2, r0, #32
 800dc82:	2a04      	cmp	r2, #4
 800dc84:	f340 8085 	ble.w	800dd92 <_dtoa_r+0x81a>
 800dc88:	f1c0 001c 	rsb	r0, r0, #28
 800dc8c:	9b04      	ldr	r3, [sp, #16]
 800dc8e:	4403      	add	r3, r0
 800dc90:	9304      	str	r3, [sp, #16]
 800dc92:	9b05      	ldr	r3, [sp, #20]
 800dc94:	4403      	add	r3, r0
 800dc96:	4480      	add	r8, r0
 800dc98:	9305      	str	r3, [sp, #20]
 800dc9a:	9b04      	ldr	r3, [sp, #16]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	dd05      	ble.n	800dcac <_dtoa_r+0x734>
 800dca0:	4629      	mov	r1, r5
 800dca2:	461a      	mov	r2, r3
 800dca4:	4630      	mov	r0, r6
 800dca6:	f000 fcd3 	bl	800e650 <__lshift>
 800dcaa:	4605      	mov	r5, r0
 800dcac:	9b05      	ldr	r3, [sp, #20]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	dd05      	ble.n	800dcbe <_dtoa_r+0x746>
 800dcb2:	4621      	mov	r1, r4
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	f000 fcca 	bl	800e650 <__lshift>
 800dcbc:	4604      	mov	r4, r0
 800dcbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d06a      	beq.n	800dd9a <_dtoa_r+0x822>
 800dcc4:	4621      	mov	r1, r4
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	f000 fd32 	bl	800e730 <__mcmp>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	da64      	bge.n	800dd9a <_dtoa_r+0x822>
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	4629      	mov	r1, r5
 800dcd4:	220a      	movs	r2, #10
 800dcd6:	4630      	mov	r0, r6
 800dcd8:	f000 fb0a 	bl	800e2f0 <__multadd>
 800dcdc:	9b07      	ldr	r3, [sp, #28]
 800dcde:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dce2:	4605      	mov	r5, r0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	f000 8191 	beq.w	800e00c <_dtoa_r+0xa94>
 800dcea:	4639      	mov	r1, r7
 800dcec:	2300      	movs	r3, #0
 800dcee:	220a      	movs	r2, #10
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	f000 fafd 	bl	800e2f0 <__multadd>
 800dcf6:	f1ba 0f00 	cmp.w	sl, #0
 800dcfa:	4607      	mov	r7, r0
 800dcfc:	f300 808d 	bgt.w	800de1a <_dtoa_r+0x8a2>
 800dd00:	9b06      	ldr	r3, [sp, #24]
 800dd02:	2b02      	cmp	r3, #2
 800dd04:	dc50      	bgt.n	800dda8 <_dtoa_r+0x830>
 800dd06:	e088      	b.n	800de1a <_dtoa_r+0x8a2>
 800dd08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd0a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dd0e:	e751      	b.n	800dbb4 <_dtoa_r+0x63c>
 800dd10:	f109 34ff 	add.w	r4, r9, #4294967295
 800dd14:	42a3      	cmp	r3, r4
 800dd16:	bfbf      	itttt	lt
 800dd18:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800dd1a:	1ae3      	sublt	r3, r4, r3
 800dd1c:	18d2      	addlt	r2, r2, r3
 800dd1e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800dd20:	bfb6      	itet	lt
 800dd22:	4623      	movlt	r3, r4
 800dd24:	1b1c      	subge	r4, r3, r4
 800dd26:	2400      	movlt	r4, #0
 800dd28:	f1b9 0f00 	cmp.w	r9, #0
 800dd2c:	bfb5      	itete	lt
 800dd2e:	9a04      	ldrlt	r2, [sp, #16]
 800dd30:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800dd34:	eba2 0809 	sublt.w	r8, r2, r9
 800dd38:	464a      	movge	r2, r9
 800dd3a:	bfb8      	it	lt
 800dd3c:	2200      	movlt	r2, #0
 800dd3e:	e73c      	b.n	800dbba <_dtoa_r+0x642>
 800dd40:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800dd44:	9f07      	ldr	r7, [sp, #28]
 800dd46:	461c      	mov	r4, r3
 800dd48:	e744      	b.n	800dbd4 <_dtoa_r+0x65c>
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	e770      	b.n	800dc30 <_dtoa_r+0x6b8>
 800dd4e:	9b06      	ldr	r3, [sp, #24]
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	dc18      	bgt.n	800dd86 <_dtoa_r+0x80e>
 800dd54:	9b02      	ldr	r3, [sp, #8]
 800dd56:	b9b3      	cbnz	r3, 800dd86 <_dtoa_r+0x80e>
 800dd58:	9b03      	ldr	r3, [sp, #12]
 800dd5a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800dd5e:	b9a2      	cbnz	r2, 800dd8a <_dtoa_r+0x812>
 800dd60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800dd64:	0d12      	lsrs	r2, r2, #20
 800dd66:	0512      	lsls	r2, r2, #20
 800dd68:	b18a      	cbz	r2, 800dd8e <_dtoa_r+0x816>
 800dd6a:	9b04      	ldr	r3, [sp, #16]
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	9304      	str	r3, [sp, #16]
 800dd70:	9b05      	ldr	r3, [sp, #20]
 800dd72:	3301      	adds	r3, #1
 800dd74:	9305      	str	r3, [sp, #20]
 800dd76:	2301      	movs	r3, #1
 800dd78:	930a      	str	r3, [sp, #40]	; 0x28
 800dd7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	f47f af70 	bne.w	800dc62 <_dtoa_r+0x6ea>
 800dd82:	2001      	movs	r0, #1
 800dd84:	e775      	b.n	800dc72 <_dtoa_r+0x6fa>
 800dd86:	2300      	movs	r3, #0
 800dd88:	e7f6      	b.n	800dd78 <_dtoa_r+0x800>
 800dd8a:	9b02      	ldr	r3, [sp, #8]
 800dd8c:	e7f4      	b.n	800dd78 <_dtoa_r+0x800>
 800dd8e:	920a      	str	r2, [sp, #40]	; 0x28
 800dd90:	e7f3      	b.n	800dd7a <_dtoa_r+0x802>
 800dd92:	d082      	beq.n	800dc9a <_dtoa_r+0x722>
 800dd94:	4610      	mov	r0, r2
 800dd96:	301c      	adds	r0, #28
 800dd98:	e778      	b.n	800dc8c <_dtoa_r+0x714>
 800dd9a:	f1b9 0f00 	cmp.w	r9, #0
 800dd9e:	dc37      	bgt.n	800de10 <_dtoa_r+0x898>
 800dda0:	9b06      	ldr	r3, [sp, #24]
 800dda2:	2b02      	cmp	r3, #2
 800dda4:	dd34      	ble.n	800de10 <_dtoa_r+0x898>
 800dda6:	46ca      	mov	sl, r9
 800dda8:	f1ba 0f00 	cmp.w	sl, #0
 800ddac:	d10d      	bne.n	800ddca <_dtoa_r+0x852>
 800ddae:	4621      	mov	r1, r4
 800ddb0:	4653      	mov	r3, sl
 800ddb2:	2205      	movs	r2, #5
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	f000 fa9b 	bl	800e2f0 <__multadd>
 800ddba:	4601      	mov	r1, r0
 800ddbc:	4604      	mov	r4, r0
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	f000 fcb6 	bl	800e730 <__mcmp>
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	f73f adeb 	bgt.w	800d9a0 <_dtoa_r+0x428>
 800ddca:	9b08      	ldr	r3, [sp, #32]
 800ddcc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ddd0:	ea6f 0b03 	mvn.w	fp, r3
 800ddd4:	f04f 0900 	mov.w	r9, #0
 800ddd8:	4621      	mov	r1, r4
 800ddda:	4630      	mov	r0, r6
 800dddc:	f000 fa66 	bl	800e2ac <_Bfree>
 800dde0:	2f00      	cmp	r7, #0
 800dde2:	f43f aea8 	beq.w	800db36 <_dtoa_r+0x5be>
 800dde6:	f1b9 0f00 	cmp.w	r9, #0
 800ddea:	d005      	beq.n	800ddf8 <_dtoa_r+0x880>
 800ddec:	45b9      	cmp	r9, r7
 800ddee:	d003      	beq.n	800ddf8 <_dtoa_r+0x880>
 800ddf0:	4649      	mov	r1, r9
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	f000 fa5a 	bl	800e2ac <_Bfree>
 800ddf8:	4639      	mov	r1, r7
 800ddfa:	4630      	mov	r0, r6
 800ddfc:	f000 fa56 	bl	800e2ac <_Bfree>
 800de00:	e699      	b.n	800db36 <_dtoa_r+0x5be>
 800de02:	2400      	movs	r4, #0
 800de04:	4627      	mov	r7, r4
 800de06:	e7e0      	b.n	800ddca <_dtoa_r+0x852>
 800de08:	46bb      	mov	fp, r7
 800de0a:	4604      	mov	r4, r0
 800de0c:	4607      	mov	r7, r0
 800de0e:	e5c7      	b.n	800d9a0 <_dtoa_r+0x428>
 800de10:	9b07      	ldr	r3, [sp, #28]
 800de12:	46ca      	mov	sl, r9
 800de14:	2b00      	cmp	r3, #0
 800de16:	f000 8100 	beq.w	800e01a <_dtoa_r+0xaa2>
 800de1a:	f1b8 0f00 	cmp.w	r8, #0
 800de1e:	dd05      	ble.n	800de2c <_dtoa_r+0x8b4>
 800de20:	4639      	mov	r1, r7
 800de22:	4642      	mov	r2, r8
 800de24:	4630      	mov	r0, r6
 800de26:	f000 fc13 	bl	800e650 <__lshift>
 800de2a:	4607      	mov	r7, r0
 800de2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d05d      	beq.n	800deee <_dtoa_r+0x976>
 800de32:	6879      	ldr	r1, [r7, #4]
 800de34:	4630      	mov	r0, r6
 800de36:	f000 f9f9 	bl	800e22c <_Balloc>
 800de3a:	4680      	mov	r8, r0
 800de3c:	b928      	cbnz	r0, 800de4a <_dtoa_r+0x8d2>
 800de3e:	4b82      	ldr	r3, [pc, #520]	; (800e048 <_dtoa_r+0xad0>)
 800de40:	4602      	mov	r2, r0
 800de42:	f240 21ea 	movw	r1, #746	; 0x2ea
 800de46:	f7ff bbaf 	b.w	800d5a8 <_dtoa_r+0x30>
 800de4a:	693a      	ldr	r2, [r7, #16]
 800de4c:	3202      	adds	r2, #2
 800de4e:	0092      	lsls	r2, r2, #2
 800de50:	f107 010c 	add.w	r1, r7, #12
 800de54:	300c      	adds	r0, #12
 800de56:	f7fe fcfc 	bl	800c852 <memcpy>
 800de5a:	2201      	movs	r2, #1
 800de5c:	4641      	mov	r1, r8
 800de5e:	4630      	mov	r0, r6
 800de60:	f000 fbf6 	bl	800e650 <__lshift>
 800de64:	9b01      	ldr	r3, [sp, #4]
 800de66:	3301      	adds	r3, #1
 800de68:	9304      	str	r3, [sp, #16]
 800de6a:	9b01      	ldr	r3, [sp, #4]
 800de6c:	4453      	add	r3, sl
 800de6e:	9308      	str	r3, [sp, #32]
 800de70:	9b02      	ldr	r3, [sp, #8]
 800de72:	f003 0301 	and.w	r3, r3, #1
 800de76:	46b9      	mov	r9, r7
 800de78:	9307      	str	r3, [sp, #28]
 800de7a:	4607      	mov	r7, r0
 800de7c:	9b04      	ldr	r3, [sp, #16]
 800de7e:	4621      	mov	r1, r4
 800de80:	3b01      	subs	r3, #1
 800de82:	4628      	mov	r0, r5
 800de84:	9302      	str	r3, [sp, #8]
 800de86:	f7ff fae9 	bl	800d45c <quorem>
 800de8a:	4603      	mov	r3, r0
 800de8c:	3330      	adds	r3, #48	; 0x30
 800de8e:	9005      	str	r0, [sp, #20]
 800de90:	4649      	mov	r1, r9
 800de92:	4628      	mov	r0, r5
 800de94:	9309      	str	r3, [sp, #36]	; 0x24
 800de96:	f000 fc4b 	bl	800e730 <__mcmp>
 800de9a:	463a      	mov	r2, r7
 800de9c:	4682      	mov	sl, r0
 800de9e:	4621      	mov	r1, r4
 800dea0:	4630      	mov	r0, r6
 800dea2:	f000 fc61 	bl	800e768 <__mdiff>
 800dea6:	68c2      	ldr	r2, [r0, #12]
 800dea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deaa:	4680      	mov	r8, r0
 800deac:	bb0a      	cbnz	r2, 800def2 <_dtoa_r+0x97a>
 800deae:	4601      	mov	r1, r0
 800deb0:	4628      	mov	r0, r5
 800deb2:	f000 fc3d 	bl	800e730 <__mcmp>
 800deb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deb8:	4602      	mov	r2, r0
 800deba:	4641      	mov	r1, r8
 800debc:	4630      	mov	r0, r6
 800debe:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800dec2:	f000 f9f3 	bl	800e2ac <_Bfree>
 800dec6:	9b06      	ldr	r3, [sp, #24]
 800dec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800deca:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800dece:	ea43 0102 	orr.w	r1, r3, r2
 800ded2:	9b07      	ldr	r3, [sp, #28]
 800ded4:	430b      	orrs	r3, r1
 800ded6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ded8:	d10d      	bne.n	800def6 <_dtoa_r+0x97e>
 800deda:	2b39      	cmp	r3, #57	; 0x39
 800dedc:	d029      	beq.n	800df32 <_dtoa_r+0x9ba>
 800dede:	f1ba 0f00 	cmp.w	sl, #0
 800dee2:	dd01      	ble.n	800dee8 <_dtoa_r+0x970>
 800dee4:	9b05      	ldr	r3, [sp, #20]
 800dee6:	3331      	adds	r3, #49	; 0x31
 800dee8:	9a02      	ldr	r2, [sp, #8]
 800deea:	7013      	strb	r3, [r2, #0]
 800deec:	e774      	b.n	800ddd8 <_dtoa_r+0x860>
 800deee:	4638      	mov	r0, r7
 800def0:	e7b8      	b.n	800de64 <_dtoa_r+0x8ec>
 800def2:	2201      	movs	r2, #1
 800def4:	e7e1      	b.n	800deba <_dtoa_r+0x942>
 800def6:	f1ba 0f00 	cmp.w	sl, #0
 800defa:	db06      	blt.n	800df0a <_dtoa_r+0x992>
 800defc:	9906      	ldr	r1, [sp, #24]
 800defe:	ea41 0a0a 	orr.w	sl, r1, sl
 800df02:	9907      	ldr	r1, [sp, #28]
 800df04:	ea5a 0101 	orrs.w	r1, sl, r1
 800df08:	d120      	bne.n	800df4c <_dtoa_r+0x9d4>
 800df0a:	2a00      	cmp	r2, #0
 800df0c:	ddec      	ble.n	800dee8 <_dtoa_r+0x970>
 800df0e:	4629      	mov	r1, r5
 800df10:	2201      	movs	r2, #1
 800df12:	4630      	mov	r0, r6
 800df14:	9304      	str	r3, [sp, #16]
 800df16:	f000 fb9b 	bl	800e650 <__lshift>
 800df1a:	4621      	mov	r1, r4
 800df1c:	4605      	mov	r5, r0
 800df1e:	f000 fc07 	bl	800e730 <__mcmp>
 800df22:	2800      	cmp	r0, #0
 800df24:	9b04      	ldr	r3, [sp, #16]
 800df26:	dc02      	bgt.n	800df2e <_dtoa_r+0x9b6>
 800df28:	d1de      	bne.n	800dee8 <_dtoa_r+0x970>
 800df2a:	07da      	lsls	r2, r3, #31
 800df2c:	d5dc      	bpl.n	800dee8 <_dtoa_r+0x970>
 800df2e:	2b39      	cmp	r3, #57	; 0x39
 800df30:	d1d8      	bne.n	800dee4 <_dtoa_r+0x96c>
 800df32:	9a02      	ldr	r2, [sp, #8]
 800df34:	2339      	movs	r3, #57	; 0x39
 800df36:	7013      	strb	r3, [r2, #0]
 800df38:	4643      	mov	r3, r8
 800df3a:	4698      	mov	r8, r3
 800df3c:	3b01      	subs	r3, #1
 800df3e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800df42:	2a39      	cmp	r2, #57	; 0x39
 800df44:	d051      	beq.n	800dfea <_dtoa_r+0xa72>
 800df46:	3201      	adds	r2, #1
 800df48:	701a      	strb	r2, [r3, #0]
 800df4a:	e745      	b.n	800ddd8 <_dtoa_r+0x860>
 800df4c:	2a00      	cmp	r2, #0
 800df4e:	dd03      	ble.n	800df58 <_dtoa_r+0x9e0>
 800df50:	2b39      	cmp	r3, #57	; 0x39
 800df52:	d0ee      	beq.n	800df32 <_dtoa_r+0x9ba>
 800df54:	3301      	adds	r3, #1
 800df56:	e7c7      	b.n	800dee8 <_dtoa_r+0x970>
 800df58:	9a04      	ldr	r2, [sp, #16]
 800df5a:	9908      	ldr	r1, [sp, #32]
 800df5c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800df60:	428a      	cmp	r2, r1
 800df62:	d02b      	beq.n	800dfbc <_dtoa_r+0xa44>
 800df64:	4629      	mov	r1, r5
 800df66:	2300      	movs	r3, #0
 800df68:	220a      	movs	r2, #10
 800df6a:	4630      	mov	r0, r6
 800df6c:	f000 f9c0 	bl	800e2f0 <__multadd>
 800df70:	45b9      	cmp	r9, r7
 800df72:	4605      	mov	r5, r0
 800df74:	f04f 0300 	mov.w	r3, #0
 800df78:	f04f 020a 	mov.w	r2, #10
 800df7c:	4649      	mov	r1, r9
 800df7e:	4630      	mov	r0, r6
 800df80:	d107      	bne.n	800df92 <_dtoa_r+0xa1a>
 800df82:	f000 f9b5 	bl	800e2f0 <__multadd>
 800df86:	4681      	mov	r9, r0
 800df88:	4607      	mov	r7, r0
 800df8a:	9b04      	ldr	r3, [sp, #16]
 800df8c:	3301      	adds	r3, #1
 800df8e:	9304      	str	r3, [sp, #16]
 800df90:	e774      	b.n	800de7c <_dtoa_r+0x904>
 800df92:	f000 f9ad 	bl	800e2f0 <__multadd>
 800df96:	4639      	mov	r1, r7
 800df98:	4681      	mov	r9, r0
 800df9a:	2300      	movs	r3, #0
 800df9c:	220a      	movs	r2, #10
 800df9e:	4630      	mov	r0, r6
 800dfa0:	f000 f9a6 	bl	800e2f0 <__multadd>
 800dfa4:	4607      	mov	r7, r0
 800dfa6:	e7f0      	b.n	800df8a <_dtoa_r+0xa12>
 800dfa8:	f1ba 0f00 	cmp.w	sl, #0
 800dfac:	9a01      	ldr	r2, [sp, #4]
 800dfae:	bfcc      	ite	gt
 800dfb0:	46d0      	movgt	r8, sl
 800dfb2:	f04f 0801 	movle.w	r8, #1
 800dfb6:	4490      	add	r8, r2
 800dfb8:	f04f 0900 	mov.w	r9, #0
 800dfbc:	4629      	mov	r1, r5
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	4630      	mov	r0, r6
 800dfc2:	9302      	str	r3, [sp, #8]
 800dfc4:	f000 fb44 	bl	800e650 <__lshift>
 800dfc8:	4621      	mov	r1, r4
 800dfca:	4605      	mov	r5, r0
 800dfcc:	f000 fbb0 	bl	800e730 <__mcmp>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	dcb1      	bgt.n	800df38 <_dtoa_r+0x9c0>
 800dfd4:	d102      	bne.n	800dfdc <_dtoa_r+0xa64>
 800dfd6:	9b02      	ldr	r3, [sp, #8]
 800dfd8:	07db      	lsls	r3, r3, #31
 800dfda:	d4ad      	bmi.n	800df38 <_dtoa_r+0x9c0>
 800dfdc:	4643      	mov	r3, r8
 800dfde:	4698      	mov	r8, r3
 800dfe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfe4:	2a30      	cmp	r2, #48	; 0x30
 800dfe6:	d0fa      	beq.n	800dfde <_dtoa_r+0xa66>
 800dfe8:	e6f6      	b.n	800ddd8 <_dtoa_r+0x860>
 800dfea:	9a01      	ldr	r2, [sp, #4]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d1a4      	bne.n	800df3a <_dtoa_r+0x9c2>
 800dff0:	f10b 0b01 	add.w	fp, fp, #1
 800dff4:	2331      	movs	r3, #49	; 0x31
 800dff6:	e778      	b.n	800deea <_dtoa_r+0x972>
 800dff8:	4b14      	ldr	r3, [pc, #80]	; (800e04c <_dtoa_r+0xad4>)
 800dffa:	f7ff bb27 	b.w	800d64c <_dtoa_r+0xd4>
 800dffe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e000:	2b00      	cmp	r3, #0
 800e002:	f47f ab03 	bne.w	800d60c <_dtoa_r+0x94>
 800e006:	4b12      	ldr	r3, [pc, #72]	; (800e050 <_dtoa_r+0xad8>)
 800e008:	f7ff bb20 	b.w	800d64c <_dtoa_r+0xd4>
 800e00c:	f1ba 0f00 	cmp.w	sl, #0
 800e010:	dc03      	bgt.n	800e01a <_dtoa_r+0xaa2>
 800e012:	9b06      	ldr	r3, [sp, #24]
 800e014:	2b02      	cmp	r3, #2
 800e016:	f73f aec7 	bgt.w	800dda8 <_dtoa_r+0x830>
 800e01a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e01e:	4621      	mov	r1, r4
 800e020:	4628      	mov	r0, r5
 800e022:	f7ff fa1b 	bl	800d45c <quorem>
 800e026:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e02a:	f808 3b01 	strb.w	r3, [r8], #1
 800e02e:	9a01      	ldr	r2, [sp, #4]
 800e030:	eba8 0202 	sub.w	r2, r8, r2
 800e034:	4592      	cmp	sl, r2
 800e036:	ddb7      	ble.n	800dfa8 <_dtoa_r+0xa30>
 800e038:	4629      	mov	r1, r5
 800e03a:	2300      	movs	r3, #0
 800e03c:	220a      	movs	r2, #10
 800e03e:	4630      	mov	r0, r6
 800e040:	f000 f956 	bl	800e2f0 <__multadd>
 800e044:	4605      	mov	r5, r0
 800e046:	e7ea      	b.n	800e01e <_dtoa_r+0xaa6>
 800e048:	0801028f 	.word	0x0801028f
 800e04c:	080101ec 	.word	0x080101ec
 800e050:	08010210 	.word	0x08010210

0800e054 <__sflush_r>:
 800e054:	898a      	ldrh	r2, [r1, #12]
 800e056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e05a:	4605      	mov	r5, r0
 800e05c:	0710      	lsls	r0, r2, #28
 800e05e:	460c      	mov	r4, r1
 800e060:	d458      	bmi.n	800e114 <__sflush_r+0xc0>
 800e062:	684b      	ldr	r3, [r1, #4]
 800e064:	2b00      	cmp	r3, #0
 800e066:	dc05      	bgt.n	800e074 <__sflush_r+0x20>
 800e068:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	dc02      	bgt.n	800e074 <__sflush_r+0x20>
 800e06e:	2000      	movs	r0, #0
 800e070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e076:	2e00      	cmp	r6, #0
 800e078:	d0f9      	beq.n	800e06e <__sflush_r+0x1a>
 800e07a:	2300      	movs	r3, #0
 800e07c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e080:	682f      	ldr	r7, [r5, #0]
 800e082:	602b      	str	r3, [r5, #0]
 800e084:	d032      	beq.n	800e0ec <__sflush_r+0x98>
 800e086:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e088:	89a3      	ldrh	r3, [r4, #12]
 800e08a:	075a      	lsls	r2, r3, #29
 800e08c:	d505      	bpl.n	800e09a <__sflush_r+0x46>
 800e08e:	6863      	ldr	r3, [r4, #4]
 800e090:	1ac0      	subs	r0, r0, r3
 800e092:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e094:	b10b      	cbz	r3, 800e09a <__sflush_r+0x46>
 800e096:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e098:	1ac0      	subs	r0, r0, r3
 800e09a:	2300      	movs	r3, #0
 800e09c:	4602      	mov	r2, r0
 800e09e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0a0:	6a21      	ldr	r1, [r4, #32]
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	47b0      	blx	r6
 800e0a6:	1c43      	adds	r3, r0, #1
 800e0a8:	89a3      	ldrh	r3, [r4, #12]
 800e0aa:	d106      	bne.n	800e0ba <__sflush_r+0x66>
 800e0ac:	6829      	ldr	r1, [r5, #0]
 800e0ae:	291d      	cmp	r1, #29
 800e0b0:	d82c      	bhi.n	800e10c <__sflush_r+0xb8>
 800e0b2:	4a2a      	ldr	r2, [pc, #168]	; (800e15c <__sflush_r+0x108>)
 800e0b4:	40ca      	lsrs	r2, r1
 800e0b6:	07d6      	lsls	r6, r2, #31
 800e0b8:	d528      	bpl.n	800e10c <__sflush_r+0xb8>
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	6062      	str	r2, [r4, #4]
 800e0be:	04d9      	lsls	r1, r3, #19
 800e0c0:	6922      	ldr	r2, [r4, #16]
 800e0c2:	6022      	str	r2, [r4, #0]
 800e0c4:	d504      	bpl.n	800e0d0 <__sflush_r+0x7c>
 800e0c6:	1c42      	adds	r2, r0, #1
 800e0c8:	d101      	bne.n	800e0ce <__sflush_r+0x7a>
 800e0ca:	682b      	ldr	r3, [r5, #0]
 800e0cc:	b903      	cbnz	r3, 800e0d0 <__sflush_r+0x7c>
 800e0ce:	6560      	str	r0, [r4, #84]	; 0x54
 800e0d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0d2:	602f      	str	r7, [r5, #0]
 800e0d4:	2900      	cmp	r1, #0
 800e0d6:	d0ca      	beq.n	800e06e <__sflush_r+0x1a>
 800e0d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0dc:	4299      	cmp	r1, r3
 800e0de:	d002      	beq.n	800e0e6 <__sflush_r+0x92>
 800e0e0:	4628      	mov	r0, r5
 800e0e2:	f000 fc3d 	bl	800e960 <_free_r>
 800e0e6:	2000      	movs	r0, #0
 800e0e8:	6360      	str	r0, [r4, #52]	; 0x34
 800e0ea:	e7c1      	b.n	800e070 <__sflush_r+0x1c>
 800e0ec:	6a21      	ldr	r1, [r4, #32]
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	47b0      	blx	r6
 800e0f4:	1c41      	adds	r1, r0, #1
 800e0f6:	d1c7      	bne.n	800e088 <__sflush_r+0x34>
 800e0f8:	682b      	ldr	r3, [r5, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d0c4      	beq.n	800e088 <__sflush_r+0x34>
 800e0fe:	2b1d      	cmp	r3, #29
 800e100:	d001      	beq.n	800e106 <__sflush_r+0xb2>
 800e102:	2b16      	cmp	r3, #22
 800e104:	d101      	bne.n	800e10a <__sflush_r+0xb6>
 800e106:	602f      	str	r7, [r5, #0]
 800e108:	e7b1      	b.n	800e06e <__sflush_r+0x1a>
 800e10a:	89a3      	ldrh	r3, [r4, #12]
 800e10c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e110:	81a3      	strh	r3, [r4, #12]
 800e112:	e7ad      	b.n	800e070 <__sflush_r+0x1c>
 800e114:	690f      	ldr	r7, [r1, #16]
 800e116:	2f00      	cmp	r7, #0
 800e118:	d0a9      	beq.n	800e06e <__sflush_r+0x1a>
 800e11a:	0793      	lsls	r3, r2, #30
 800e11c:	680e      	ldr	r6, [r1, #0]
 800e11e:	bf08      	it	eq
 800e120:	694b      	ldreq	r3, [r1, #20]
 800e122:	600f      	str	r7, [r1, #0]
 800e124:	bf18      	it	ne
 800e126:	2300      	movne	r3, #0
 800e128:	eba6 0807 	sub.w	r8, r6, r7
 800e12c:	608b      	str	r3, [r1, #8]
 800e12e:	f1b8 0f00 	cmp.w	r8, #0
 800e132:	dd9c      	ble.n	800e06e <__sflush_r+0x1a>
 800e134:	6a21      	ldr	r1, [r4, #32]
 800e136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e138:	4643      	mov	r3, r8
 800e13a:	463a      	mov	r2, r7
 800e13c:	4628      	mov	r0, r5
 800e13e:	47b0      	blx	r6
 800e140:	2800      	cmp	r0, #0
 800e142:	dc06      	bgt.n	800e152 <__sflush_r+0xfe>
 800e144:	89a3      	ldrh	r3, [r4, #12]
 800e146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e14a:	81a3      	strh	r3, [r4, #12]
 800e14c:	f04f 30ff 	mov.w	r0, #4294967295
 800e150:	e78e      	b.n	800e070 <__sflush_r+0x1c>
 800e152:	4407      	add	r7, r0
 800e154:	eba8 0800 	sub.w	r8, r8, r0
 800e158:	e7e9      	b.n	800e12e <__sflush_r+0xda>
 800e15a:	bf00      	nop
 800e15c:	20400001 	.word	0x20400001

0800e160 <_fflush_r>:
 800e160:	b538      	push	{r3, r4, r5, lr}
 800e162:	690b      	ldr	r3, [r1, #16]
 800e164:	4605      	mov	r5, r0
 800e166:	460c      	mov	r4, r1
 800e168:	b913      	cbnz	r3, 800e170 <_fflush_r+0x10>
 800e16a:	2500      	movs	r5, #0
 800e16c:	4628      	mov	r0, r5
 800e16e:	bd38      	pop	{r3, r4, r5, pc}
 800e170:	b118      	cbz	r0, 800e17a <_fflush_r+0x1a>
 800e172:	6983      	ldr	r3, [r0, #24]
 800e174:	b90b      	cbnz	r3, 800e17a <_fflush_r+0x1a>
 800e176:	f7fe faa7 	bl	800c6c8 <__sinit>
 800e17a:	4b14      	ldr	r3, [pc, #80]	; (800e1cc <_fflush_r+0x6c>)
 800e17c:	429c      	cmp	r4, r3
 800e17e:	d11b      	bne.n	800e1b8 <_fflush_r+0x58>
 800e180:	686c      	ldr	r4, [r5, #4]
 800e182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d0ef      	beq.n	800e16a <_fflush_r+0xa>
 800e18a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e18c:	07d0      	lsls	r0, r2, #31
 800e18e:	d404      	bmi.n	800e19a <_fflush_r+0x3a>
 800e190:	0599      	lsls	r1, r3, #22
 800e192:	d402      	bmi.n	800e19a <_fflush_r+0x3a>
 800e194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e196:	f7fe fb5a 	bl	800c84e <__retarget_lock_acquire_recursive>
 800e19a:	4628      	mov	r0, r5
 800e19c:	4621      	mov	r1, r4
 800e19e:	f7ff ff59 	bl	800e054 <__sflush_r>
 800e1a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1a4:	07da      	lsls	r2, r3, #31
 800e1a6:	4605      	mov	r5, r0
 800e1a8:	d4e0      	bmi.n	800e16c <_fflush_r+0xc>
 800e1aa:	89a3      	ldrh	r3, [r4, #12]
 800e1ac:	059b      	lsls	r3, r3, #22
 800e1ae:	d4dd      	bmi.n	800e16c <_fflush_r+0xc>
 800e1b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1b2:	f7fe fb4d 	bl	800c850 <__retarget_lock_release_recursive>
 800e1b6:	e7d9      	b.n	800e16c <_fflush_r+0xc>
 800e1b8:	4b05      	ldr	r3, [pc, #20]	; (800e1d0 <_fflush_r+0x70>)
 800e1ba:	429c      	cmp	r4, r3
 800e1bc:	d101      	bne.n	800e1c2 <_fflush_r+0x62>
 800e1be:	68ac      	ldr	r4, [r5, #8]
 800e1c0:	e7df      	b.n	800e182 <_fflush_r+0x22>
 800e1c2:	4b04      	ldr	r3, [pc, #16]	; (800e1d4 <_fflush_r+0x74>)
 800e1c4:	429c      	cmp	r4, r3
 800e1c6:	bf08      	it	eq
 800e1c8:	68ec      	ldreq	r4, [r5, #12]
 800e1ca:	e7da      	b.n	800e182 <_fflush_r+0x22>
 800e1cc:	08010198 	.word	0x08010198
 800e1d0:	080101b8 	.word	0x080101b8
 800e1d4:	08010178 	.word	0x08010178

0800e1d8 <_localeconv_r>:
 800e1d8:	4800      	ldr	r0, [pc, #0]	; (800e1dc <_localeconv_r+0x4>)
 800e1da:	4770      	bx	lr
 800e1dc:	24000180 	.word	0x24000180

0800e1e0 <_lseek_r>:
 800e1e0:	b538      	push	{r3, r4, r5, lr}
 800e1e2:	4d07      	ldr	r5, [pc, #28]	; (800e200 <_lseek_r+0x20>)
 800e1e4:	4604      	mov	r4, r0
 800e1e6:	4608      	mov	r0, r1
 800e1e8:	4611      	mov	r1, r2
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	602a      	str	r2, [r5, #0]
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	f7f4 fe3c 	bl	8002e6c <_lseek>
 800e1f4:	1c43      	adds	r3, r0, #1
 800e1f6:	d102      	bne.n	800e1fe <_lseek_r+0x1e>
 800e1f8:	682b      	ldr	r3, [r5, #0]
 800e1fa:	b103      	cbz	r3, 800e1fe <_lseek_r+0x1e>
 800e1fc:	6023      	str	r3, [r4, #0]
 800e1fe:	bd38      	pop	{r3, r4, r5, pc}
 800e200:	240050cc 	.word	0x240050cc

0800e204 <malloc>:
 800e204:	4b02      	ldr	r3, [pc, #8]	; (800e210 <malloc+0xc>)
 800e206:	4601      	mov	r1, r0
 800e208:	6818      	ldr	r0, [r3, #0]
 800e20a:	f7fe bb59 	b.w	800c8c0 <_malloc_r>
 800e20e:	bf00      	nop
 800e210:	2400002c 	.word	0x2400002c

0800e214 <__malloc_lock>:
 800e214:	4801      	ldr	r0, [pc, #4]	; (800e21c <__malloc_lock+0x8>)
 800e216:	f7fe bb1a 	b.w	800c84e <__retarget_lock_acquire_recursive>
 800e21a:	bf00      	nop
 800e21c:	240050c0 	.word	0x240050c0

0800e220 <__malloc_unlock>:
 800e220:	4801      	ldr	r0, [pc, #4]	; (800e228 <__malloc_unlock+0x8>)
 800e222:	f7fe bb15 	b.w	800c850 <__retarget_lock_release_recursive>
 800e226:	bf00      	nop
 800e228:	240050c0 	.word	0x240050c0

0800e22c <_Balloc>:
 800e22c:	b570      	push	{r4, r5, r6, lr}
 800e22e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e230:	4604      	mov	r4, r0
 800e232:	460d      	mov	r5, r1
 800e234:	b976      	cbnz	r6, 800e254 <_Balloc+0x28>
 800e236:	2010      	movs	r0, #16
 800e238:	f7ff ffe4 	bl	800e204 <malloc>
 800e23c:	4602      	mov	r2, r0
 800e23e:	6260      	str	r0, [r4, #36]	; 0x24
 800e240:	b920      	cbnz	r0, 800e24c <_Balloc+0x20>
 800e242:	4b18      	ldr	r3, [pc, #96]	; (800e2a4 <_Balloc+0x78>)
 800e244:	4818      	ldr	r0, [pc, #96]	; (800e2a8 <_Balloc+0x7c>)
 800e246:	2166      	movs	r1, #102	; 0x66
 800e248:	f000 ff5e 	bl	800f108 <__assert_func>
 800e24c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e250:	6006      	str	r6, [r0, #0]
 800e252:	60c6      	str	r6, [r0, #12]
 800e254:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e256:	68f3      	ldr	r3, [r6, #12]
 800e258:	b183      	cbz	r3, 800e27c <_Balloc+0x50>
 800e25a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e262:	b9b8      	cbnz	r0, 800e294 <_Balloc+0x68>
 800e264:	2101      	movs	r1, #1
 800e266:	fa01 f605 	lsl.w	r6, r1, r5
 800e26a:	1d72      	adds	r2, r6, #5
 800e26c:	0092      	lsls	r2, r2, #2
 800e26e:	4620      	mov	r0, r4
 800e270:	f000 fb60 	bl	800e934 <_calloc_r>
 800e274:	b160      	cbz	r0, 800e290 <_Balloc+0x64>
 800e276:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e27a:	e00e      	b.n	800e29a <_Balloc+0x6e>
 800e27c:	2221      	movs	r2, #33	; 0x21
 800e27e:	2104      	movs	r1, #4
 800e280:	4620      	mov	r0, r4
 800e282:	f000 fb57 	bl	800e934 <_calloc_r>
 800e286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e288:	60f0      	str	r0, [r6, #12]
 800e28a:	68db      	ldr	r3, [r3, #12]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d1e4      	bne.n	800e25a <_Balloc+0x2e>
 800e290:	2000      	movs	r0, #0
 800e292:	bd70      	pop	{r4, r5, r6, pc}
 800e294:	6802      	ldr	r2, [r0, #0]
 800e296:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e29a:	2300      	movs	r3, #0
 800e29c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e2a0:	e7f7      	b.n	800e292 <_Balloc+0x66>
 800e2a2:	bf00      	nop
 800e2a4:	0801021d 	.word	0x0801021d
 800e2a8:	080102a0 	.word	0x080102a0

0800e2ac <_Bfree>:
 800e2ac:	b570      	push	{r4, r5, r6, lr}
 800e2ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e2b0:	4605      	mov	r5, r0
 800e2b2:	460c      	mov	r4, r1
 800e2b4:	b976      	cbnz	r6, 800e2d4 <_Bfree+0x28>
 800e2b6:	2010      	movs	r0, #16
 800e2b8:	f7ff ffa4 	bl	800e204 <malloc>
 800e2bc:	4602      	mov	r2, r0
 800e2be:	6268      	str	r0, [r5, #36]	; 0x24
 800e2c0:	b920      	cbnz	r0, 800e2cc <_Bfree+0x20>
 800e2c2:	4b09      	ldr	r3, [pc, #36]	; (800e2e8 <_Bfree+0x3c>)
 800e2c4:	4809      	ldr	r0, [pc, #36]	; (800e2ec <_Bfree+0x40>)
 800e2c6:	218a      	movs	r1, #138	; 0x8a
 800e2c8:	f000 ff1e 	bl	800f108 <__assert_func>
 800e2cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2d0:	6006      	str	r6, [r0, #0]
 800e2d2:	60c6      	str	r6, [r0, #12]
 800e2d4:	b13c      	cbz	r4, 800e2e6 <_Bfree+0x3a>
 800e2d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e2d8:	6862      	ldr	r2, [r4, #4]
 800e2da:	68db      	ldr	r3, [r3, #12]
 800e2dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e2e0:	6021      	str	r1, [r4, #0]
 800e2e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e2e6:	bd70      	pop	{r4, r5, r6, pc}
 800e2e8:	0801021d 	.word	0x0801021d
 800e2ec:	080102a0 	.word	0x080102a0

0800e2f0 <__multadd>:
 800e2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2f4:	690d      	ldr	r5, [r1, #16]
 800e2f6:	4607      	mov	r7, r0
 800e2f8:	460c      	mov	r4, r1
 800e2fa:	461e      	mov	r6, r3
 800e2fc:	f101 0c14 	add.w	ip, r1, #20
 800e300:	2000      	movs	r0, #0
 800e302:	f8dc 3000 	ldr.w	r3, [ip]
 800e306:	b299      	uxth	r1, r3
 800e308:	fb02 6101 	mla	r1, r2, r1, r6
 800e30c:	0c1e      	lsrs	r6, r3, #16
 800e30e:	0c0b      	lsrs	r3, r1, #16
 800e310:	fb02 3306 	mla	r3, r2, r6, r3
 800e314:	b289      	uxth	r1, r1
 800e316:	3001      	adds	r0, #1
 800e318:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e31c:	4285      	cmp	r5, r0
 800e31e:	f84c 1b04 	str.w	r1, [ip], #4
 800e322:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e326:	dcec      	bgt.n	800e302 <__multadd+0x12>
 800e328:	b30e      	cbz	r6, 800e36e <__multadd+0x7e>
 800e32a:	68a3      	ldr	r3, [r4, #8]
 800e32c:	42ab      	cmp	r3, r5
 800e32e:	dc19      	bgt.n	800e364 <__multadd+0x74>
 800e330:	6861      	ldr	r1, [r4, #4]
 800e332:	4638      	mov	r0, r7
 800e334:	3101      	adds	r1, #1
 800e336:	f7ff ff79 	bl	800e22c <_Balloc>
 800e33a:	4680      	mov	r8, r0
 800e33c:	b928      	cbnz	r0, 800e34a <__multadd+0x5a>
 800e33e:	4602      	mov	r2, r0
 800e340:	4b0c      	ldr	r3, [pc, #48]	; (800e374 <__multadd+0x84>)
 800e342:	480d      	ldr	r0, [pc, #52]	; (800e378 <__multadd+0x88>)
 800e344:	21b5      	movs	r1, #181	; 0xb5
 800e346:	f000 fedf 	bl	800f108 <__assert_func>
 800e34a:	6922      	ldr	r2, [r4, #16]
 800e34c:	3202      	adds	r2, #2
 800e34e:	f104 010c 	add.w	r1, r4, #12
 800e352:	0092      	lsls	r2, r2, #2
 800e354:	300c      	adds	r0, #12
 800e356:	f7fe fa7c 	bl	800c852 <memcpy>
 800e35a:	4621      	mov	r1, r4
 800e35c:	4638      	mov	r0, r7
 800e35e:	f7ff ffa5 	bl	800e2ac <_Bfree>
 800e362:	4644      	mov	r4, r8
 800e364:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e368:	3501      	adds	r5, #1
 800e36a:	615e      	str	r6, [r3, #20]
 800e36c:	6125      	str	r5, [r4, #16]
 800e36e:	4620      	mov	r0, r4
 800e370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e374:	0801028f 	.word	0x0801028f
 800e378:	080102a0 	.word	0x080102a0

0800e37c <__hi0bits>:
 800e37c:	0c03      	lsrs	r3, r0, #16
 800e37e:	041b      	lsls	r3, r3, #16
 800e380:	b9d3      	cbnz	r3, 800e3b8 <__hi0bits+0x3c>
 800e382:	0400      	lsls	r0, r0, #16
 800e384:	2310      	movs	r3, #16
 800e386:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e38a:	bf04      	itt	eq
 800e38c:	0200      	lsleq	r0, r0, #8
 800e38e:	3308      	addeq	r3, #8
 800e390:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e394:	bf04      	itt	eq
 800e396:	0100      	lsleq	r0, r0, #4
 800e398:	3304      	addeq	r3, #4
 800e39a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e39e:	bf04      	itt	eq
 800e3a0:	0080      	lsleq	r0, r0, #2
 800e3a2:	3302      	addeq	r3, #2
 800e3a4:	2800      	cmp	r0, #0
 800e3a6:	db05      	blt.n	800e3b4 <__hi0bits+0x38>
 800e3a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e3ac:	f103 0301 	add.w	r3, r3, #1
 800e3b0:	bf08      	it	eq
 800e3b2:	2320      	moveq	r3, #32
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	4770      	bx	lr
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	e7e4      	b.n	800e386 <__hi0bits+0xa>

0800e3bc <__lo0bits>:
 800e3bc:	6803      	ldr	r3, [r0, #0]
 800e3be:	f013 0207 	ands.w	r2, r3, #7
 800e3c2:	4601      	mov	r1, r0
 800e3c4:	d00b      	beq.n	800e3de <__lo0bits+0x22>
 800e3c6:	07da      	lsls	r2, r3, #31
 800e3c8:	d423      	bmi.n	800e412 <__lo0bits+0x56>
 800e3ca:	0798      	lsls	r0, r3, #30
 800e3cc:	bf49      	itett	mi
 800e3ce:	085b      	lsrmi	r3, r3, #1
 800e3d0:	089b      	lsrpl	r3, r3, #2
 800e3d2:	2001      	movmi	r0, #1
 800e3d4:	600b      	strmi	r3, [r1, #0]
 800e3d6:	bf5c      	itt	pl
 800e3d8:	600b      	strpl	r3, [r1, #0]
 800e3da:	2002      	movpl	r0, #2
 800e3dc:	4770      	bx	lr
 800e3de:	b298      	uxth	r0, r3
 800e3e0:	b9a8      	cbnz	r0, 800e40e <__lo0bits+0x52>
 800e3e2:	0c1b      	lsrs	r3, r3, #16
 800e3e4:	2010      	movs	r0, #16
 800e3e6:	b2da      	uxtb	r2, r3
 800e3e8:	b90a      	cbnz	r2, 800e3ee <__lo0bits+0x32>
 800e3ea:	3008      	adds	r0, #8
 800e3ec:	0a1b      	lsrs	r3, r3, #8
 800e3ee:	071a      	lsls	r2, r3, #28
 800e3f0:	bf04      	itt	eq
 800e3f2:	091b      	lsreq	r3, r3, #4
 800e3f4:	3004      	addeq	r0, #4
 800e3f6:	079a      	lsls	r2, r3, #30
 800e3f8:	bf04      	itt	eq
 800e3fa:	089b      	lsreq	r3, r3, #2
 800e3fc:	3002      	addeq	r0, #2
 800e3fe:	07da      	lsls	r2, r3, #31
 800e400:	d403      	bmi.n	800e40a <__lo0bits+0x4e>
 800e402:	085b      	lsrs	r3, r3, #1
 800e404:	f100 0001 	add.w	r0, r0, #1
 800e408:	d005      	beq.n	800e416 <__lo0bits+0x5a>
 800e40a:	600b      	str	r3, [r1, #0]
 800e40c:	4770      	bx	lr
 800e40e:	4610      	mov	r0, r2
 800e410:	e7e9      	b.n	800e3e6 <__lo0bits+0x2a>
 800e412:	2000      	movs	r0, #0
 800e414:	4770      	bx	lr
 800e416:	2020      	movs	r0, #32
 800e418:	4770      	bx	lr
	...

0800e41c <__i2b>:
 800e41c:	b510      	push	{r4, lr}
 800e41e:	460c      	mov	r4, r1
 800e420:	2101      	movs	r1, #1
 800e422:	f7ff ff03 	bl	800e22c <_Balloc>
 800e426:	4602      	mov	r2, r0
 800e428:	b928      	cbnz	r0, 800e436 <__i2b+0x1a>
 800e42a:	4b05      	ldr	r3, [pc, #20]	; (800e440 <__i2b+0x24>)
 800e42c:	4805      	ldr	r0, [pc, #20]	; (800e444 <__i2b+0x28>)
 800e42e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e432:	f000 fe69 	bl	800f108 <__assert_func>
 800e436:	2301      	movs	r3, #1
 800e438:	6144      	str	r4, [r0, #20]
 800e43a:	6103      	str	r3, [r0, #16]
 800e43c:	bd10      	pop	{r4, pc}
 800e43e:	bf00      	nop
 800e440:	0801028f 	.word	0x0801028f
 800e444:	080102a0 	.word	0x080102a0

0800e448 <__multiply>:
 800e448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e44c:	4691      	mov	r9, r2
 800e44e:	690a      	ldr	r2, [r1, #16]
 800e450:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e454:	429a      	cmp	r2, r3
 800e456:	bfb8      	it	lt
 800e458:	460b      	movlt	r3, r1
 800e45a:	460c      	mov	r4, r1
 800e45c:	bfbc      	itt	lt
 800e45e:	464c      	movlt	r4, r9
 800e460:	4699      	movlt	r9, r3
 800e462:	6927      	ldr	r7, [r4, #16]
 800e464:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e468:	68a3      	ldr	r3, [r4, #8]
 800e46a:	6861      	ldr	r1, [r4, #4]
 800e46c:	eb07 060a 	add.w	r6, r7, sl
 800e470:	42b3      	cmp	r3, r6
 800e472:	b085      	sub	sp, #20
 800e474:	bfb8      	it	lt
 800e476:	3101      	addlt	r1, #1
 800e478:	f7ff fed8 	bl	800e22c <_Balloc>
 800e47c:	b930      	cbnz	r0, 800e48c <__multiply+0x44>
 800e47e:	4602      	mov	r2, r0
 800e480:	4b44      	ldr	r3, [pc, #272]	; (800e594 <__multiply+0x14c>)
 800e482:	4845      	ldr	r0, [pc, #276]	; (800e598 <__multiply+0x150>)
 800e484:	f240 115d 	movw	r1, #349	; 0x15d
 800e488:	f000 fe3e 	bl	800f108 <__assert_func>
 800e48c:	f100 0514 	add.w	r5, r0, #20
 800e490:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e494:	462b      	mov	r3, r5
 800e496:	2200      	movs	r2, #0
 800e498:	4543      	cmp	r3, r8
 800e49a:	d321      	bcc.n	800e4e0 <__multiply+0x98>
 800e49c:	f104 0314 	add.w	r3, r4, #20
 800e4a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e4a4:	f109 0314 	add.w	r3, r9, #20
 800e4a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e4ac:	9202      	str	r2, [sp, #8]
 800e4ae:	1b3a      	subs	r2, r7, r4
 800e4b0:	3a15      	subs	r2, #21
 800e4b2:	f022 0203 	bic.w	r2, r2, #3
 800e4b6:	3204      	adds	r2, #4
 800e4b8:	f104 0115 	add.w	r1, r4, #21
 800e4bc:	428f      	cmp	r7, r1
 800e4be:	bf38      	it	cc
 800e4c0:	2204      	movcc	r2, #4
 800e4c2:	9201      	str	r2, [sp, #4]
 800e4c4:	9a02      	ldr	r2, [sp, #8]
 800e4c6:	9303      	str	r3, [sp, #12]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d80c      	bhi.n	800e4e6 <__multiply+0x9e>
 800e4cc:	2e00      	cmp	r6, #0
 800e4ce:	dd03      	ble.n	800e4d8 <__multiply+0x90>
 800e4d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d05a      	beq.n	800e58e <__multiply+0x146>
 800e4d8:	6106      	str	r6, [r0, #16]
 800e4da:	b005      	add	sp, #20
 800e4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4e0:	f843 2b04 	str.w	r2, [r3], #4
 800e4e4:	e7d8      	b.n	800e498 <__multiply+0x50>
 800e4e6:	f8b3 a000 	ldrh.w	sl, [r3]
 800e4ea:	f1ba 0f00 	cmp.w	sl, #0
 800e4ee:	d024      	beq.n	800e53a <__multiply+0xf2>
 800e4f0:	f104 0e14 	add.w	lr, r4, #20
 800e4f4:	46a9      	mov	r9, r5
 800e4f6:	f04f 0c00 	mov.w	ip, #0
 800e4fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e4fe:	f8d9 1000 	ldr.w	r1, [r9]
 800e502:	fa1f fb82 	uxth.w	fp, r2
 800e506:	b289      	uxth	r1, r1
 800e508:	fb0a 110b 	mla	r1, sl, fp, r1
 800e50c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e510:	f8d9 2000 	ldr.w	r2, [r9]
 800e514:	4461      	add	r1, ip
 800e516:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e51a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e51e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e522:	b289      	uxth	r1, r1
 800e524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e528:	4577      	cmp	r7, lr
 800e52a:	f849 1b04 	str.w	r1, [r9], #4
 800e52e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e532:	d8e2      	bhi.n	800e4fa <__multiply+0xb2>
 800e534:	9a01      	ldr	r2, [sp, #4]
 800e536:	f845 c002 	str.w	ip, [r5, r2]
 800e53a:	9a03      	ldr	r2, [sp, #12]
 800e53c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e540:	3304      	adds	r3, #4
 800e542:	f1b9 0f00 	cmp.w	r9, #0
 800e546:	d020      	beq.n	800e58a <__multiply+0x142>
 800e548:	6829      	ldr	r1, [r5, #0]
 800e54a:	f104 0c14 	add.w	ip, r4, #20
 800e54e:	46ae      	mov	lr, r5
 800e550:	f04f 0a00 	mov.w	sl, #0
 800e554:	f8bc b000 	ldrh.w	fp, [ip]
 800e558:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e55c:	fb09 220b 	mla	r2, r9, fp, r2
 800e560:	4492      	add	sl, r2
 800e562:	b289      	uxth	r1, r1
 800e564:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e568:	f84e 1b04 	str.w	r1, [lr], #4
 800e56c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e570:	f8be 1000 	ldrh.w	r1, [lr]
 800e574:	0c12      	lsrs	r2, r2, #16
 800e576:	fb09 1102 	mla	r1, r9, r2, r1
 800e57a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e57e:	4567      	cmp	r7, ip
 800e580:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e584:	d8e6      	bhi.n	800e554 <__multiply+0x10c>
 800e586:	9a01      	ldr	r2, [sp, #4]
 800e588:	50a9      	str	r1, [r5, r2]
 800e58a:	3504      	adds	r5, #4
 800e58c:	e79a      	b.n	800e4c4 <__multiply+0x7c>
 800e58e:	3e01      	subs	r6, #1
 800e590:	e79c      	b.n	800e4cc <__multiply+0x84>
 800e592:	bf00      	nop
 800e594:	0801028f 	.word	0x0801028f
 800e598:	080102a0 	.word	0x080102a0

0800e59c <__pow5mult>:
 800e59c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5a0:	4615      	mov	r5, r2
 800e5a2:	f012 0203 	ands.w	r2, r2, #3
 800e5a6:	4606      	mov	r6, r0
 800e5a8:	460f      	mov	r7, r1
 800e5aa:	d007      	beq.n	800e5bc <__pow5mult+0x20>
 800e5ac:	4c25      	ldr	r4, [pc, #148]	; (800e644 <__pow5mult+0xa8>)
 800e5ae:	3a01      	subs	r2, #1
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e5b6:	f7ff fe9b 	bl	800e2f0 <__multadd>
 800e5ba:	4607      	mov	r7, r0
 800e5bc:	10ad      	asrs	r5, r5, #2
 800e5be:	d03d      	beq.n	800e63c <__pow5mult+0xa0>
 800e5c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e5c2:	b97c      	cbnz	r4, 800e5e4 <__pow5mult+0x48>
 800e5c4:	2010      	movs	r0, #16
 800e5c6:	f7ff fe1d 	bl	800e204 <malloc>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	6270      	str	r0, [r6, #36]	; 0x24
 800e5ce:	b928      	cbnz	r0, 800e5dc <__pow5mult+0x40>
 800e5d0:	4b1d      	ldr	r3, [pc, #116]	; (800e648 <__pow5mult+0xac>)
 800e5d2:	481e      	ldr	r0, [pc, #120]	; (800e64c <__pow5mult+0xb0>)
 800e5d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e5d8:	f000 fd96 	bl	800f108 <__assert_func>
 800e5dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e5e0:	6004      	str	r4, [r0, #0]
 800e5e2:	60c4      	str	r4, [r0, #12]
 800e5e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e5e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e5ec:	b94c      	cbnz	r4, 800e602 <__pow5mult+0x66>
 800e5ee:	f240 2171 	movw	r1, #625	; 0x271
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	f7ff ff12 	bl	800e41c <__i2b>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800e5fe:	4604      	mov	r4, r0
 800e600:	6003      	str	r3, [r0, #0]
 800e602:	f04f 0900 	mov.w	r9, #0
 800e606:	07eb      	lsls	r3, r5, #31
 800e608:	d50a      	bpl.n	800e620 <__pow5mult+0x84>
 800e60a:	4639      	mov	r1, r7
 800e60c:	4622      	mov	r2, r4
 800e60e:	4630      	mov	r0, r6
 800e610:	f7ff ff1a 	bl	800e448 <__multiply>
 800e614:	4639      	mov	r1, r7
 800e616:	4680      	mov	r8, r0
 800e618:	4630      	mov	r0, r6
 800e61a:	f7ff fe47 	bl	800e2ac <_Bfree>
 800e61e:	4647      	mov	r7, r8
 800e620:	106d      	asrs	r5, r5, #1
 800e622:	d00b      	beq.n	800e63c <__pow5mult+0xa0>
 800e624:	6820      	ldr	r0, [r4, #0]
 800e626:	b938      	cbnz	r0, 800e638 <__pow5mult+0x9c>
 800e628:	4622      	mov	r2, r4
 800e62a:	4621      	mov	r1, r4
 800e62c:	4630      	mov	r0, r6
 800e62e:	f7ff ff0b 	bl	800e448 <__multiply>
 800e632:	6020      	str	r0, [r4, #0]
 800e634:	f8c0 9000 	str.w	r9, [r0]
 800e638:	4604      	mov	r4, r0
 800e63a:	e7e4      	b.n	800e606 <__pow5mult+0x6a>
 800e63c:	4638      	mov	r0, r7
 800e63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e642:	bf00      	nop
 800e644:	080103f0 	.word	0x080103f0
 800e648:	0801021d 	.word	0x0801021d
 800e64c:	080102a0 	.word	0x080102a0

0800e650 <__lshift>:
 800e650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e654:	460c      	mov	r4, r1
 800e656:	6849      	ldr	r1, [r1, #4]
 800e658:	6923      	ldr	r3, [r4, #16]
 800e65a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e65e:	68a3      	ldr	r3, [r4, #8]
 800e660:	4607      	mov	r7, r0
 800e662:	4691      	mov	r9, r2
 800e664:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e668:	f108 0601 	add.w	r6, r8, #1
 800e66c:	42b3      	cmp	r3, r6
 800e66e:	db0b      	blt.n	800e688 <__lshift+0x38>
 800e670:	4638      	mov	r0, r7
 800e672:	f7ff fddb 	bl	800e22c <_Balloc>
 800e676:	4605      	mov	r5, r0
 800e678:	b948      	cbnz	r0, 800e68e <__lshift+0x3e>
 800e67a:	4602      	mov	r2, r0
 800e67c:	4b2a      	ldr	r3, [pc, #168]	; (800e728 <__lshift+0xd8>)
 800e67e:	482b      	ldr	r0, [pc, #172]	; (800e72c <__lshift+0xdc>)
 800e680:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e684:	f000 fd40 	bl	800f108 <__assert_func>
 800e688:	3101      	adds	r1, #1
 800e68a:	005b      	lsls	r3, r3, #1
 800e68c:	e7ee      	b.n	800e66c <__lshift+0x1c>
 800e68e:	2300      	movs	r3, #0
 800e690:	f100 0114 	add.w	r1, r0, #20
 800e694:	f100 0210 	add.w	r2, r0, #16
 800e698:	4618      	mov	r0, r3
 800e69a:	4553      	cmp	r3, sl
 800e69c:	db37      	blt.n	800e70e <__lshift+0xbe>
 800e69e:	6920      	ldr	r0, [r4, #16]
 800e6a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e6a4:	f104 0314 	add.w	r3, r4, #20
 800e6a8:	f019 091f 	ands.w	r9, r9, #31
 800e6ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e6b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e6b4:	d02f      	beq.n	800e716 <__lshift+0xc6>
 800e6b6:	f1c9 0e20 	rsb	lr, r9, #32
 800e6ba:	468a      	mov	sl, r1
 800e6bc:	f04f 0c00 	mov.w	ip, #0
 800e6c0:	681a      	ldr	r2, [r3, #0]
 800e6c2:	fa02 f209 	lsl.w	r2, r2, r9
 800e6c6:	ea42 020c 	orr.w	r2, r2, ip
 800e6ca:	f84a 2b04 	str.w	r2, [sl], #4
 800e6ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6d2:	4298      	cmp	r0, r3
 800e6d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e6d8:	d8f2      	bhi.n	800e6c0 <__lshift+0x70>
 800e6da:	1b03      	subs	r3, r0, r4
 800e6dc:	3b15      	subs	r3, #21
 800e6de:	f023 0303 	bic.w	r3, r3, #3
 800e6e2:	3304      	adds	r3, #4
 800e6e4:	f104 0215 	add.w	r2, r4, #21
 800e6e8:	4290      	cmp	r0, r2
 800e6ea:	bf38      	it	cc
 800e6ec:	2304      	movcc	r3, #4
 800e6ee:	f841 c003 	str.w	ip, [r1, r3]
 800e6f2:	f1bc 0f00 	cmp.w	ip, #0
 800e6f6:	d001      	beq.n	800e6fc <__lshift+0xac>
 800e6f8:	f108 0602 	add.w	r6, r8, #2
 800e6fc:	3e01      	subs	r6, #1
 800e6fe:	4638      	mov	r0, r7
 800e700:	612e      	str	r6, [r5, #16]
 800e702:	4621      	mov	r1, r4
 800e704:	f7ff fdd2 	bl	800e2ac <_Bfree>
 800e708:	4628      	mov	r0, r5
 800e70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e70e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e712:	3301      	adds	r3, #1
 800e714:	e7c1      	b.n	800e69a <__lshift+0x4a>
 800e716:	3904      	subs	r1, #4
 800e718:	f853 2b04 	ldr.w	r2, [r3], #4
 800e71c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e720:	4298      	cmp	r0, r3
 800e722:	d8f9      	bhi.n	800e718 <__lshift+0xc8>
 800e724:	e7ea      	b.n	800e6fc <__lshift+0xac>
 800e726:	bf00      	nop
 800e728:	0801028f 	.word	0x0801028f
 800e72c:	080102a0 	.word	0x080102a0

0800e730 <__mcmp>:
 800e730:	b530      	push	{r4, r5, lr}
 800e732:	6902      	ldr	r2, [r0, #16]
 800e734:	690c      	ldr	r4, [r1, #16]
 800e736:	1b12      	subs	r2, r2, r4
 800e738:	d10e      	bne.n	800e758 <__mcmp+0x28>
 800e73a:	f100 0314 	add.w	r3, r0, #20
 800e73e:	3114      	adds	r1, #20
 800e740:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e744:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e748:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e74c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e750:	42a5      	cmp	r5, r4
 800e752:	d003      	beq.n	800e75c <__mcmp+0x2c>
 800e754:	d305      	bcc.n	800e762 <__mcmp+0x32>
 800e756:	2201      	movs	r2, #1
 800e758:	4610      	mov	r0, r2
 800e75a:	bd30      	pop	{r4, r5, pc}
 800e75c:	4283      	cmp	r3, r0
 800e75e:	d3f3      	bcc.n	800e748 <__mcmp+0x18>
 800e760:	e7fa      	b.n	800e758 <__mcmp+0x28>
 800e762:	f04f 32ff 	mov.w	r2, #4294967295
 800e766:	e7f7      	b.n	800e758 <__mcmp+0x28>

0800e768 <__mdiff>:
 800e768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e76c:	460c      	mov	r4, r1
 800e76e:	4606      	mov	r6, r0
 800e770:	4611      	mov	r1, r2
 800e772:	4620      	mov	r0, r4
 800e774:	4690      	mov	r8, r2
 800e776:	f7ff ffdb 	bl	800e730 <__mcmp>
 800e77a:	1e05      	subs	r5, r0, #0
 800e77c:	d110      	bne.n	800e7a0 <__mdiff+0x38>
 800e77e:	4629      	mov	r1, r5
 800e780:	4630      	mov	r0, r6
 800e782:	f7ff fd53 	bl	800e22c <_Balloc>
 800e786:	b930      	cbnz	r0, 800e796 <__mdiff+0x2e>
 800e788:	4b3a      	ldr	r3, [pc, #232]	; (800e874 <__mdiff+0x10c>)
 800e78a:	4602      	mov	r2, r0
 800e78c:	f240 2132 	movw	r1, #562	; 0x232
 800e790:	4839      	ldr	r0, [pc, #228]	; (800e878 <__mdiff+0x110>)
 800e792:	f000 fcb9 	bl	800f108 <__assert_func>
 800e796:	2301      	movs	r3, #1
 800e798:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e79c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7a0:	bfa4      	itt	ge
 800e7a2:	4643      	movge	r3, r8
 800e7a4:	46a0      	movge	r8, r4
 800e7a6:	4630      	mov	r0, r6
 800e7a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e7ac:	bfa6      	itte	ge
 800e7ae:	461c      	movge	r4, r3
 800e7b0:	2500      	movge	r5, #0
 800e7b2:	2501      	movlt	r5, #1
 800e7b4:	f7ff fd3a 	bl	800e22c <_Balloc>
 800e7b8:	b920      	cbnz	r0, 800e7c4 <__mdiff+0x5c>
 800e7ba:	4b2e      	ldr	r3, [pc, #184]	; (800e874 <__mdiff+0x10c>)
 800e7bc:	4602      	mov	r2, r0
 800e7be:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e7c2:	e7e5      	b.n	800e790 <__mdiff+0x28>
 800e7c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e7c8:	6926      	ldr	r6, [r4, #16]
 800e7ca:	60c5      	str	r5, [r0, #12]
 800e7cc:	f104 0914 	add.w	r9, r4, #20
 800e7d0:	f108 0514 	add.w	r5, r8, #20
 800e7d4:	f100 0e14 	add.w	lr, r0, #20
 800e7d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e7dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e7e0:	f108 0210 	add.w	r2, r8, #16
 800e7e4:	46f2      	mov	sl, lr
 800e7e6:	2100      	movs	r1, #0
 800e7e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800e7ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e7f0:	fa1f f883 	uxth.w	r8, r3
 800e7f4:	fa11 f18b 	uxtah	r1, r1, fp
 800e7f8:	0c1b      	lsrs	r3, r3, #16
 800e7fa:	eba1 0808 	sub.w	r8, r1, r8
 800e7fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e802:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e806:	fa1f f888 	uxth.w	r8, r8
 800e80a:	1419      	asrs	r1, r3, #16
 800e80c:	454e      	cmp	r6, r9
 800e80e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e812:	f84a 3b04 	str.w	r3, [sl], #4
 800e816:	d8e7      	bhi.n	800e7e8 <__mdiff+0x80>
 800e818:	1b33      	subs	r3, r6, r4
 800e81a:	3b15      	subs	r3, #21
 800e81c:	f023 0303 	bic.w	r3, r3, #3
 800e820:	3304      	adds	r3, #4
 800e822:	3415      	adds	r4, #21
 800e824:	42a6      	cmp	r6, r4
 800e826:	bf38      	it	cc
 800e828:	2304      	movcc	r3, #4
 800e82a:	441d      	add	r5, r3
 800e82c:	4473      	add	r3, lr
 800e82e:	469e      	mov	lr, r3
 800e830:	462e      	mov	r6, r5
 800e832:	4566      	cmp	r6, ip
 800e834:	d30e      	bcc.n	800e854 <__mdiff+0xec>
 800e836:	f10c 0203 	add.w	r2, ip, #3
 800e83a:	1b52      	subs	r2, r2, r5
 800e83c:	f022 0203 	bic.w	r2, r2, #3
 800e840:	3d03      	subs	r5, #3
 800e842:	45ac      	cmp	ip, r5
 800e844:	bf38      	it	cc
 800e846:	2200      	movcc	r2, #0
 800e848:	441a      	add	r2, r3
 800e84a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e84e:	b17b      	cbz	r3, 800e870 <__mdiff+0x108>
 800e850:	6107      	str	r7, [r0, #16]
 800e852:	e7a3      	b.n	800e79c <__mdiff+0x34>
 800e854:	f856 8b04 	ldr.w	r8, [r6], #4
 800e858:	fa11 f288 	uxtah	r2, r1, r8
 800e85c:	1414      	asrs	r4, r2, #16
 800e85e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e862:	b292      	uxth	r2, r2
 800e864:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e868:	f84e 2b04 	str.w	r2, [lr], #4
 800e86c:	1421      	asrs	r1, r4, #16
 800e86e:	e7e0      	b.n	800e832 <__mdiff+0xca>
 800e870:	3f01      	subs	r7, #1
 800e872:	e7ea      	b.n	800e84a <__mdiff+0xe2>
 800e874:	0801028f 	.word	0x0801028f
 800e878:	080102a0 	.word	0x080102a0

0800e87c <__d2b>:
 800e87c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e880:	4689      	mov	r9, r1
 800e882:	2101      	movs	r1, #1
 800e884:	ec57 6b10 	vmov	r6, r7, d0
 800e888:	4690      	mov	r8, r2
 800e88a:	f7ff fccf 	bl	800e22c <_Balloc>
 800e88e:	4604      	mov	r4, r0
 800e890:	b930      	cbnz	r0, 800e8a0 <__d2b+0x24>
 800e892:	4602      	mov	r2, r0
 800e894:	4b25      	ldr	r3, [pc, #148]	; (800e92c <__d2b+0xb0>)
 800e896:	4826      	ldr	r0, [pc, #152]	; (800e930 <__d2b+0xb4>)
 800e898:	f240 310a 	movw	r1, #778	; 0x30a
 800e89c:	f000 fc34 	bl	800f108 <__assert_func>
 800e8a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e8a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e8a8:	bb35      	cbnz	r5, 800e8f8 <__d2b+0x7c>
 800e8aa:	2e00      	cmp	r6, #0
 800e8ac:	9301      	str	r3, [sp, #4]
 800e8ae:	d028      	beq.n	800e902 <__d2b+0x86>
 800e8b0:	4668      	mov	r0, sp
 800e8b2:	9600      	str	r6, [sp, #0]
 800e8b4:	f7ff fd82 	bl	800e3bc <__lo0bits>
 800e8b8:	9900      	ldr	r1, [sp, #0]
 800e8ba:	b300      	cbz	r0, 800e8fe <__d2b+0x82>
 800e8bc:	9a01      	ldr	r2, [sp, #4]
 800e8be:	f1c0 0320 	rsb	r3, r0, #32
 800e8c2:	fa02 f303 	lsl.w	r3, r2, r3
 800e8c6:	430b      	orrs	r3, r1
 800e8c8:	40c2      	lsrs	r2, r0
 800e8ca:	6163      	str	r3, [r4, #20]
 800e8cc:	9201      	str	r2, [sp, #4]
 800e8ce:	9b01      	ldr	r3, [sp, #4]
 800e8d0:	61a3      	str	r3, [r4, #24]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	bf14      	ite	ne
 800e8d6:	2202      	movne	r2, #2
 800e8d8:	2201      	moveq	r2, #1
 800e8da:	6122      	str	r2, [r4, #16]
 800e8dc:	b1d5      	cbz	r5, 800e914 <__d2b+0x98>
 800e8de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e8e2:	4405      	add	r5, r0
 800e8e4:	f8c9 5000 	str.w	r5, [r9]
 800e8e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e8ec:	f8c8 0000 	str.w	r0, [r8]
 800e8f0:	4620      	mov	r0, r4
 800e8f2:	b003      	add	sp, #12
 800e8f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e8fc:	e7d5      	b.n	800e8aa <__d2b+0x2e>
 800e8fe:	6161      	str	r1, [r4, #20]
 800e900:	e7e5      	b.n	800e8ce <__d2b+0x52>
 800e902:	a801      	add	r0, sp, #4
 800e904:	f7ff fd5a 	bl	800e3bc <__lo0bits>
 800e908:	9b01      	ldr	r3, [sp, #4]
 800e90a:	6163      	str	r3, [r4, #20]
 800e90c:	2201      	movs	r2, #1
 800e90e:	6122      	str	r2, [r4, #16]
 800e910:	3020      	adds	r0, #32
 800e912:	e7e3      	b.n	800e8dc <__d2b+0x60>
 800e914:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e918:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e91c:	f8c9 0000 	str.w	r0, [r9]
 800e920:	6918      	ldr	r0, [r3, #16]
 800e922:	f7ff fd2b 	bl	800e37c <__hi0bits>
 800e926:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e92a:	e7df      	b.n	800e8ec <__d2b+0x70>
 800e92c:	0801028f 	.word	0x0801028f
 800e930:	080102a0 	.word	0x080102a0

0800e934 <_calloc_r>:
 800e934:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e936:	fba1 2402 	umull	r2, r4, r1, r2
 800e93a:	b94c      	cbnz	r4, 800e950 <_calloc_r+0x1c>
 800e93c:	4611      	mov	r1, r2
 800e93e:	9201      	str	r2, [sp, #4]
 800e940:	f7fd ffbe 	bl	800c8c0 <_malloc_r>
 800e944:	9a01      	ldr	r2, [sp, #4]
 800e946:	4605      	mov	r5, r0
 800e948:	b930      	cbnz	r0, 800e958 <_calloc_r+0x24>
 800e94a:	4628      	mov	r0, r5
 800e94c:	b003      	add	sp, #12
 800e94e:	bd30      	pop	{r4, r5, pc}
 800e950:	220c      	movs	r2, #12
 800e952:	6002      	str	r2, [r0, #0]
 800e954:	2500      	movs	r5, #0
 800e956:	e7f8      	b.n	800e94a <_calloc_r+0x16>
 800e958:	4621      	mov	r1, r4
 800e95a:	f7fd ff88 	bl	800c86e <memset>
 800e95e:	e7f4      	b.n	800e94a <_calloc_r+0x16>

0800e960 <_free_r>:
 800e960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e962:	2900      	cmp	r1, #0
 800e964:	d044      	beq.n	800e9f0 <_free_r+0x90>
 800e966:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e96a:	9001      	str	r0, [sp, #4]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	f1a1 0404 	sub.w	r4, r1, #4
 800e972:	bfb8      	it	lt
 800e974:	18e4      	addlt	r4, r4, r3
 800e976:	f7ff fc4d 	bl	800e214 <__malloc_lock>
 800e97a:	4a1e      	ldr	r2, [pc, #120]	; (800e9f4 <_free_r+0x94>)
 800e97c:	9801      	ldr	r0, [sp, #4]
 800e97e:	6813      	ldr	r3, [r2, #0]
 800e980:	b933      	cbnz	r3, 800e990 <_free_r+0x30>
 800e982:	6063      	str	r3, [r4, #4]
 800e984:	6014      	str	r4, [r2, #0]
 800e986:	b003      	add	sp, #12
 800e988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e98c:	f7ff bc48 	b.w	800e220 <__malloc_unlock>
 800e990:	42a3      	cmp	r3, r4
 800e992:	d908      	bls.n	800e9a6 <_free_r+0x46>
 800e994:	6825      	ldr	r5, [r4, #0]
 800e996:	1961      	adds	r1, r4, r5
 800e998:	428b      	cmp	r3, r1
 800e99a:	bf01      	itttt	eq
 800e99c:	6819      	ldreq	r1, [r3, #0]
 800e99e:	685b      	ldreq	r3, [r3, #4]
 800e9a0:	1949      	addeq	r1, r1, r5
 800e9a2:	6021      	streq	r1, [r4, #0]
 800e9a4:	e7ed      	b.n	800e982 <_free_r+0x22>
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	b10b      	cbz	r3, 800e9b0 <_free_r+0x50>
 800e9ac:	42a3      	cmp	r3, r4
 800e9ae:	d9fa      	bls.n	800e9a6 <_free_r+0x46>
 800e9b0:	6811      	ldr	r1, [r2, #0]
 800e9b2:	1855      	adds	r5, r2, r1
 800e9b4:	42a5      	cmp	r5, r4
 800e9b6:	d10b      	bne.n	800e9d0 <_free_r+0x70>
 800e9b8:	6824      	ldr	r4, [r4, #0]
 800e9ba:	4421      	add	r1, r4
 800e9bc:	1854      	adds	r4, r2, r1
 800e9be:	42a3      	cmp	r3, r4
 800e9c0:	6011      	str	r1, [r2, #0]
 800e9c2:	d1e0      	bne.n	800e986 <_free_r+0x26>
 800e9c4:	681c      	ldr	r4, [r3, #0]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	6053      	str	r3, [r2, #4]
 800e9ca:	4421      	add	r1, r4
 800e9cc:	6011      	str	r1, [r2, #0]
 800e9ce:	e7da      	b.n	800e986 <_free_r+0x26>
 800e9d0:	d902      	bls.n	800e9d8 <_free_r+0x78>
 800e9d2:	230c      	movs	r3, #12
 800e9d4:	6003      	str	r3, [r0, #0]
 800e9d6:	e7d6      	b.n	800e986 <_free_r+0x26>
 800e9d8:	6825      	ldr	r5, [r4, #0]
 800e9da:	1961      	adds	r1, r4, r5
 800e9dc:	428b      	cmp	r3, r1
 800e9de:	bf04      	itt	eq
 800e9e0:	6819      	ldreq	r1, [r3, #0]
 800e9e2:	685b      	ldreq	r3, [r3, #4]
 800e9e4:	6063      	str	r3, [r4, #4]
 800e9e6:	bf04      	itt	eq
 800e9e8:	1949      	addeq	r1, r1, r5
 800e9ea:	6021      	streq	r1, [r4, #0]
 800e9ec:	6054      	str	r4, [r2, #4]
 800e9ee:	e7ca      	b.n	800e986 <_free_r+0x26>
 800e9f0:	b003      	add	sp, #12
 800e9f2:	bd30      	pop	{r4, r5, pc}
 800e9f4:	240050c4 	.word	0x240050c4

0800e9f8 <__ssputs_r>:
 800e9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9fc:	688e      	ldr	r6, [r1, #8]
 800e9fe:	429e      	cmp	r6, r3
 800ea00:	4682      	mov	sl, r0
 800ea02:	460c      	mov	r4, r1
 800ea04:	4690      	mov	r8, r2
 800ea06:	461f      	mov	r7, r3
 800ea08:	d838      	bhi.n	800ea7c <__ssputs_r+0x84>
 800ea0a:	898a      	ldrh	r2, [r1, #12]
 800ea0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea10:	d032      	beq.n	800ea78 <__ssputs_r+0x80>
 800ea12:	6825      	ldr	r5, [r4, #0]
 800ea14:	6909      	ldr	r1, [r1, #16]
 800ea16:	eba5 0901 	sub.w	r9, r5, r1
 800ea1a:	6965      	ldr	r5, [r4, #20]
 800ea1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea24:	3301      	adds	r3, #1
 800ea26:	444b      	add	r3, r9
 800ea28:	106d      	asrs	r5, r5, #1
 800ea2a:	429d      	cmp	r5, r3
 800ea2c:	bf38      	it	cc
 800ea2e:	461d      	movcc	r5, r3
 800ea30:	0553      	lsls	r3, r2, #21
 800ea32:	d531      	bpl.n	800ea98 <__ssputs_r+0xa0>
 800ea34:	4629      	mov	r1, r5
 800ea36:	f7fd ff43 	bl	800c8c0 <_malloc_r>
 800ea3a:	4606      	mov	r6, r0
 800ea3c:	b950      	cbnz	r0, 800ea54 <__ssputs_r+0x5c>
 800ea3e:	230c      	movs	r3, #12
 800ea40:	f8ca 3000 	str.w	r3, [sl]
 800ea44:	89a3      	ldrh	r3, [r4, #12]
 800ea46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea4a:	81a3      	strh	r3, [r4, #12]
 800ea4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea54:	6921      	ldr	r1, [r4, #16]
 800ea56:	464a      	mov	r2, r9
 800ea58:	f7fd fefb 	bl	800c852 <memcpy>
 800ea5c:	89a3      	ldrh	r3, [r4, #12]
 800ea5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea66:	81a3      	strh	r3, [r4, #12]
 800ea68:	6126      	str	r6, [r4, #16]
 800ea6a:	6165      	str	r5, [r4, #20]
 800ea6c:	444e      	add	r6, r9
 800ea6e:	eba5 0509 	sub.w	r5, r5, r9
 800ea72:	6026      	str	r6, [r4, #0]
 800ea74:	60a5      	str	r5, [r4, #8]
 800ea76:	463e      	mov	r6, r7
 800ea78:	42be      	cmp	r6, r7
 800ea7a:	d900      	bls.n	800ea7e <__ssputs_r+0x86>
 800ea7c:	463e      	mov	r6, r7
 800ea7e:	6820      	ldr	r0, [r4, #0]
 800ea80:	4632      	mov	r2, r6
 800ea82:	4641      	mov	r1, r8
 800ea84:	f000 fbe8 	bl	800f258 <memmove>
 800ea88:	68a3      	ldr	r3, [r4, #8]
 800ea8a:	1b9b      	subs	r3, r3, r6
 800ea8c:	60a3      	str	r3, [r4, #8]
 800ea8e:	6823      	ldr	r3, [r4, #0]
 800ea90:	4433      	add	r3, r6
 800ea92:	6023      	str	r3, [r4, #0]
 800ea94:	2000      	movs	r0, #0
 800ea96:	e7db      	b.n	800ea50 <__ssputs_r+0x58>
 800ea98:	462a      	mov	r2, r5
 800ea9a:	f000 fbf7 	bl	800f28c <_realloc_r>
 800ea9e:	4606      	mov	r6, r0
 800eaa0:	2800      	cmp	r0, #0
 800eaa2:	d1e1      	bne.n	800ea68 <__ssputs_r+0x70>
 800eaa4:	6921      	ldr	r1, [r4, #16]
 800eaa6:	4650      	mov	r0, sl
 800eaa8:	f7ff ff5a 	bl	800e960 <_free_r>
 800eaac:	e7c7      	b.n	800ea3e <__ssputs_r+0x46>
	...

0800eab0 <_svfiprintf_r>:
 800eab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eab4:	4698      	mov	r8, r3
 800eab6:	898b      	ldrh	r3, [r1, #12]
 800eab8:	061b      	lsls	r3, r3, #24
 800eaba:	b09d      	sub	sp, #116	; 0x74
 800eabc:	4607      	mov	r7, r0
 800eabe:	460d      	mov	r5, r1
 800eac0:	4614      	mov	r4, r2
 800eac2:	d50e      	bpl.n	800eae2 <_svfiprintf_r+0x32>
 800eac4:	690b      	ldr	r3, [r1, #16]
 800eac6:	b963      	cbnz	r3, 800eae2 <_svfiprintf_r+0x32>
 800eac8:	2140      	movs	r1, #64	; 0x40
 800eaca:	f7fd fef9 	bl	800c8c0 <_malloc_r>
 800eace:	6028      	str	r0, [r5, #0]
 800ead0:	6128      	str	r0, [r5, #16]
 800ead2:	b920      	cbnz	r0, 800eade <_svfiprintf_r+0x2e>
 800ead4:	230c      	movs	r3, #12
 800ead6:	603b      	str	r3, [r7, #0]
 800ead8:	f04f 30ff 	mov.w	r0, #4294967295
 800eadc:	e0d1      	b.n	800ec82 <_svfiprintf_r+0x1d2>
 800eade:	2340      	movs	r3, #64	; 0x40
 800eae0:	616b      	str	r3, [r5, #20]
 800eae2:	2300      	movs	r3, #0
 800eae4:	9309      	str	r3, [sp, #36]	; 0x24
 800eae6:	2320      	movs	r3, #32
 800eae8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eaec:	f8cd 800c 	str.w	r8, [sp, #12]
 800eaf0:	2330      	movs	r3, #48	; 0x30
 800eaf2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ec9c <_svfiprintf_r+0x1ec>
 800eaf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eafa:	f04f 0901 	mov.w	r9, #1
 800eafe:	4623      	mov	r3, r4
 800eb00:	469a      	mov	sl, r3
 800eb02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb06:	b10a      	cbz	r2, 800eb0c <_svfiprintf_r+0x5c>
 800eb08:	2a25      	cmp	r2, #37	; 0x25
 800eb0a:	d1f9      	bne.n	800eb00 <_svfiprintf_r+0x50>
 800eb0c:	ebba 0b04 	subs.w	fp, sl, r4
 800eb10:	d00b      	beq.n	800eb2a <_svfiprintf_r+0x7a>
 800eb12:	465b      	mov	r3, fp
 800eb14:	4622      	mov	r2, r4
 800eb16:	4629      	mov	r1, r5
 800eb18:	4638      	mov	r0, r7
 800eb1a:	f7ff ff6d 	bl	800e9f8 <__ssputs_r>
 800eb1e:	3001      	adds	r0, #1
 800eb20:	f000 80aa 	beq.w	800ec78 <_svfiprintf_r+0x1c8>
 800eb24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb26:	445a      	add	r2, fp
 800eb28:	9209      	str	r2, [sp, #36]	; 0x24
 800eb2a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	f000 80a2 	beq.w	800ec78 <_svfiprintf_r+0x1c8>
 800eb34:	2300      	movs	r3, #0
 800eb36:	f04f 32ff 	mov.w	r2, #4294967295
 800eb3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb3e:	f10a 0a01 	add.w	sl, sl, #1
 800eb42:	9304      	str	r3, [sp, #16]
 800eb44:	9307      	str	r3, [sp, #28]
 800eb46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb4a:	931a      	str	r3, [sp, #104]	; 0x68
 800eb4c:	4654      	mov	r4, sl
 800eb4e:	2205      	movs	r2, #5
 800eb50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb54:	4851      	ldr	r0, [pc, #324]	; (800ec9c <_svfiprintf_r+0x1ec>)
 800eb56:	f7f1 fbcb 	bl	80002f0 <memchr>
 800eb5a:	9a04      	ldr	r2, [sp, #16]
 800eb5c:	b9d8      	cbnz	r0, 800eb96 <_svfiprintf_r+0xe6>
 800eb5e:	06d0      	lsls	r0, r2, #27
 800eb60:	bf44      	itt	mi
 800eb62:	2320      	movmi	r3, #32
 800eb64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb68:	0711      	lsls	r1, r2, #28
 800eb6a:	bf44      	itt	mi
 800eb6c:	232b      	movmi	r3, #43	; 0x2b
 800eb6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb72:	f89a 3000 	ldrb.w	r3, [sl]
 800eb76:	2b2a      	cmp	r3, #42	; 0x2a
 800eb78:	d015      	beq.n	800eba6 <_svfiprintf_r+0xf6>
 800eb7a:	9a07      	ldr	r2, [sp, #28]
 800eb7c:	4654      	mov	r4, sl
 800eb7e:	2000      	movs	r0, #0
 800eb80:	f04f 0c0a 	mov.w	ip, #10
 800eb84:	4621      	mov	r1, r4
 800eb86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb8a:	3b30      	subs	r3, #48	; 0x30
 800eb8c:	2b09      	cmp	r3, #9
 800eb8e:	d94e      	bls.n	800ec2e <_svfiprintf_r+0x17e>
 800eb90:	b1b0      	cbz	r0, 800ebc0 <_svfiprintf_r+0x110>
 800eb92:	9207      	str	r2, [sp, #28]
 800eb94:	e014      	b.n	800ebc0 <_svfiprintf_r+0x110>
 800eb96:	eba0 0308 	sub.w	r3, r0, r8
 800eb9a:	fa09 f303 	lsl.w	r3, r9, r3
 800eb9e:	4313      	orrs	r3, r2
 800eba0:	9304      	str	r3, [sp, #16]
 800eba2:	46a2      	mov	sl, r4
 800eba4:	e7d2      	b.n	800eb4c <_svfiprintf_r+0x9c>
 800eba6:	9b03      	ldr	r3, [sp, #12]
 800eba8:	1d19      	adds	r1, r3, #4
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	9103      	str	r1, [sp, #12]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	bfbb      	ittet	lt
 800ebb2:	425b      	neglt	r3, r3
 800ebb4:	f042 0202 	orrlt.w	r2, r2, #2
 800ebb8:	9307      	strge	r3, [sp, #28]
 800ebba:	9307      	strlt	r3, [sp, #28]
 800ebbc:	bfb8      	it	lt
 800ebbe:	9204      	strlt	r2, [sp, #16]
 800ebc0:	7823      	ldrb	r3, [r4, #0]
 800ebc2:	2b2e      	cmp	r3, #46	; 0x2e
 800ebc4:	d10c      	bne.n	800ebe0 <_svfiprintf_r+0x130>
 800ebc6:	7863      	ldrb	r3, [r4, #1]
 800ebc8:	2b2a      	cmp	r3, #42	; 0x2a
 800ebca:	d135      	bne.n	800ec38 <_svfiprintf_r+0x188>
 800ebcc:	9b03      	ldr	r3, [sp, #12]
 800ebce:	1d1a      	adds	r2, r3, #4
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	9203      	str	r2, [sp, #12]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	bfb8      	it	lt
 800ebd8:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebdc:	3402      	adds	r4, #2
 800ebde:	9305      	str	r3, [sp, #20]
 800ebe0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ecac <_svfiprintf_r+0x1fc>
 800ebe4:	7821      	ldrb	r1, [r4, #0]
 800ebe6:	2203      	movs	r2, #3
 800ebe8:	4650      	mov	r0, sl
 800ebea:	f7f1 fb81 	bl	80002f0 <memchr>
 800ebee:	b140      	cbz	r0, 800ec02 <_svfiprintf_r+0x152>
 800ebf0:	2340      	movs	r3, #64	; 0x40
 800ebf2:	eba0 000a 	sub.w	r0, r0, sl
 800ebf6:	fa03 f000 	lsl.w	r0, r3, r0
 800ebfa:	9b04      	ldr	r3, [sp, #16]
 800ebfc:	4303      	orrs	r3, r0
 800ebfe:	3401      	adds	r4, #1
 800ec00:	9304      	str	r3, [sp, #16]
 800ec02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec06:	4826      	ldr	r0, [pc, #152]	; (800eca0 <_svfiprintf_r+0x1f0>)
 800ec08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec0c:	2206      	movs	r2, #6
 800ec0e:	f7f1 fb6f 	bl	80002f0 <memchr>
 800ec12:	2800      	cmp	r0, #0
 800ec14:	d038      	beq.n	800ec88 <_svfiprintf_r+0x1d8>
 800ec16:	4b23      	ldr	r3, [pc, #140]	; (800eca4 <_svfiprintf_r+0x1f4>)
 800ec18:	bb1b      	cbnz	r3, 800ec62 <_svfiprintf_r+0x1b2>
 800ec1a:	9b03      	ldr	r3, [sp, #12]
 800ec1c:	3307      	adds	r3, #7
 800ec1e:	f023 0307 	bic.w	r3, r3, #7
 800ec22:	3308      	adds	r3, #8
 800ec24:	9303      	str	r3, [sp, #12]
 800ec26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec28:	4433      	add	r3, r6
 800ec2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ec2c:	e767      	b.n	800eafe <_svfiprintf_r+0x4e>
 800ec2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec32:	460c      	mov	r4, r1
 800ec34:	2001      	movs	r0, #1
 800ec36:	e7a5      	b.n	800eb84 <_svfiprintf_r+0xd4>
 800ec38:	2300      	movs	r3, #0
 800ec3a:	3401      	adds	r4, #1
 800ec3c:	9305      	str	r3, [sp, #20]
 800ec3e:	4619      	mov	r1, r3
 800ec40:	f04f 0c0a 	mov.w	ip, #10
 800ec44:	4620      	mov	r0, r4
 800ec46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec4a:	3a30      	subs	r2, #48	; 0x30
 800ec4c:	2a09      	cmp	r2, #9
 800ec4e:	d903      	bls.n	800ec58 <_svfiprintf_r+0x1a8>
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d0c5      	beq.n	800ebe0 <_svfiprintf_r+0x130>
 800ec54:	9105      	str	r1, [sp, #20]
 800ec56:	e7c3      	b.n	800ebe0 <_svfiprintf_r+0x130>
 800ec58:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec5c:	4604      	mov	r4, r0
 800ec5e:	2301      	movs	r3, #1
 800ec60:	e7f0      	b.n	800ec44 <_svfiprintf_r+0x194>
 800ec62:	ab03      	add	r3, sp, #12
 800ec64:	9300      	str	r3, [sp, #0]
 800ec66:	462a      	mov	r2, r5
 800ec68:	4b0f      	ldr	r3, [pc, #60]	; (800eca8 <_svfiprintf_r+0x1f8>)
 800ec6a:	a904      	add	r1, sp, #16
 800ec6c:	4638      	mov	r0, r7
 800ec6e:	f7fd ff2b 	bl	800cac8 <_printf_float>
 800ec72:	1c42      	adds	r2, r0, #1
 800ec74:	4606      	mov	r6, r0
 800ec76:	d1d6      	bne.n	800ec26 <_svfiprintf_r+0x176>
 800ec78:	89ab      	ldrh	r3, [r5, #12]
 800ec7a:	065b      	lsls	r3, r3, #25
 800ec7c:	f53f af2c 	bmi.w	800ead8 <_svfiprintf_r+0x28>
 800ec80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec82:	b01d      	add	sp, #116	; 0x74
 800ec84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec88:	ab03      	add	r3, sp, #12
 800ec8a:	9300      	str	r3, [sp, #0]
 800ec8c:	462a      	mov	r2, r5
 800ec8e:	4b06      	ldr	r3, [pc, #24]	; (800eca8 <_svfiprintf_r+0x1f8>)
 800ec90:	a904      	add	r1, sp, #16
 800ec92:	4638      	mov	r0, r7
 800ec94:	f7fe f9a4 	bl	800cfe0 <_printf_i>
 800ec98:	e7eb      	b.n	800ec72 <_svfiprintf_r+0x1c2>
 800ec9a:	bf00      	nop
 800ec9c:	080103fc 	.word	0x080103fc
 800eca0:	08010406 	.word	0x08010406
 800eca4:	0800cac9 	.word	0x0800cac9
 800eca8:	0800e9f9 	.word	0x0800e9f9
 800ecac:	08010402 	.word	0x08010402

0800ecb0 <__sfputc_r>:
 800ecb0:	6893      	ldr	r3, [r2, #8]
 800ecb2:	3b01      	subs	r3, #1
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	b410      	push	{r4}
 800ecb8:	6093      	str	r3, [r2, #8]
 800ecba:	da08      	bge.n	800ecce <__sfputc_r+0x1e>
 800ecbc:	6994      	ldr	r4, [r2, #24]
 800ecbe:	42a3      	cmp	r3, r4
 800ecc0:	db01      	blt.n	800ecc6 <__sfputc_r+0x16>
 800ecc2:	290a      	cmp	r1, #10
 800ecc4:	d103      	bne.n	800ecce <__sfputc_r+0x1e>
 800ecc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecca:	f000 b95d 	b.w	800ef88 <__swbuf_r>
 800ecce:	6813      	ldr	r3, [r2, #0]
 800ecd0:	1c58      	adds	r0, r3, #1
 800ecd2:	6010      	str	r0, [r2, #0]
 800ecd4:	7019      	strb	r1, [r3, #0]
 800ecd6:	4608      	mov	r0, r1
 800ecd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecdc:	4770      	bx	lr

0800ecde <__sfputs_r>:
 800ecde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ece0:	4606      	mov	r6, r0
 800ece2:	460f      	mov	r7, r1
 800ece4:	4614      	mov	r4, r2
 800ece6:	18d5      	adds	r5, r2, r3
 800ece8:	42ac      	cmp	r4, r5
 800ecea:	d101      	bne.n	800ecf0 <__sfputs_r+0x12>
 800ecec:	2000      	movs	r0, #0
 800ecee:	e007      	b.n	800ed00 <__sfputs_r+0x22>
 800ecf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecf4:	463a      	mov	r2, r7
 800ecf6:	4630      	mov	r0, r6
 800ecf8:	f7ff ffda 	bl	800ecb0 <__sfputc_r>
 800ecfc:	1c43      	adds	r3, r0, #1
 800ecfe:	d1f3      	bne.n	800ece8 <__sfputs_r+0xa>
 800ed00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed04 <_vfiprintf_r>:
 800ed04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed08:	460d      	mov	r5, r1
 800ed0a:	b09d      	sub	sp, #116	; 0x74
 800ed0c:	4614      	mov	r4, r2
 800ed0e:	4698      	mov	r8, r3
 800ed10:	4606      	mov	r6, r0
 800ed12:	b118      	cbz	r0, 800ed1c <_vfiprintf_r+0x18>
 800ed14:	6983      	ldr	r3, [r0, #24]
 800ed16:	b90b      	cbnz	r3, 800ed1c <_vfiprintf_r+0x18>
 800ed18:	f7fd fcd6 	bl	800c6c8 <__sinit>
 800ed1c:	4b89      	ldr	r3, [pc, #548]	; (800ef44 <_vfiprintf_r+0x240>)
 800ed1e:	429d      	cmp	r5, r3
 800ed20:	d11b      	bne.n	800ed5a <_vfiprintf_r+0x56>
 800ed22:	6875      	ldr	r5, [r6, #4]
 800ed24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed26:	07d9      	lsls	r1, r3, #31
 800ed28:	d405      	bmi.n	800ed36 <_vfiprintf_r+0x32>
 800ed2a:	89ab      	ldrh	r3, [r5, #12]
 800ed2c:	059a      	lsls	r2, r3, #22
 800ed2e:	d402      	bmi.n	800ed36 <_vfiprintf_r+0x32>
 800ed30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed32:	f7fd fd8c 	bl	800c84e <__retarget_lock_acquire_recursive>
 800ed36:	89ab      	ldrh	r3, [r5, #12]
 800ed38:	071b      	lsls	r3, r3, #28
 800ed3a:	d501      	bpl.n	800ed40 <_vfiprintf_r+0x3c>
 800ed3c:	692b      	ldr	r3, [r5, #16]
 800ed3e:	b9eb      	cbnz	r3, 800ed7c <_vfiprintf_r+0x78>
 800ed40:	4629      	mov	r1, r5
 800ed42:	4630      	mov	r0, r6
 800ed44:	f000 f972 	bl	800f02c <__swsetup_r>
 800ed48:	b1c0      	cbz	r0, 800ed7c <_vfiprintf_r+0x78>
 800ed4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed4c:	07dc      	lsls	r4, r3, #31
 800ed4e:	d50e      	bpl.n	800ed6e <_vfiprintf_r+0x6a>
 800ed50:	f04f 30ff 	mov.w	r0, #4294967295
 800ed54:	b01d      	add	sp, #116	; 0x74
 800ed56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed5a:	4b7b      	ldr	r3, [pc, #492]	; (800ef48 <_vfiprintf_r+0x244>)
 800ed5c:	429d      	cmp	r5, r3
 800ed5e:	d101      	bne.n	800ed64 <_vfiprintf_r+0x60>
 800ed60:	68b5      	ldr	r5, [r6, #8]
 800ed62:	e7df      	b.n	800ed24 <_vfiprintf_r+0x20>
 800ed64:	4b79      	ldr	r3, [pc, #484]	; (800ef4c <_vfiprintf_r+0x248>)
 800ed66:	429d      	cmp	r5, r3
 800ed68:	bf08      	it	eq
 800ed6a:	68f5      	ldreq	r5, [r6, #12]
 800ed6c:	e7da      	b.n	800ed24 <_vfiprintf_r+0x20>
 800ed6e:	89ab      	ldrh	r3, [r5, #12]
 800ed70:	0598      	lsls	r0, r3, #22
 800ed72:	d4ed      	bmi.n	800ed50 <_vfiprintf_r+0x4c>
 800ed74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed76:	f7fd fd6b 	bl	800c850 <__retarget_lock_release_recursive>
 800ed7a:	e7e9      	b.n	800ed50 <_vfiprintf_r+0x4c>
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ed80:	2320      	movs	r3, #32
 800ed82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed86:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed8a:	2330      	movs	r3, #48	; 0x30
 800ed8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ef50 <_vfiprintf_r+0x24c>
 800ed90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed94:	f04f 0901 	mov.w	r9, #1
 800ed98:	4623      	mov	r3, r4
 800ed9a:	469a      	mov	sl, r3
 800ed9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eda0:	b10a      	cbz	r2, 800eda6 <_vfiprintf_r+0xa2>
 800eda2:	2a25      	cmp	r2, #37	; 0x25
 800eda4:	d1f9      	bne.n	800ed9a <_vfiprintf_r+0x96>
 800eda6:	ebba 0b04 	subs.w	fp, sl, r4
 800edaa:	d00b      	beq.n	800edc4 <_vfiprintf_r+0xc0>
 800edac:	465b      	mov	r3, fp
 800edae:	4622      	mov	r2, r4
 800edb0:	4629      	mov	r1, r5
 800edb2:	4630      	mov	r0, r6
 800edb4:	f7ff ff93 	bl	800ecde <__sfputs_r>
 800edb8:	3001      	adds	r0, #1
 800edba:	f000 80aa 	beq.w	800ef12 <_vfiprintf_r+0x20e>
 800edbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edc0:	445a      	add	r2, fp
 800edc2:	9209      	str	r2, [sp, #36]	; 0x24
 800edc4:	f89a 3000 	ldrb.w	r3, [sl]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	f000 80a2 	beq.w	800ef12 <_vfiprintf_r+0x20e>
 800edce:	2300      	movs	r3, #0
 800edd0:	f04f 32ff 	mov.w	r2, #4294967295
 800edd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edd8:	f10a 0a01 	add.w	sl, sl, #1
 800eddc:	9304      	str	r3, [sp, #16]
 800edde:	9307      	str	r3, [sp, #28]
 800ede0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ede4:	931a      	str	r3, [sp, #104]	; 0x68
 800ede6:	4654      	mov	r4, sl
 800ede8:	2205      	movs	r2, #5
 800edea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edee:	4858      	ldr	r0, [pc, #352]	; (800ef50 <_vfiprintf_r+0x24c>)
 800edf0:	f7f1 fa7e 	bl	80002f0 <memchr>
 800edf4:	9a04      	ldr	r2, [sp, #16]
 800edf6:	b9d8      	cbnz	r0, 800ee30 <_vfiprintf_r+0x12c>
 800edf8:	06d1      	lsls	r1, r2, #27
 800edfa:	bf44      	itt	mi
 800edfc:	2320      	movmi	r3, #32
 800edfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee02:	0713      	lsls	r3, r2, #28
 800ee04:	bf44      	itt	mi
 800ee06:	232b      	movmi	r3, #43	; 0x2b
 800ee08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee10:	2b2a      	cmp	r3, #42	; 0x2a
 800ee12:	d015      	beq.n	800ee40 <_vfiprintf_r+0x13c>
 800ee14:	9a07      	ldr	r2, [sp, #28]
 800ee16:	4654      	mov	r4, sl
 800ee18:	2000      	movs	r0, #0
 800ee1a:	f04f 0c0a 	mov.w	ip, #10
 800ee1e:	4621      	mov	r1, r4
 800ee20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee24:	3b30      	subs	r3, #48	; 0x30
 800ee26:	2b09      	cmp	r3, #9
 800ee28:	d94e      	bls.n	800eec8 <_vfiprintf_r+0x1c4>
 800ee2a:	b1b0      	cbz	r0, 800ee5a <_vfiprintf_r+0x156>
 800ee2c:	9207      	str	r2, [sp, #28]
 800ee2e:	e014      	b.n	800ee5a <_vfiprintf_r+0x156>
 800ee30:	eba0 0308 	sub.w	r3, r0, r8
 800ee34:	fa09 f303 	lsl.w	r3, r9, r3
 800ee38:	4313      	orrs	r3, r2
 800ee3a:	9304      	str	r3, [sp, #16]
 800ee3c:	46a2      	mov	sl, r4
 800ee3e:	e7d2      	b.n	800ede6 <_vfiprintf_r+0xe2>
 800ee40:	9b03      	ldr	r3, [sp, #12]
 800ee42:	1d19      	adds	r1, r3, #4
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	9103      	str	r1, [sp, #12]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	bfbb      	ittet	lt
 800ee4c:	425b      	neglt	r3, r3
 800ee4e:	f042 0202 	orrlt.w	r2, r2, #2
 800ee52:	9307      	strge	r3, [sp, #28]
 800ee54:	9307      	strlt	r3, [sp, #28]
 800ee56:	bfb8      	it	lt
 800ee58:	9204      	strlt	r2, [sp, #16]
 800ee5a:	7823      	ldrb	r3, [r4, #0]
 800ee5c:	2b2e      	cmp	r3, #46	; 0x2e
 800ee5e:	d10c      	bne.n	800ee7a <_vfiprintf_r+0x176>
 800ee60:	7863      	ldrb	r3, [r4, #1]
 800ee62:	2b2a      	cmp	r3, #42	; 0x2a
 800ee64:	d135      	bne.n	800eed2 <_vfiprintf_r+0x1ce>
 800ee66:	9b03      	ldr	r3, [sp, #12]
 800ee68:	1d1a      	adds	r2, r3, #4
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	9203      	str	r2, [sp, #12]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	bfb8      	it	lt
 800ee72:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee76:	3402      	adds	r4, #2
 800ee78:	9305      	str	r3, [sp, #20]
 800ee7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ef60 <_vfiprintf_r+0x25c>
 800ee7e:	7821      	ldrb	r1, [r4, #0]
 800ee80:	2203      	movs	r2, #3
 800ee82:	4650      	mov	r0, sl
 800ee84:	f7f1 fa34 	bl	80002f0 <memchr>
 800ee88:	b140      	cbz	r0, 800ee9c <_vfiprintf_r+0x198>
 800ee8a:	2340      	movs	r3, #64	; 0x40
 800ee8c:	eba0 000a 	sub.w	r0, r0, sl
 800ee90:	fa03 f000 	lsl.w	r0, r3, r0
 800ee94:	9b04      	ldr	r3, [sp, #16]
 800ee96:	4303      	orrs	r3, r0
 800ee98:	3401      	adds	r4, #1
 800ee9a:	9304      	str	r3, [sp, #16]
 800ee9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eea0:	482c      	ldr	r0, [pc, #176]	; (800ef54 <_vfiprintf_r+0x250>)
 800eea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eea6:	2206      	movs	r2, #6
 800eea8:	f7f1 fa22 	bl	80002f0 <memchr>
 800eeac:	2800      	cmp	r0, #0
 800eeae:	d03f      	beq.n	800ef30 <_vfiprintf_r+0x22c>
 800eeb0:	4b29      	ldr	r3, [pc, #164]	; (800ef58 <_vfiprintf_r+0x254>)
 800eeb2:	bb1b      	cbnz	r3, 800eefc <_vfiprintf_r+0x1f8>
 800eeb4:	9b03      	ldr	r3, [sp, #12]
 800eeb6:	3307      	adds	r3, #7
 800eeb8:	f023 0307 	bic.w	r3, r3, #7
 800eebc:	3308      	adds	r3, #8
 800eebe:	9303      	str	r3, [sp, #12]
 800eec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eec2:	443b      	add	r3, r7
 800eec4:	9309      	str	r3, [sp, #36]	; 0x24
 800eec6:	e767      	b.n	800ed98 <_vfiprintf_r+0x94>
 800eec8:	fb0c 3202 	mla	r2, ip, r2, r3
 800eecc:	460c      	mov	r4, r1
 800eece:	2001      	movs	r0, #1
 800eed0:	e7a5      	b.n	800ee1e <_vfiprintf_r+0x11a>
 800eed2:	2300      	movs	r3, #0
 800eed4:	3401      	adds	r4, #1
 800eed6:	9305      	str	r3, [sp, #20]
 800eed8:	4619      	mov	r1, r3
 800eeda:	f04f 0c0a 	mov.w	ip, #10
 800eede:	4620      	mov	r0, r4
 800eee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eee4:	3a30      	subs	r2, #48	; 0x30
 800eee6:	2a09      	cmp	r2, #9
 800eee8:	d903      	bls.n	800eef2 <_vfiprintf_r+0x1ee>
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d0c5      	beq.n	800ee7a <_vfiprintf_r+0x176>
 800eeee:	9105      	str	r1, [sp, #20]
 800eef0:	e7c3      	b.n	800ee7a <_vfiprintf_r+0x176>
 800eef2:	fb0c 2101 	mla	r1, ip, r1, r2
 800eef6:	4604      	mov	r4, r0
 800eef8:	2301      	movs	r3, #1
 800eefa:	e7f0      	b.n	800eede <_vfiprintf_r+0x1da>
 800eefc:	ab03      	add	r3, sp, #12
 800eefe:	9300      	str	r3, [sp, #0]
 800ef00:	462a      	mov	r2, r5
 800ef02:	4b16      	ldr	r3, [pc, #88]	; (800ef5c <_vfiprintf_r+0x258>)
 800ef04:	a904      	add	r1, sp, #16
 800ef06:	4630      	mov	r0, r6
 800ef08:	f7fd fdde 	bl	800cac8 <_printf_float>
 800ef0c:	4607      	mov	r7, r0
 800ef0e:	1c78      	adds	r0, r7, #1
 800ef10:	d1d6      	bne.n	800eec0 <_vfiprintf_r+0x1bc>
 800ef12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef14:	07d9      	lsls	r1, r3, #31
 800ef16:	d405      	bmi.n	800ef24 <_vfiprintf_r+0x220>
 800ef18:	89ab      	ldrh	r3, [r5, #12]
 800ef1a:	059a      	lsls	r2, r3, #22
 800ef1c:	d402      	bmi.n	800ef24 <_vfiprintf_r+0x220>
 800ef1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef20:	f7fd fc96 	bl	800c850 <__retarget_lock_release_recursive>
 800ef24:	89ab      	ldrh	r3, [r5, #12]
 800ef26:	065b      	lsls	r3, r3, #25
 800ef28:	f53f af12 	bmi.w	800ed50 <_vfiprintf_r+0x4c>
 800ef2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef2e:	e711      	b.n	800ed54 <_vfiprintf_r+0x50>
 800ef30:	ab03      	add	r3, sp, #12
 800ef32:	9300      	str	r3, [sp, #0]
 800ef34:	462a      	mov	r2, r5
 800ef36:	4b09      	ldr	r3, [pc, #36]	; (800ef5c <_vfiprintf_r+0x258>)
 800ef38:	a904      	add	r1, sp, #16
 800ef3a:	4630      	mov	r0, r6
 800ef3c:	f7fe f850 	bl	800cfe0 <_printf_i>
 800ef40:	e7e4      	b.n	800ef0c <_vfiprintf_r+0x208>
 800ef42:	bf00      	nop
 800ef44:	08010198 	.word	0x08010198
 800ef48:	080101b8 	.word	0x080101b8
 800ef4c:	08010178 	.word	0x08010178
 800ef50:	080103fc 	.word	0x080103fc
 800ef54:	08010406 	.word	0x08010406
 800ef58:	0800cac9 	.word	0x0800cac9
 800ef5c:	0800ecdf 	.word	0x0800ecdf
 800ef60:	08010402 	.word	0x08010402

0800ef64 <_read_r>:
 800ef64:	b538      	push	{r3, r4, r5, lr}
 800ef66:	4d07      	ldr	r5, [pc, #28]	; (800ef84 <_read_r+0x20>)
 800ef68:	4604      	mov	r4, r0
 800ef6a:	4608      	mov	r0, r1
 800ef6c:	4611      	mov	r1, r2
 800ef6e:	2200      	movs	r2, #0
 800ef70:	602a      	str	r2, [r5, #0]
 800ef72:	461a      	mov	r2, r3
 800ef74:	f7f3 ff1a 	bl	8002dac <_read>
 800ef78:	1c43      	adds	r3, r0, #1
 800ef7a:	d102      	bne.n	800ef82 <_read_r+0x1e>
 800ef7c:	682b      	ldr	r3, [r5, #0]
 800ef7e:	b103      	cbz	r3, 800ef82 <_read_r+0x1e>
 800ef80:	6023      	str	r3, [r4, #0]
 800ef82:	bd38      	pop	{r3, r4, r5, pc}
 800ef84:	240050cc 	.word	0x240050cc

0800ef88 <__swbuf_r>:
 800ef88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef8a:	460e      	mov	r6, r1
 800ef8c:	4614      	mov	r4, r2
 800ef8e:	4605      	mov	r5, r0
 800ef90:	b118      	cbz	r0, 800ef9a <__swbuf_r+0x12>
 800ef92:	6983      	ldr	r3, [r0, #24]
 800ef94:	b90b      	cbnz	r3, 800ef9a <__swbuf_r+0x12>
 800ef96:	f7fd fb97 	bl	800c6c8 <__sinit>
 800ef9a:	4b21      	ldr	r3, [pc, #132]	; (800f020 <__swbuf_r+0x98>)
 800ef9c:	429c      	cmp	r4, r3
 800ef9e:	d12b      	bne.n	800eff8 <__swbuf_r+0x70>
 800efa0:	686c      	ldr	r4, [r5, #4]
 800efa2:	69a3      	ldr	r3, [r4, #24]
 800efa4:	60a3      	str	r3, [r4, #8]
 800efa6:	89a3      	ldrh	r3, [r4, #12]
 800efa8:	071a      	lsls	r2, r3, #28
 800efaa:	d52f      	bpl.n	800f00c <__swbuf_r+0x84>
 800efac:	6923      	ldr	r3, [r4, #16]
 800efae:	b36b      	cbz	r3, 800f00c <__swbuf_r+0x84>
 800efb0:	6923      	ldr	r3, [r4, #16]
 800efb2:	6820      	ldr	r0, [r4, #0]
 800efb4:	1ac0      	subs	r0, r0, r3
 800efb6:	6963      	ldr	r3, [r4, #20]
 800efb8:	b2f6      	uxtb	r6, r6
 800efba:	4283      	cmp	r3, r0
 800efbc:	4637      	mov	r7, r6
 800efbe:	dc04      	bgt.n	800efca <__swbuf_r+0x42>
 800efc0:	4621      	mov	r1, r4
 800efc2:	4628      	mov	r0, r5
 800efc4:	f7ff f8cc 	bl	800e160 <_fflush_r>
 800efc8:	bb30      	cbnz	r0, 800f018 <__swbuf_r+0x90>
 800efca:	68a3      	ldr	r3, [r4, #8]
 800efcc:	3b01      	subs	r3, #1
 800efce:	60a3      	str	r3, [r4, #8]
 800efd0:	6823      	ldr	r3, [r4, #0]
 800efd2:	1c5a      	adds	r2, r3, #1
 800efd4:	6022      	str	r2, [r4, #0]
 800efd6:	701e      	strb	r6, [r3, #0]
 800efd8:	6963      	ldr	r3, [r4, #20]
 800efda:	3001      	adds	r0, #1
 800efdc:	4283      	cmp	r3, r0
 800efde:	d004      	beq.n	800efea <__swbuf_r+0x62>
 800efe0:	89a3      	ldrh	r3, [r4, #12]
 800efe2:	07db      	lsls	r3, r3, #31
 800efe4:	d506      	bpl.n	800eff4 <__swbuf_r+0x6c>
 800efe6:	2e0a      	cmp	r6, #10
 800efe8:	d104      	bne.n	800eff4 <__swbuf_r+0x6c>
 800efea:	4621      	mov	r1, r4
 800efec:	4628      	mov	r0, r5
 800efee:	f7ff f8b7 	bl	800e160 <_fflush_r>
 800eff2:	b988      	cbnz	r0, 800f018 <__swbuf_r+0x90>
 800eff4:	4638      	mov	r0, r7
 800eff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eff8:	4b0a      	ldr	r3, [pc, #40]	; (800f024 <__swbuf_r+0x9c>)
 800effa:	429c      	cmp	r4, r3
 800effc:	d101      	bne.n	800f002 <__swbuf_r+0x7a>
 800effe:	68ac      	ldr	r4, [r5, #8]
 800f000:	e7cf      	b.n	800efa2 <__swbuf_r+0x1a>
 800f002:	4b09      	ldr	r3, [pc, #36]	; (800f028 <__swbuf_r+0xa0>)
 800f004:	429c      	cmp	r4, r3
 800f006:	bf08      	it	eq
 800f008:	68ec      	ldreq	r4, [r5, #12]
 800f00a:	e7ca      	b.n	800efa2 <__swbuf_r+0x1a>
 800f00c:	4621      	mov	r1, r4
 800f00e:	4628      	mov	r0, r5
 800f010:	f000 f80c 	bl	800f02c <__swsetup_r>
 800f014:	2800      	cmp	r0, #0
 800f016:	d0cb      	beq.n	800efb0 <__swbuf_r+0x28>
 800f018:	f04f 37ff 	mov.w	r7, #4294967295
 800f01c:	e7ea      	b.n	800eff4 <__swbuf_r+0x6c>
 800f01e:	bf00      	nop
 800f020:	08010198 	.word	0x08010198
 800f024:	080101b8 	.word	0x080101b8
 800f028:	08010178 	.word	0x08010178

0800f02c <__swsetup_r>:
 800f02c:	4b32      	ldr	r3, [pc, #200]	; (800f0f8 <__swsetup_r+0xcc>)
 800f02e:	b570      	push	{r4, r5, r6, lr}
 800f030:	681d      	ldr	r5, [r3, #0]
 800f032:	4606      	mov	r6, r0
 800f034:	460c      	mov	r4, r1
 800f036:	b125      	cbz	r5, 800f042 <__swsetup_r+0x16>
 800f038:	69ab      	ldr	r3, [r5, #24]
 800f03a:	b913      	cbnz	r3, 800f042 <__swsetup_r+0x16>
 800f03c:	4628      	mov	r0, r5
 800f03e:	f7fd fb43 	bl	800c6c8 <__sinit>
 800f042:	4b2e      	ldr	r3, [pc, #184]	; (800f0fc <__swsetup_r+0xd0>)
 800f044:	429c      	cmp	r4, r3
 800f046:	d10f      	bne.n	800f068 <__swsetup_r+0x3c>
 800f048:	686c      	ldr	r4, [r5, #4]
 800f04a:	89a3      	ldrh	r3, [r4, #12]
 800f04c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f050:	0719      	lsls	r1, r3, #28
 800f052:	d42c      	bmi.n	800f0ae <__swsetup_r+0x82>
 800f054:	06dd      	lsls	r5, r3, #27
 800f056:	d411      	bmi.n	800f07c <__swsetup_r+0x50>
 800f058:	2309      	movs	r3, #9
 800f05a:	6033      	str	r3, [r6, #0]
 800f05c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f060:	81a3      	strh	r3, [r4, #12]
 800f062:	f04f 30ff 	mov.w	r0, #4294967295
 800f066:	e03e      	b.n	800f0e6 <__swsetup_r+0xba>
 800f068:	4b25      	ldr	r3, [pc, #148]	; (800f100 <__swsetup_r+0xd4>)
 800f06a:	429c      	cmp	r4, r3
 800f06c:	d101      	bne.n	800f072 <__swsetup_r+0x46>
 800f06e:	68ac      	ldr	r4, [r5, #8]
 800f070:	e7eb      	b.n	800f04a <__swsetup_r+0x1e>
 800f072:	4b24      	ldr	r3, [pc, #144]	; (800f104 <__swsetup_r+0xd8>)
 800f074:	429c      	cmp	r4, r3
 800f076:	bf08      	it	eq
 800f078:	68ec      	ldreq	r4, [r5, #12]
 800f07a:	e7e6      	b.n	800f04a <__swsetup_r+0x1e>
 800f07c:	0758      	lsls	r0, r3, #29
 800f07e:	d512      	bpl.n	800f0a6 <__swsetup_r+0x7a>
 800f080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f082:	b141      	cbz	r1, 800f096 <__swsetup_r+0x6a>
 800f084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f088:	4299      	cmp	r1, r3
 800f08a:	d002      	beq.n	800f092 <__swsetup_r+0x66>
 800f08c:	4630      	mov	r0, r6
 800f08e:	f7ff fc67 	bl	800e960 <_free_r>
 800f092:	2300      	movs	r3, #0
 800f094:	6363      	str	r3, [r4, #52]	; 0x34
 800f096:	89a3      	ldrh	r3, [r4, #12]
 800f098:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f09c:	81a3      	strh	r3, [r4, #12]
 800f09e:	2300      	movs	r3, #0
 800f0a0:	6063      	str	r3, [r4, #4]
 800f0a2:	6923      	ldr	r3, [r4, #16]
 800f0a4:	6023      	str	r3, [r4, #0]
 800f0a6:	89a3      	ldrh	r3, [r4, #12]
 800f0a8:	f043 0308 	orr.w	r3, r3, #8
 800f0ac:	81a3      	strh	r3, [r4, #12]
 800f0ae:	6923      	ldr	r3, [r4, #16]
 800f0b0:	b94b      	cbnz	r3, 800f0c6 <__swsetup_r+0x9a>
 800f0b2:	89a3      	ldrh	r3, [r4, #12]
 800f0b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f0b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0bc:	d003      	beq.n	800f0c6 <__swsetup_r+0x9a>
 800f0be:	4621      	mov	r1, r4
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	f000 f877 	bl	800f1b4 <__smakebuf_r>
 800f0c6:	89a0      	ldrh	r0, [r4, #12]
 800f0c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0cc:	f010 0301 	ands.w	r3, r0, #1
 800f0d0:	d00a      	beq.n	800f0e8 <__swsetup_r+0xbc>
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	60a3      	str	r3, [r4, #8]
 800f0d6:	6963      	ldr	r3, [r4, #20]
 800f0d8:	425b      	negs	r3, r3
 800f0da:	61a3      	str	r3, [r4, #24]
 800f0dc:	6923      	ldr	r3, [r4, #16]
 800f0de:	b943      	cbnz	r3, 800f0f2 <__swsetup_r+0xc6>
 800f0e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f0e4:	d1ba      	bne.n	800f05c <__swsetup_r+0x30>
 800f0e6:	bd70      	pop	{r4, r5, r6, pc}
 800f0e8:	0781      	lsls	r1, r0, #30
 800f0ea:	bf58      	it	pl
 800f0ec:	6963      	ldrpl	r3, [r4, #20]
 800f0ee:	60a3      	str	r3, [r4, #8]
 800f0f0:	e7f4      	b.n	800f0dc <__swsetup_r+0xb0>
 800f0f2:	2000      	movs	r0, #0
 800f0f4:	e7f7      	b.n	800f0e6 <__swsetup_r+0xba>
 800f0f6:	bf00      	nop
 800f0f8:	2400002c 	.word	0x2400002c
 800f0fc:	08010198 	.word	0x08010198
 800f100:	080101b8 	.word	0x080101b8
 800f104:	08010178 	.word	0x08010178

0800f108 <__assert_func>:
 800f108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f10a:	4614      	mov	r4, r2
 800f10c:	461a      	mov	r2, r3
 800f10e:	4b09      	ldr	r3, [pc, #36]	; (800f134 <__assert_func+0x2c>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	4605      	mov	r5, r0
 800f114:	68d8      	ldr	r0, [r3, #12]
 800f116:	b14c      	cbz	r4, 800f12c <__assert_func+0x24>
 800f118:	4b07      	ldr	r3, [pc, #28]	; (800f138 <__assert_func+0x30>)
 800f11a:	9100      	str	r1, [sp, #0]
 800f11c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f120:	4906      	ldr	r1, [pc, #24]	; (800f13c <__assert_func+0x34>)
 800f122:	462b      	mov	r3, r5
 800f124:	f000 f80e 	bl	800f144 <fiprintf>
 800f128:	f000 f8ec 	bl	800f304 <abort>
 800f12c:	4b04      	ldr	r3, [pc, #16]	; (800f140 <__assert_func+0x38>)
 800f12e:	461c      	mov	r4, r3
 800f130:	e7f3      	b.n	800f11a <__assert_func+0x12>
 800f132:	bf00      	nop
 800f134:	2400002c 	.word	0x2400002c
 800f138:	0801040d 	.word	0x0801040d
 800f13c:	0801041a 	.word	0x0801041a
 800f140:	08010448 	.word	0x08010448

0800f144 <fiprintf>:
 800f144:	b40e      	push	{r1, r2, r3}
 800f146:	b503      	push	{r0, r1, lr}
 800f148:	4601      	mov	r1, r0
 800f14a:	ab03      	add	r3, sp, #12
 800f14c:	4805      	ldr	r0, [pc, #20]	; (800f164 <fiprintf+0x20>)
 800f14e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f152:	6800      	ldr	r0, [r0, #0]
 800f154:	9301      	str	r3, [sp, #4]
 800f156:	f7ff fdd5 	bl	800ed04 <_vfiprintf_r>
 800f15a:	b002      	add	sp, #8
 800f15c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f160:	b003      	add	sp, #12
 800f162:	4770      	bx	lr
 800f164:	2400002c 	.word	0x2400002c

0800f168 <__swhatbuf_r>:
 800f168:	b570      	push	{r4, r5, r6, lr}
 800f16a:	460e      	mov	r6, r1
 800f16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f170:	2900      	cmp	r1, #0
 800f172:	b096      	sub	sp, #88	; 0x58
 800f174:	4614      	mov	r4, r2
 800f176:	461d      	mov	r5, r3
 800f178:	da08      	bge.n	800f18c <__swhatbuf_r+0x24>
 800f17a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f17e:	2200      	movs	r2, #0
 800f180:	602a      	str	r2, [r5, #0]
 800f182:	061a      	lsls	r2, r3, #24
 800f184:	d410      	bmi.n	800f1a8 <__swhatbuf_r+0x40>
 800f186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f18a:	e00e      	b.n	800f1aa <__swhatbuf_r+0x42>
 800f18c:	466a      	mov	r2, sp
 800f18e:	f000 f8c1 	bl	800f314 <_fstat_r>
 800f192:	2800      	cmp	r0, #0
 800f194:	dbf1      	blt.n	800f17a <__swhatbuf_r+0x12>
 800f196:	9a01      	ldr	r2, [sp, #4]
 800f198:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f19c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f1a0:	425a      	negs	r2, r3
 800f1a2:	415a      	adcs	r2, r3
 800f1a4:	602a      	str	r2, [r5, #0]
 800f1a6:	e7ee      	b.n	800f186 <__swhatbuf_r+0x1e>
 800f1a8:	2340      	movs	r3, #64	; 0x40
 800f1aa:	2000      	movs	r0, #0
 800f1ac:	6023      	str	r3, [r4, #0]
 800f1ae:	b016      	add	sp, #88	; 0x58
 800f1b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f1b4 <__smakebuf_r>:
 800f1b4:	898b      	ldrh	r3, [r1, #12]
 800f1b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f1b8:	079d      	lsls	r5, r3, #30
 800f1ba:	4606      	mov	r6, r0
 800f1bc:	460c      	mov	r4, r1
 800f1be:	d507      	bpl.n	800f1d0 <__smakebuf_r+0x1c>
 800f1c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f1c4:	6023      	str	r3, [r4, #0]
 800f1c6:	6123      	str	r3, [r4, #16]
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	6163      	str	r3, [r4, #20]
 800f1cc:	b002      	add	sp, #8
 800f1ce:	bd70      	pop	{r4, r5, r6, pc}
 800f1d0:	ab01      	add	r3, sp, #4
 800f1d2:	466a      	mov	r2, sp
 800f1d4:	f7ff ffc8 	bl	800f168 <__swhatbuf_r>
 800f1d8:	9900      	ldr	r1, [sp, #0]
 800f1da:	4605      	mov	r5, r0
 800f1dc:	4630      	mov	r0, r6
 800f1de:	f7fd fb6f 	bl	800c8c0 <_malloc_r>
 800f1e2:	b948      	cbnz	r0, 800f1f8 <__smakebuf_r+0x44>
 800f1e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1e8:	059a      	lsls	r2, r3, #22
 800f1ea:	d4ef      	bmi.n	800f1cc <__smakebuf_r+0x18>
 800f1ec:	f023 0303 	bic.w	r3, r3, #3
 800f1f0:	f043 0302 	orr.w	r3, r3, #2
 800f1f4:	81a3      	strh	r3, [r4, #12]
 800f1f6:	e7e3      	b.n	800f1c0 <__smakebuf_r+0xc>
 800f1f8:	4b0d      	ldr	r3, [pc, #52]	; (800f230 <__smakebuf_r+0x7c>)
 800f1fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800f1fc:	89a3      	ldrh	r3, [r4, #12]
 800f1fe:	6020      	str	r0, [r4, #0]
 800f200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f204:	81a3      	strh	r3, [r4, #12]
 800f206:	9b00      	ldr	r3, [sp, #0]
 800f208:	6163      	str	r3, [r4, #20]
 800f20a:	9b01      	ldr	r3, [sp, #4]
 800f20c:	6120      	str	r0, [r4, #16]
 800f20e:	b15b      	cbz	r3, 800f228 <__smakebuf_r+0x74>
 800f210:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f214:	4630      	mov	r0, r6
 800f216:	f000 f88f 	bl	800f338 <_isatty_r>
 800f21a:	b128      	cbz	r0, 800f228 <__smakebuf_r+0x74>
 800f21c:	89a3      	ldrh	r3, [r4, #12]
 800f21e:	f023 0303 	bic.w	r3, r3, #3
 800f222:	f043 0301 	orr.w	r3, r3, #1
 800f226:	81a3      	strh	r3, [r4, #12]
 800f228:	89a0      	ldrh	r0, [r4, #12]
 800f22a:	4305      	orrs	r5, r0
 800f22c:	81a5      	strh	r5, [r4, #12]
 800f22e:	e7cd      	b.n	800f1cc <__smakebuf_r+0x18>
 800f230:	0800c661 	.word	0x0800c661

0800f234 <__ascii_mbtowc>:
 800f234:	b082      	sub	sp, #8
 800f236:	b901      	cbnz	r1, 800f23a <__ascii_mbtowc+0x6>
 800f238:	a901      	add	r1, sp, #4
 800f23a:	b142      	cbz	r2, 800f24e <__ascii_mbtowc+0x1a>
 800f23c:	b14b      	cbz	r3, 800f252 <__ascii_mbtowc+0x1e>
 800f23e:	7813      	ldrb	r3, [r2, #0]
 800f240:	600b      	str	r3, [r1, #0]
 800f242:	7812      	ldrb	r2, [r2, #0]
 800f244:	1e10      	subs	r0, r2, #0
 800f246:	bf18      	it	ne
 800f248:	2001      	movne	r0, #1
 800f24a:	b002      	add	sp, #8
 800f24c:	4770      	bx	lr
 800f24e:	4610      	mov	r0, r2
 800f250:	e7fb      	b.n	800f24a <__ascii_mbtowc+0x16>
 800f252:	f06f 0001 	mvn.w	r0, #1
 800f256:	e7f8      	b.n	800f24a <__ascii_mbtowc+0x16>

0800f258 <memmove>:
 800f258:	4288      	cmp	r0, r1
 800f25a:	b510      	push	{r4, lr}
 800f25c:	eb01 0402 	add.w	r4, r1, r2
 800f260:	d902      	bls.n	800f268 <memmove+0x10>
 800f262:	4284      	cmp	r4, r0
 800f264:	4623      	mov	r3, r4
 800f266:	d807      	bhi.n	800f278 <memmove+0x20>
 800f268:	1e43      	subs	r3, r0, #1
 800f26a:	42a1      	cmp	r1, r4
 800f26c:	d008      	beq.n	800f280 <memmove+0x28>
 800f26e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f272:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f276:	e7f8      	b.n	800f26a <memmove+0x12>
 800f278:	4402      	add	r2, r0
 800f27a:	4601      	mov	r1, r0
 800f27c:	428a      	cmp	r2, r1
 800f27e:	d100      	bne.n	800f282 <memmove+0x2a>
 800f280:	bd10      	pop	{r4, pc}
 800f282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f28a:	e7f7      	b.n	800f27c <memmove+0x24>

0800f28c <_realloc_r>:
 800f28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f290:	4680      	mov	r8, r0
 800f292:	4614      	mov	r4, r2
 800f294:	460e      	mov	r6, r1
 800f296:	b921      	cbnz	r1, 800f2a2 <_realloc_r+0x16>
 800f298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f29c:	4611      	mov	r1, r2
 800f29e:	f7fd bb0f 	b.w	800c8c0 <_malloc_r>
 800f2a2:	b92a      	cbnz	r2, 800f2b0 <_realloc_r+0x24>
 800f2a4:	f7ff fb5c 	bl	800e960 <_free_r>
 800f2a8:	4625      	mov	r5, r4
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2b0:	f000 f852 	bl	800f358 <_malloc_usable_size_r>
 800f2b4:	4284      	cmp	r4, r0
 800f2b6:	4607      	mov	r7, r0
 800f2b8:	d802      	bhi.n	800f2c0 <_realloc_r+0x34>
 800f2ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f2be:	d812      	bhi.n	800f2e6 <_realloc_r+0x5a>
 800f2c0:	4621      	mov	r1, r4
 800f2c2:	4640      	mov	r0, r8
 800f2c4:	f7fd fafc 	bl	800c8c0 <_malloc_r>
 800f2c8:	4605      	mov	r5, r0
 800f2ca:	2800      	cmp	r0, #0
 800f2cc:	d0ed      	beq.n	800f2aa <_realloc_r+0x1e>
 800f2ce:	42bc      	cmp	r4, r7
 800f2d0:	4622      	mov	r2, r4
 800f2d2:	4631      	mov	r1, r6
 800f2d4:	bf28      	it	cs
 800f2d6:	463a      	movcs	r2, r7
 800f2d8:	f7fd fabb 	bl	800c852 <memcpy>
 800f2dc:	4631      	mov	r1, r6
 800f2de:	4640      	mov	r0, r8
 800f2e0:	f7ff fb3e 	bl	800e960 <_free_r>
 800f2e4:	e7e1      	b.n	800f2aa <_realloc_r+0x1e>
 800f2e6:	4635      	mov	r5, r6
 800f2e8:	e7df      	b.n	800f2aa <_realloc_r+0x1e>

0800f2ea <__ascii_wctomb>:
 800f2ea:	b149      	cbz	r1, 800f300 <__ascii_wctomb+0x16>
 800f2ec:	2aff      	cmp	r2, #255	; 0xff
 800f2ee:	bf85      	ittet	hi
 800f2f0:	238a      	movhi	r3, #138	; 0x8a
 800f2f2:	6003      	strhi	r3, [r0, #0]
 800f2f4:	700a      	strbls	r2, [r1, #0]
 800f2f6:	f04f 30ff 	movhi.w	r0, #4294967295
 800f2fa:	bf98      	it	ls
 800f2fc:	2001      	movls	r0, #1
 800f2fe:	4770      	bx	lr
 800f300:	4608      	mov	r0, r1
 800f302:	4770      	bx	lr

0800f304 <abort>:
 800f304:	b508      	push	{r3, lr}
 800f306:	2006      	movs	r0, #6
 800f308:	f000 f856 	bl	800f3b8 <raise>
 800f30c:	2001      	movs	r0, #1
 800f30e:	f7f3 fd43 	bl	8002d98 <_exit>
	...

0800f314 <_fstat_r>:
 800f314:	b538      	push	{r3, r4, r5, lr}
 800f316:	4d07      	ldr	r5, [pc, #28]	; (800f334 <_fstat_r+0x20>)
 800f318:	2300      	movs	r3, #0
 800f31a:	4604      	mov	r4, r0
 800f31c:	4608      	mov	r0, r1
 800f31e:	4611      	mov	r1, r2
 800f320:	602b      	str	r3, [r5, #0]
 800f322:	f7f3 fd88 	bl	8002e36 <_fstat>
 800f326:	1c43      	adds	r3, r0, #1
 800f328:	d102      	bne.n	800f330 <_fstat_r+0x1c>
 800f32a:	682b      	ldr	r3, [r5, #0]
 800f32c:	b103      	cbz	r3, 800f330 <_fstat_r+0x1c>
 800f32e:	6023      	str	r3, [r4, #0]
 800f330:	bd38      	pop	{r3, r4, r5, pc}
 800f332:	bf00      	nop
 800f334:	240050cc 	.word	0x240050cc

0800f338 <_isatty_r>:
 800f338:	b538      	push	{r3, r4, r5, lr}
 800f33a:	4d06      	ldr	r5, [pc, #24]	; (800f354 <_isatty_r+0x1c>)
 800f33c:	2300      	movs	r3, #0
 800f33e:	4604      	mov	r4, r0
 800f340:	4608      	mov	r0, r1
 800f342:	602b      	str	r3, [r5, #0]
 800f344:	f7f3 fd87 	bl	8002e56 <_isatty>
 800f348:	1c43      	adds	r3, r0, #1
 800f34a:	d102      	bne.n	800f352 <_isatty_r+0x1a>
 800f34c:	682b      	ldr	r3, [r5, #0]
 800f34e:	b103      	cbz	r3, 800f352 <_isatty_r+0x1a>
 800f350:	6023      	str	r3, [r4, #0]
 800f352:	bd38      	pop	{r3, r4, r5, pc}
 800f354:	240050cc 	.word	0x240050cc

0800f358 <_malloc_usable_size_r>:
 800f358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f35c:	1f18      	subs	r0, r3, #4
 800f35e:	2b00      	cmp	r3, #0
 800f360:	bfbc      	itt	lt
 800f362:	580b      	ldrlt	r3, [r1, r0]
 800f364:	18c0      	addlt	r0, r0, r3
 800f366:	4770      	bx	lr

0800f368 <_raise_r>:
 800f368:	291f      	cmp	r1, #31
 800f36a:	b538      	push	{r3, r4, r5, lr}
 800f36c:	4604      	mov	r4, r0
 800f36e:	460d      	mov	r5, r1
 800f370:	d904      	bls.n	800f37c <_raise_r+0x14>
 800f372:	2316      	movs	r3, #22
 800f374:	6003      	str	r3, [r0, #0]
 800f376:	f04f 30ff 	mov.w	r0, #4294967295
 800f37a:	bd38      	pop	{r3, r4, r5, pc}
 800f37c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f37e:	b112      	cbz	r2, 800f386 <_raise_r+0x1e>
 800f380:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f384:	b94b      	cbnz	r3, 800f39a <_raise_r+0x32>
 800f386:	4620      	mov	r0, r4
 800f388:	f000 f830 	bl	800f3ec <_getpid_r>
 800f38c:	462a      	mov	r2, r5
 800f38e:	4601      	mov	r1, r0
 800f390:	4620      	mov	r0, r4
 800f392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f396:	f000 b817 	b.w	800f3c8 <_kill_r>
 800f39a:	2b01      	cmp	r3, #1
 800f39c:	d00a      	beq.n	800f3b4 <_raise_r+0x4c>
 800f39e:	1c59      	adds	r1, r3, #1
 800f3a0:	d103      	bne.n	800f3aa <_raise_r+0x42>
 800f3a2:	2316      	movs	r3, #22
 800f3a4:	6003      	str	r3, [r0, #0]
 800f3a6:	2001      	movs	r0, #1
 800f3a8:	e7e7      	b.n	800f37a <_raise_r+0x12>
 800f3aa:	2400      	movs	r4, #0
 800f3ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	4798      	blx	r3
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	e7e0      	b.n	800f37a <_raise_r+0x12>

0800f3b8 <raise>:
 800f3b8:	4b02      	ldr	r3, [pc, #8]	; (800f3c4 <raise+0xc>)
 800f3ba:	4601      	mov	r1, r0
 800f3bc:	6818      	ldr	r0, [r3, #0]
 800f3be:	f7ff bfd3 	b.w	800f368 <_raise_r>
 800f3c2:	bf00      	nop
 800f3c4:	2400002c 	.word	0x2400002c

0800f3c8 <_kill_r>:
 800f3c8:	b538      	push	{r3, r4, r5, lr}
 800f3ca:	4d07      	ldr	r5, [pc, #28]	; (800f3e8 <_kill_r+0x20>)
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	4608      	mov	r0, r1
 800f3d2:	4611      	mov	r1, r2
 800f3d4:	602b      	str	r3, [r5, #0]
 800f3d6:	f7f3 fccf 	bl	8002d78 <_kill>
 800f3da:	1c43      	adds	r3, r0, #1
 800f3dc:	d102      	bne.n	800f3e4 <_kill_r+0x1c>
 800f3de:	682b      	ldr	r3, [r5, #0]
 800f3e0:	b103      	cbz	r3, 800f3e4 <_kill_r+0x1c>
 800f3e2:	6023      	str	r3, [r4, #0]
 800f3e4:	bd38      	pop	{r3, r4, r5, pc}
 800f3e6:	bf00      	nop
 800f3e8:	240050cc 	.word	0x240050cc

0800f3ec <_getpid_r>:
 800f3ec:	f7f3 bcbc 	b.w	8002d68 <_getpid>

0800f3f0 <atan2>:
 800f3f0:	f000 b826 	b.w	800f440 <__ieee754_atan2>
 800f3f4:	0000      	movs	r0, r0
	...

0800f3f8 <fmod>:
 800f3f8:	b508      	push	{r3, lr}
 800f3fa:	ed2d 8b04 	vpush	{d8-d9}
 800f3fe:	eeb0 9b40 	vmov.f64	d9, d0
 800f402:	eeb0 8b41 	vmov.f64	d8, d1
 800f406:	f000 f8dd 	bl	800f5c4 <__ieee754_fmod>
 800f40a:	eeb4 9b48 	vcmp.f64	d9, d8
 800f40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f412:	d60c      	bvs.n	800f42e <fmod+0x36>
 800f414:	ed9f 9b08 	vldr	d9, [pc, #32]	; 800f438 <fmod+0x40>
 800f418:	eeb4 8b49 	vcmp.f64	d8, d9
 800f41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f420:	d105      	bne.n	800f42e <fmod+0x36>
 800f422:	f7fd f8f3 	bl	800c60c <__errno>
 800f426:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800f42a:	2321      	movs	r3, #33	; 0x21
 800f42c:	6003      	str	r3, [r0, #0]
 800f42e:	ecbd 8b04 	vpop	{d8-d9}
 800f432:	bd08      	pop	{r3, pc}
 800f434:	f3af 8000 	nop.w
	...

0800f440 <__ieee754_atan2>:
 800f440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f442:	eeb0 7b40 	vmov.f64	d7, d0
 800f446:	ee11 6a10 	vmov	r6, s2
 800f44a:	ee11 0a90 	vmov	r0, s3
 800f44e:	4273      	negs	r3, r6
 800f450:	4f59      	ldr	r7, [pc, #356]	; (800f5b8 <__ieee754_atan2+0x178>)
 800f452:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800f456:	4333      	orrs	r3, r6
 800f458:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f45c:	42bb      	cmp	r3, r7
 800f45e:	d80d      	bhi.n	800f47c <__ieee754_atan2+0x3c>
 800f460:	ee10 ca10 	vmov	ip, s0
 800f464:	ee17 5a90 	vmov	r5, s15
 800f468:	f1cc 0100 	rsb	r1, ip, #0
 800f46c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f470:	ea41 010c 	orr.w	r1, r1, ip
 800f474:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800f478:	42b9      	cmp	r1, r7
 800f47a:	d904      	bls.n	800f486 <__ieee754_atan2+0x46>
 800f47c:	ee37 7b01 	vadd.f64	d7, d7, d1
 800f480:	eeb0 0b47 	vmov.f64	d0, d7
 800f484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f486:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 800f48a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800f48e:	4331      	orrs	r1, r6
 800f490:	d103      	bne.n	800f49a <__ieee754_atan2+0x5a>
 800f492:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f496:	f000 b9a7 	b.w	800f7e8 <atan>
 800f49a:	1784      	asrs	r4, r0, #30
 800f49c:	f004 0402 	and.w	r4, r4, #2
 800f4a0:	ea53 010c 	orrs.w	r1, r3, ip
 800f4a4:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 800f4a8:	d107      	bne.n	800f4ba <__ieee754_atan2+0x7a>
 800f4aa:	2c02      	cmp	r4, #2
 800f4ac:	d05d      	beq.n	800f56a <__ieee754_atan2+0x12a>
 800f4ae:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800f580 <__ieee754_atan2+0x140>
 800f4b2:	2c03      	cmp	r4, #3
 800f4b4:	fe06 7b00 	vseleq.f64	d7, d6, d0
 800f4b8:	e7e2      	b.n	800f480 <__ieee754_atan2+0x40>
 800f4ba:	ea52 0106 	orrs.w	r1, r2, r6
 800f4be:	d107      	bne.n	800f4d0 <__ieee754_atan2+0x90>
 800f4c0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800f588 <__ieee754_atan2+0x148>
 800f4c4:	ed9f 0b32 	vldr	d0, [pc, #200]	; 800f590 <__ieee754_atan2+0x150>
 800f4c8:	2d00      	cmp	r5, #0
 800f4ca:	fe27 7b00 	vselge.f64	d7, d7, d0
 800f4ce:	e7d7      	b.n	800f480 <__ieee754_atan2+0x40>
 800f4d0:	42ba      	cmp	r2, r7
 800f4d2:	d10f      	bne.n	800f4f4 <__ieee754_atan2+0xb4>
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	f104 34ff 	add.w	r4, r4, #4294967295
 800f4da:	d107      	bne.n	800f4ec <__ieee754_atan2+0xac>
 800f4dc:	2c02      	cmp	r4, #2
 800f4de:	d847      	bhi.n	800f570 <__ieee754_atan2+0x130>
 800f4e0:	4b36      	ldr	r3, [pc, #216]	; (800f5bc <__ieee754_atan2+0x17c>)
 800f4e2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800f4e6:	ed94 7b00 	vldr	d7, [r4]
 800f4ea:	e7c9      	b.n	800f480 <__ieee754_atan2+0x40>
 800f4ec:	2c02      	cmp	r4, #2
 800f4ee:	d842      	bhi.n	800f576 <__ieee754_atan2+0x136>
 800f4f0:	4b33      	ldr	r3, [pc, #204]	; (800f5c0 <__ieee754_atan2+0x180>)
 800f4f2:	e7f6      	b.n	800f4e2 <__ieee754_atan2+0xa2>
 800f4f4:	42bb      	cmp	r3, r7
 800f4f6:	d0e3      	beq.n	800f4c0 <__ieee754_atan2+0x80>
 800f4f8:	1a9b      	subs	r3, r3, r2
 800f4fa:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800f4fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f502:	da1a      	bge.n	800f53a <__ieee754_atan2+0xfa>
 800f504:	2800      	cmp	r0, #0
 800f506:	da01      	bge.n	800f50c <__ieee754_atan2+0xcc>
 800f508:	323c      	adds	r2, #60	; 0x3c
 800f50a:	db19      	blt.n	800f540 <__ieee754_atan2+0x100>
 800f50c:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800f510:	f000 fa64 	bl	800f9dc <fabs>
 800f514:	f000 f968 	bl	800f7e8 <atan>
 800f518:	eeb0 7b40 	vmov.f64	d7, d0
 800f51c:	2c01      	cmp	r4, #1
 800f51e:	d012      	beq.n	800f546 <__ieee754_atan2+0x106>
 800f520:	2c02      	cmp	r4, #2
 800f522:	d019      	beq.n	800f558 <__ieee754_atan2+0x118>
 800f524:	2c00      	cmp	r4, #0
 800f526:	d0ab      	beq.n	800f480 <__ieee754_atan2+0x40>
 800f528:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 800f598 <__ieee754_atan2+0x158>
 800f52c:	ee37 7b40 	vsub.f64	d7, d7, d0
 800f530:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 800f5a0 <__ieee754_atan2+0x160>
 800f534:	ee37 7b40 	vsub.f64	d7, d7, d0
 800f538:	e7a2      	b.n	800f480 <__ieee754_atan2+0x40>
 800f53a:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f588 <__ieee754_atan2+0x148>
 800f53e:	e7ed      	b.n	800f51c <__ieee754_atan2+0xdc>
 800f540:	ed9f 7b19 	vldr	d7, [pc, #100]	; 800f5a8 <__ieee754_atan2+0x168>
 800f544:	e7ea      	b.n	800f51c <__ieee754_atan2+0xdc>
 800f546:	ee17 1a90 	vmov	r1, s15
 800f54a:	ec53 2b17 	vmov	r2, r3, d7
 800f54e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f552:	ec43 2b17 	vmov	d7, r2, r3
 800f556:	e793      	b.n	800f480 <__ieee754_atan2+0x40>
 800f558:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 800f598 <__ieee754_atan2+0x158>
 800f55c:	ee37 7b40 	vsub.f64	d7, d7, d0
 800f560:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 800f5a0 <__ieee754_atan2+0x160>
 800f564:	ee30 7b47 	vsub.f64	d7, d0, d7
 800f568:	e78a      	b.n	800f480 <__ieee754_atan2+0x40>
 800f56a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800f5a0 <__ieee754_atan2+0x160>
 800f56e:	e787      	b.n	800f480 <__ieee754_atan2+0x40>
 800f570:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800f5b0 <__ieee754_atan2+0x170>
 800f574:	e784      	b.n	800f480 <__ieee754_atan2+0x40>
 800f576:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800f5a8 <__ieee754_atan2+0x168>
 800f57a:	e781      	b.n	800f480 <__ieee754_atan2+0x40>
 800f57c:	f3af 8000 	nop.w
 800f580:	54442d18 	.word	0x54442d18
 800f584:	c00921fb 	.word	0xc00921fb
 800f588:	54442d18 	.word	0x54442d18
 800f58c:	3ff921fb 	.word	0x3ff921fb
 800f590:	54442d18 	.word	0x54442d18
 800f594:	bff921fb 	.word	0xbff921fb
 800f598:	33145c07 	.word	0x33145c07
 800f59c:	3ca1a626 	.word	0x3ca1a626
 800f5a0:	54442d18 	.word	0x54442d18
 800f5a4:	400921fb 	.word	0x400921fb
	...
 800f5b0:	54442d18 	.word	0x54442d18
 800f5b4:	3fe921fb 	.word	0x3fe921fb
 800f5b8:	7ff00000 	.word	0x7ff00000
 800f5bc:	08010558 	.word	0x08010558
 800f5c0:	08010570 	.word	0x08010570

0800f5c4 <__ieee754_fmod>:
 800f5c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f5c8:	ed8d 1b00 	vstr	d1, [sp]
 800f5cc:	e9dd 6500 	ldrd	r6, r5, [sp]
 800f5d0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800f5d4:	ea57 0306 	orrs.w	r3, r7, r6
 800f5d8:	46b4      	mov	ip, r6
 800f5da:	d00d      	beq.n	800f5f8 <__ieee754_fmod+0x34>
 800f5dc:	ee10 9a90 	vmov	r9, s1
 800f5e0:	4a7b      	ldr	r2, [pc, #492]	; (800f7d0 <__ieee754_fmod+0x20c>)
 800f5e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	dc06      	bgt.n	800f5f8 <__ieee754_fmod+0x34>
 800f5ea:	4272      	negs	r2, r6
 800f5ec:	4879      	ldr	r0, [pc, #484]	; (800f7d4 <__ieee754_fmod+0x210>)
 800f5ee:	4332      	orrs	r2, r6
 800f5f0:	ea47 72d2 	orr.w	r2, r7, r2, lsr #31
 800f5f4:	4282      	cmp	r2, r0
 800f5f6:	d908      	bls.n	800f60a <__ieee754_fmod+0x46>
 800f5f8:	ed9d 7b00 	vldr	d7, [sp]
 800f5fc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f600:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800f604:	b003      	add	sp, #12
 800f606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f60a:	42bb      	cmp	r3, r7
 800f60c:	ee10 ea10 	vmov	lr, s0
 800f610:	ee10 1a10 	vmov	r1, s0
 800f614:	f009 4400 	and.w	r4, r9, #2147483648	; 0x80000000
 800f618:	dc09      	bgt.n	800f62e <__ieee754_fmod+0x6a>
 800f61a:	dbf3      	blt.n	800f604 <__ieee754_fmod+0x40>
 800f61c:	45b6      	cmp	lr, r6
 800f61e:	d3f1      	bcc.n	800f604 <__ieee754_fmod+0x40>
 800f620:	d105      	bne.n	800f62e <__ieee754_fmod+0x6a>
 800f622:	4b6d      	ldr	r3, [pc, #436]	; (800f7d8 <__ieee754_fmod+0x214>)
 800f624:	eb03 7414 	add.w	r4, r3, r4, lsr #28
 800f628:	ed94 0b00 	vldr	d0, [r4]
 800f62c:	e7ea      	b.n	800f604 <__ieee754_fmod+0x40>
 800f62e:	ea19 0f00 	tst.w	r9, r0
 800f632:	d14d      	bne.n	800f6d0 <__ieee754_fmod+0x10c>
 800f634:	2b00      	cmp	r3, #0
 800f636:	d144      	bne.n	800f6c2 <__ieee754_fmod+0xfe>
 800f638:	4868      	ldr	r0, [pc, #416]	; (800f7dc <__ieee754_fmod+0x218>)
 800f63a:	4672      	mov	r2, lr
 800f63c:	2a00      	cmp	r2, #0
 800f63e:	dc3d      	bgt.n	800f6bc <__ieee754_fmod+0xf8>
 800f640:	4a64      	ldr	r2, [pc, #400]	; (800f7d4 <__ieee754_fmod+0x210>)
 800f642:	402a      	ands	r2, r5
 800f644:	2a00      	cmp	r2, #0
 800f646:	d155      	bne.n	800f6f4 <__ieee754_fmod+0x130>
 800f648:	2f00      	cmp	r7, #0
 800f64a:	d149      	bne.n	800f6e0 <__ieee754_fmod+0x11c>
 800f64c:	46b0      	mov	r8, r6
 800f64e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800f652:	f1b8 0f00 	cmp.w	r8, #0
 800f656:	dc3f      	bgt.n	800f6d8 <__ieee754_fmod+0x114>
 800f658:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800f7e0 <__ieee754_fmod+0x21c>
 800f65c:	4540      	cmp	r0, r8
 800f65e:	db4d      	blt.n	800f6fc <__ieee754_fmod+0x138>
 800f660:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f668:	f8df e174 	ldr.w	lr, [pc, #372]	; 800f7e0 <__ieee754_fmod+0x21c>
 800f66c:	4572      	cmp	r2, lr
 800f66e:	db59      	blt.n	800f724 <__ieee754_fmod+0x160>
 800f670:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800f674:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 800f678:	1a80      	subs	r0, r0, r2
 800f67a:	1b5e      	subs	r6, r3, r5
 800f67c:	eba1 070c 	sub.w	r7, r1, ip
 800f680:	2800      	cmp	r0, #0
 800f682:	d165      	bne.n	800f750 <__ieee754_fmod+0x18c>
 800f684:	4561      	cmp	r1, ip
 800f686:	bf38      	it	cc
 800f688:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800f68c:	2e00      	cmp	r6, #0
 800f68e:	bfa4      	itt	ge
 800f690:	4639      	movge	r1, r7
 800f692:	4633      	movge	r3, r6
 800f694:	ea53 0001 	orrs.w	r0, r3, r1
 800f698:	d0c3      	beq.n	800f622 <__ieee754_fmod+0x5e>
 800f69a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f69e:	db6c      	blt.n	800f77a <__ieee754_fmod+0x1b6>
 800f6a0:	484f      	ldr	r0, [pc, #316]	; (800f7e0 <__ieee754_fmod+0x21c>)
 800f6a2:	4282      	cmp	r2, r0
 800f6a4:	db6f      	blt.n	800f786 <__ieee754_fmod+0x1c2>
 800f6a6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f6aa:	4323      	orrs	r3, r4
 800f6ac:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800f6b0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f6b4:	460c      	mov	r4, r1
 800f6b6:	ec45 4b10 	vmov	d0, r4, r5
 800f6ba:	e7a3      	b.n	800f604 <__ieee754_fmod+0x40>
 800f6bc:	3801      	subs	r0, #1
 800f6be:	0052      	lsls	r2, r2, #1
 800f6c0:	e7bc      	b.n	800f63c <__ieee754_fmod+0x78>
 800f6c2:	4847      	ldr	r0, [pc, #284]	; (800f7e0 <__ieee754_fmod+0x21c>)
 800f6c4:	02da      	lsls	r2, r3, #11
 800f6c6:	2a00      	cmp	r2, #0
 800f6c8:	ddba      	ble.n	800f640 <__ieee754_fmod+0x7c>
 800f6ca:	3801      	subs	r0, #1
 800f6cc:	0052      	lsls	r2, r2, #1
 800f6ce:	e7fa      	b.n	800f6c6 <__ieee754_fmod+0x102>
 800f6d0:	1518      	asrs	r0, r3, #20
 800f6d2:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800f6d6:	e7b3      	b.n	800f640 <__ieee754_fmod+0x7c>
 800f6d8:	3a01      	subs	r2, #1
 800f6da:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800f6de:	e7b8      	b.n	800f652 <__ieee754_fmod+0x8e>
 800f6e0:	4a3f      	ldr	r2, [pc, #252]	; (800f7e0 <__ieee754_fmod+0x21c>)
 800f6e2:	ea4f 28c7 	mov.w	r8, r7, lsl #11
 800f6e6:	f1b8 0f00 	cmp.w	r8, #0
 800f6ea:	ddb5      	ble.n	800f658 <__ieee754_fmod+0x94>
 800f6ec:	3a01      	subs	r2, #1
 800f6ee:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800f6f2:	e7f8      	b.n	800f6e6 <__ieee754_fmod+0x122>
 800f6f4:	153a      	asrs	r2, r7, #20
 800f6f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f6fa:	e7ad      	b.n	800f658 <__ieee754_fmod+0x94>
 800f6fc:	eba8 0100 	sub.w	r1, r8, r0
 800f700:	291f      	cmp	r1, #31
 800f702:	dc09      	bgt.n	800f718 <__ieee754_fmod+0x154>
 800f704:	f200 481e 	addw	r8, r0, #1054	; 0x41e
 800f708:	408b      	lsls	r3, r1
 800f70a:	fa2e f808 	lsr.w	r8, lr, r8
 800f70e:	ea48 0303 	orr.w	r3, r8, r3
 800f712:	fa0e f101 	lsl.w	r1, lr, r1
 800f716:	e7a7      	b.n	800f668 <__ieee754_fmod+0xa4>
 800f718:	4b32      	ldr	r3, [pc, #200]	; (800f7e4 <__ieee754_fmod+0x220>)
 800f71a:	1a1b      	subs	r3, r3, r0
 800f71c:	fa0e f303 	lsl.w	r3, lr, r3
 800f720:	2100      	movs	r1, #0
 800f722:	e7a1      	b.n	800f668 <__ieee754_fmod+0xa4>
 800f724:	ebae 0c02 	sub.w	ip, lr, r2
 800f728:	f1bc 0f1f 	cmp.w	ip, #31
 800f72c:	dc09      	bgt.n	800f742 <__ieee754_fmod+0x17e>
 800f72e:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 800f732:	fa07 f70c 	lsl.w	r7, r7, ip
 800f736:	fa26 f505 	lsr.w	r5, r6, r5
 800f73a:	433d      	orrs	r5, r7
 800f73c:	fa06 fc0c 	lsl.w	ip, r6, ip
 800f740:	e79a      	b.n	800f678 <__ieee754_fmod+0xb4>
 800f742:	4d28      	ldr	r5, [pc, #160]	; (800f7e4 <__ieee754_fmod+0x220>)
 800f744:	1aad      	subs	r5, r5, r2
 800f746:	fa06 f505 	lsl.w	r5, r6, r5
 800f74a:	f04f 0c00 	mov.w	ip, #0
 800f74e:	e793      	b.n	800f678 <__ieee754_fmod+0xb4>
 800f750:	4561      	cmp	r1, ip
 800f752:	bf38      	it	cc
 800f754:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800f758:	2e00      	cmp	r6, #0
 800f75a:	da05      	bge.n	800f768 <__ieee754_fmod+0x1a4>
 800f75c:	0fce      	lsrs	r6, r1, #31
 800f75e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800f762:	0049      	lsls	r1, r1, #1
 800f764:	3801      	subs	r0, #1
 800f766:	e788      	b.n	800f67a <__ieee754_fmod+0xb6>
 800f768:	ea56 0307 	orrs.w	r3, r6, r7
 800f76c:	f43f af59 	beq.w	800f622 <__ieee754_fmod+0x5e>
 800f770:	0ffb      	lsrs	r3, r7, #31
 800f772:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800f776:	0079      	lsls	r1, r7, #1
 800f778:	e7f4      	b.n	800f764 <__ieee754_fmod+0x1a0>
 800f77a:	0fc8      	lsrs	r0, r1, #31
 800f77c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f780:	0049      	lsls	r1, r1, #1
 800f782:	3a01      	subs	r2, #1
 800f784:	e789      	b.n	800f69a <__ieee754_fmod+0xd6>
 800f786:	1a80      	subs	r0, r0, r2
 800f788:	2814      	cmp	r0, #20
 800f78a:	dc0c      	bgt.n	800f7a6 <__ieee754_fmod+0x1e2>
 800f78c:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800f790:	fa03 f202 	lsl.w	r2, r3, r2
 800f794:	40c1      	lsrs	r1, r0
 800f796:	430a      	orrs	r2, r1
 800f798:	4103      	asrs	r3, r0
 800f79a:	ea43 0104 	orr.w	r1, r3, r4
 800f79e:	4610      	mov	r0, r2
 800f7a0:	ec41 0b10 	vmov	d0, r0, r1
 800f7a4:	e72e      	b.n	800f604 <__ieee754_fmod+0x40>
 800f7a6:	281f      	cmp	r0, #31
 800f7a8:	dc07      	bgt.n	800f7ba <__ieee754_fmod+0x1f6>
 800f7aa:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800f7ae:	40c1      	lsrs	r1, r0
 800f7b0:	fa03 f202 	lsl.w	r2, r3, r2
 800f7b4:	430a      	orrs	r2, r1
 800f7b6:	4623      	mov	r3, r4
 800f7b8:	e7ef      	b.n	800f79a <__ieee754_fmod+0x1d6>
 800f7ba:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800f7be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f7c2:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800f7c6:	32e2      	adds	r2, #226	; 0xe2
 800f7c8:	fa43 f202 	asr.w	r2, r3, r2
 800f7cc:	e7f3      	b.n	800f7b6 <__ieee754_fmod+0x1f2>
 800f7ce:	bf00      	nop
 800f7d0:	7fefffff 	.word	0x7fefffff
 800f7d4:	7ff00000 	.word	0x7ff00000
 800f7d8:	08010588 	.word	0x08010588
 800f7dc:	fffffbed 	.word	0xfffffbed
 800f7e0:	fffffc02 	.word	0xfffffc02
 800f7e4:	fffffbe2 	.word	0xfffffbe2

0800f7e8 <atan>:
 800f7e8:	b538      	push	{r3, r4, r5, lr}
 800f7ea:	eeb0 7b40 	vmov.f64	d7, d0
 800f7ee:	ee17 5a90 	vmov	r5, s15
 800f7f2:	4b73      	ldr	r3, [pc, #460]	; (800f9c0 <atan+0x1d8>)
 800f7f4:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f7f8:	429c      	cmp	r4, r3
 800f7fa:	dd13      	ble.n	800f824 <atan+0x3c>
 800f7fc:	4b71      	ldr	r3, [pc, #452]	; (800f9c4 <atan+0x1dc>)
 800f7fe:	429c      	cmp	r4, r3
 800f800:	dc03      	bgt.n	800f80a <atan+0x22>
 800f802:	d107      	bne.n	800f814 <atan+0x2c>
 800f804:	ee10 3a10 	vmov	r3, s0
 800f808:	b123      	cbz	r3, 800f814 <atan+0x2c>
 800f80a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f80e:	eeb0 0b47 	vmov.f64	d0, d7
 800f812:	bd38      	pop	{r3, r4, r5, pc}
 800f814:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800f950 <atan+0x168>
 800f818:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800f958 <atan+0x170>
 800f81c:	2d00      	cmp	r5, #0
 800f81e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800f822:	e7f4      	b.n	800f80e <atan+0x26>
 800f824:	4b68      	ldr	r3, [pc, #416]	; (800f9c8 <atan+0x1e0>)
 800f826:	429c      	cmp	r4, r3
 800f828:	dc11      	bgt.n	800f84e <atan+0x66>
 800f82a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f82e:	429c      	cmp	r4, r3
 800f830:	dc0a      	bgt.n	800f848 <atan+0x60>
 800f832:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800f836:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800f960 <atan+0x178>
 800f83a:	ee30 6b06 	vadd.f64	d6, d0, d6
 800f83e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f846:	dce2      	bgt.n	800f80e <atan+0x26>
 800f848:	f04f 33ff 	mov.w	r3, #4294967295
 800f84c:	e013      	b.n	800f876 <atan+0x8e>
 800f84e:	f000 f8c5 	bl	800f9dc <fabs>
 800f852:	4b5e      	ldr	r3, [pc, #376]	; (800f9cc <atan+0x1e4>)
 800f854:	429c      	cmp	r4, r3
 800f856:	dc4f      	bgt.n	800f8f8 <atan+0x110>
 800f858:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f85c:	429c      	cmp	r4, r3
 800f85e:	dc41      	bgt.n	800f8e4 <atan+0xfc>
 800f860:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800f864:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800f868:	2300      	movs	r3, #0
 800f86a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800f86e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f872:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f876:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f968 <atan+0x180>
 800f87a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800f87e:	ee24 5b04 	vmul.f64	d5, d4, d4
 800f882:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800f970 <atan+0x188>
 800f886:	eea5 3b06 	vfma.f64	d3, d5, d6
 800f88a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800f978 <atan+0x190>
 800f88e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800f892:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800f980 <atan+0x198>
 800f896:	eea6 3b05 	vfma.f64	d3, d6, d5
 800f89a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800f988 <atan+0x1a0>
 800f89e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800f8a2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800f990 <atan+0x1a8>
 800f8a6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800f998 <atan+0x1b0>
 800f8aa:	eea6 3b05 	vfma.f64	d3, d6, d5
 800f8ae:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f9a0 <atan+0x1b8>
 800f8b2:	eea5 2b06 	vfma.f64	d2, d5, d6
 800f8b6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f9a8 <atan+0x1c0>
 800f8ba:	eea2 6b05 	vfma.f64	d6, d2, d5
 800f8be:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800f9b0 <atan+0x1c8>
 800f8c2:	eea6 2b05 	vfma.f64	d2, d6, d5
 800f8c6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800f9b8 <atan+0x1d0>
 800f8ca:	1c5a      	adds	r2, r3, #1
 800f8cc:	eea2 6b05 	vfma.f64	d6, d2, d5
 800f8d0:	ee26 6b05 	vmul.f64	d6, d6, d5
 800f8d4:	eea3 6b04 	vfma.f64	d6, d3, d4
 800f8d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f8dc:	d121      	bne.n	800f922 <atan+0x13a>
 800f8de:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f8e2:	e794      	b.n	800f80e <atan+0x26>
 800f8e4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f8ee:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f8f2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f8f6:	e7be      	b.n	800f876 <atan+0x8e>
 800f8f8:	4b35      	ldr	r3, [pc, #212]	; (800f9d0 <atan+0x1e8>)
 800f8fa:	429c      	cmp	r4, r3
 800f8fc:	da0b      	bge.n	800f916 <atan+0x12e>
 800f8fe:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f902:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f906:	ee30 5b47 	vsub.f64	d5, d0, d7
 800f90a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800f90e:	2302      	movs	r3, #2
 800f910:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800f914:	e7af      	b.n	800f876 <atan+0x8e>
 800f916:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800f91a:	2303      	movs	r3, #3
 800f91c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f920:	e7a9      	b.n	800f876 <atan+0x8e>
 800f922:	4a2c      	ldr	r2, [pc, #176]	; (800f9d4 <atan+0x1ec>)
 800f924:	492c      	ldr	r1, [pc, #176]	; (800f9d8 <atan+0x1f0>)
 800f926:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f92a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800f92e:	ed93 5b00 	vldr	d5, [r3]
 800f932:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f936:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f93a:	ed92 6b00 	vldr	d6, [r2]
 800f93e:	2d00      	cmp	r5, #0
 800f940:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f944:	bfb8      	it	lt
 800f946:	eeb1 7b47 	vneglt.f64	d7, d7
 800f94a:	e760      	b.n	800f80e <atan+0x26>
 800f94c:	f3af 8000 	nop.w
 800f950:	54442d18 	.word	0x54442d18
 800f954:	3ff921fb 	.word	0x3ff921fb
 800f958:	54442d18 	.word	0x54442d18
 800f95c:	bff921fb 	.word	0xbff921fb
 800f960:	8800759c 	.word	0x8800759c
 800f964:	7e37e43c 	.word	0x7e37e43c
 800f968:	e322da11 	.word	0xe322da11
 800f96c:	3f90ad3a 	.word	0x3f90ad3a
 800f970:	24760deb 	.word	0x24760deb
 800f974:	3fa97b4b 	.word	0x3fa97b4b
 800f978:	a0d03d51 	.word	0xa0d03d51
 800f97c:	3fb10d66 	.word	0x3fb10d66
 800f980:	c54c206e 	.word	0xc54c206e
 800f984:	3fb745cd 	.word	0x3fb745cd
 800f988:	920083ff 	.word	0x920083ff
 800f98c:	3fc24924 	.word	0x3fc24924
 800f990:	5555550d 	.word	0x5555550d
 800f994:	3fd55555 	.word	0x3fd55555
 800f998:	52defd9a 	.word	0x52defd9a
 800f99c:	bfadde2d 	.word	0xbfadde2d
 800f9a0:	2c6a6c2f 	.word	0x2c6a6c2f
 800f9a4:	bfa2b444 	.word	0xbfa2b444
 800f9a8:	af749a6d 	.word	0xaf749a6d
 800f9ac:	bfb3b0f2 	.word	0xbfb3b0f2
 800f9b0:	fe231671 	.word	0xfe231671
 800f9b4:	bfbc71c6 	.word	0xbfbc71c6
 800f9b8:	9998ebc4 	.word	0x9998ebc4
 800f9bc:	bfc99999 	.word	0xbfc99999
 800f9c0:	440fffff 	.word	0x440fffff
 800f9c4:	7ff00000 	.word	0x7ff00000
 800f9c8:	3fdbffff 	.word	0x3fdbffff
 800f9cc:	3ff2ffff 	.word	0x3ff2ffff
 800f9d0:	40038000 	.word	0x40038000
 800f9d4:	08010598 	.word	0x08010598
 800f9d8:	080105b8 	.word	0x080105b8

0800f9dc <fabs>:
 800f9dc:	ec51 0b10 	vmov	r0, r1, d0
 800f9e0:	ee10 2a10 	vmov	r2, s0
 800f9e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f9e8:	ec43 2b10 	vmov	d0, r2, r3
 800f9ec:	4770      	bx	lr
	...

0800f9f0 <_init>:
 800f9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9f2:	bf00      	nop
 800f9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9f6:	bc08      	pop	{r3}
 800f9f8:	469e      	mov	lr, r3
 800f9fa:	4770      	bx	lr

0800f9fc <_fini>:
 800f9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9fe:	bf00      	nop
 800fa00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa02:	bc08      	pop	{r3}
 800fa04:	469e      	mov	lr, r3
 800fa06:	4770      	bx	lr
